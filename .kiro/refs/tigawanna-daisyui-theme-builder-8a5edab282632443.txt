Directory structure:
└── tigawanna-daisyui-theme-builder/
    ├── README.md
    ├── biome.json
    ├── components.json
    ├── index.html
    ├── package.json
    ├── postcss.config.js
    ├── tailwind.config.js
    ├── test.json
    ├── tsconfig.app.json
    ├── tsconfig.json
    ├── tsconfig.node.json
    ├── vercel.json
    ├── vite.config.ts
    ├── .env.example
    ├── .eslintrc.cjs
    ├── .prettierrc
    └── src/
        ├── App.tsx
        ├── index.css
        ├── main.tsx
        ├── routeTree.gen.ts
        ├── vite-env.d.ts
        ├── components/
        │   ├── all-in-one-theme-editor/
        │   │   ├── ColorpickerModal.tsx
        │   │   ├── DaisyUIThemeEditor.tsx
        │   │   ├── ExportTheme.tsx
        │   │   ├── GenericThemeCard.tsx
        │   │   ├── ImprtTheme.tsx
        │   │   ├── ReactColorPicker.tsx
        │   │   ├── state/
        │   │   │   └── tsr.ts
        │   │   └── utils/
        │   │       ├── color-converters.ts
        │   │       ├── daisyui-css-variables-helpers.ts
        │   │       ├── default-daisyui-oklch.ts
        │   │       ├── schema.ts
        │   │       ├── theme-default-values.ts
        │   │       ├── types.ts
        │   │       └── use-search-params-theme.ts
        │   ├── daisyui/
        │   │   ├── Actions.tsx
        │   │   ├── AllDaisyUI.tsx
        │   │   ├── DaisyUIDisplayComponents.tsx
        │   │   └── DaisyUIForm.tsx
        │   ├── hooks/
        │   │   └── use-toast.ts
        │   ├── navigation/
        │   │   ├── DaisyUiDevtools.tsx
        │   │   ├── DaisyUiDrawers.tsx
        │   │   ├── DaisyuiThemesSelect.tsx
        │   │   ├── MainNavBar.tsx
        │   │   └── tailwind-indicator.tsx
        │   ├── park/
        │   │   ├── lib/
        │   │   │   ├── create-style-context.tsx
        │   │   │   ├── create-taost.ts
        │   │   │   └── tw-plugin.ts
        │   │   └── ui/
        │   │       ├── accordion.tsx
        │   │       ├── alert.tsx
        │   │       ├── avatar.tsx
        │   │       ├── badge.tsx
        │   │       ├── button.tsx
        │   │       ├── card.tsx
        │   │       ├── carousel.tsx
        │   │       ├── checkbox.tsx
        │   │       ├── code.tsx
        │   │       ├── collapsible.tsx
        │   │       ├── color-picker.tsx
        │   │       ├── combobox.tsx
        │   │       ├── date-picker.tsx
        │   │       ├── dialog.tsx
        │   │       ├── drawer.tsx
        │   │       ├── editable.tsx
        │   │       ├── file-upload.tsx
        │   │       ├── form-label.tsx
        │   │       ├── heading.tsx
        │   │       ├── hover-card.tsx
        │   │       ├── icon-button.tsx
        │   │       ├── icon.tsx
        │   │       ├── input.tsx
        │   │       ├── kbd.tsx
        │   │       ├── link.tsx
        │   │       ├── menu.tsx
        │   │       ├── number-input.tsx
        │   │       ├── pagination.tsx
        │   │       ├── pin-input.tsx
        │   │       ├── popover.tsx
        │   │       ├── progress.tsx
        │   │       ├── radio-button-group.tsx
        │   │       ├── radio-group.tsx
        │   │       ├── rating-group.tsx
        │   │       ├── segment-group.tsx
        │   │       ├── select.tsx
        │   │       ├── skeleton.tsx
        │   │       ├── slider.tsx
        │   │       ├── splitter.tsx
        │   │       ├── switch.tsx
        │   │       ├── table.tsx
        │   │       ├── tabs.tsx
        │   │       ├── tags-input.tsx
        │   │       ├── text.tsx
        │   │       ├── textarea.tsx
        │   │       ├── toast.tsx
        │   │       ├── toggle-group.tsx
        │   │       └── tooltip.tsx
        │   └── shadcn/
        │       ├── lib/
        │       │   └── utils.ts
        │       └── ui/
        │           ├── accordion.tsx
        │           ├── alert-dialog.tsx
        │           ├── alert.tsx
        │           ├── aspect-ratio.tsx
        │           ├── avatar.tsx
        │           ├── badge.tsx
        │           ├── breadcrumb.tsx
        │           ├── button.tsx
        │           ├── calendar.tsx
        │           ├── card.tsx
        │           ├── carousel.tsx
        │           ├── chart.tsx
        │           ├── checkbox.tsx
        │           ├── collapsible.tsx
        │           ├── command.tsx
        │           ├── context-menu.tsx
        │           ├── dialog.tsx
        │           ├── drawer.tsx
        │           ├── dropdown-menu.tsx
        │           ├── form.tsx
        │           ├── hover-card.tsx
        │           ├── input-otp.tsx
        │           ├── input.tsx
        │           ├── label.tsx
        │           ├── menubar.tsx
        │           ├── navigation-menu.tsx
        │           ├── pagination.tsx
        │           ├── popover.tsx
        │           ├── progress.tsx
        │           ├── radio-group.tsx
        │           ├── resizable.tsx
        │           ├── scroll-area.tsx
        │           ├── select.tsx
        │           ├── separator.tsx
        │           ├── sheet.tsx
        │           ├── skeleton.tsx
        │           ├── slider.tsx
        │           ├── sonner.tsx
        │           ├── switch.tsx
        │           ├── table.tsx
        │           ├── tabs.tsx
        │           ├── textarea.tsx
        │           ├── toast.tsx
        │           ├── toggle-group.tsx
        │           ├── toggle.tsx
        │           └── tooltip.tsx
        └── routes/
            ├── __root.tsx
            ├── about.tsx
            ├── index.tsx
            ├── -components/
            │   ├── Intro.tsx
            │   └── type.ts
            ├── shadcn/
            │   ├── charts.lazy.tsx
            │   ├── index.lazy.tsx
            │   └── -components/
            │       ├── AllComponents.tsx
            │       ├── CarouselDemo.tsx
            │       ├── Inputs.tsx
            │       ├── NavbarDemo.tsx
            │       ├── Outputs.tsx
            │       └── demos/
            │           ├── AccordionDemo.tsx
            │           ├── Alertdemo.tsx
            │           ├── AlertDialogDemo.tsx
            │           ├── AvatarDemo.tsx
            │           ├── BadgeDemo.tsx
            │           ├── BreadCumbsDemo.tsx
            │           ├── ButtonDemo.tsx
            │           ├── CalenderDemo.tsx
            │           ├── CardDemo.tsx
            │           ├── ChartsDemo.tsx
            │           ├── ComboboxDemo.tsx
            │           ├── CommandDemo.tsx
            │           ├── ContextMenuDemo.tsx
            │           ├── DrawerDemo.tsx
            │           ├── DropdownMenuDemo.tsx
            │           ├── NavigationMenuDemo.tsx
            │           ├── SkeletonDemo.tsx
            │           ├── Sliderdemo.tsx
            │           ├── Sonnerdemo.tsx
            │           ├── TabsDemo.tsx
            │           └── data-table/
            │               ├── colimns.tsx
            │               └── DataTableDemo.tsx
            └── twarkui/
                ├── index.lazy.tsx
                └── -components/
                    ├── ActionComponents.tsx
                    ├── TwarkUIPageComponent.tsx
                    └── groups/
                        ├── AccordionDemo.tsx
                        ├── ButtonsDemo.tsx
                        └── ToasterDemo.tsx

================================================
FILE: README.md
================================================
# Daisyui theme builder

inspired by [daisy ui theme builder](https://themes.ionevolve.com/) but all the state is stored in the URL making it

- sharable and revisatbale from history
- messed up? just hit the browser's back button
- start from the default daisyui themes , lock a specific value and switch the daisyui theme which will change every other value but the locked value to the new theme
- lock specific colors so that they don't change when you switch themes
  ![alt text](image.png)
- export theme
  ![alt text](image-1.png)
  [code on github](https://github.com/tigawanna/daisyui-theme-builder)



```html
<div data-scope="toast" data-part="group" dir="ltr" tabindex="-1" aria-label="bottom-end Notifications alt+T" id="toast-group:bottom-end" data-placement="bottom-end" data-side="bottom" data-align="end" aria-live="polite" role="region" style="position: fixed; display: flex; flex-direction: column; --gap: 16px; --first-height: 76px; z-index: 2147483647; align-items: flex-end; bottom: max(env(safe-area-inset-bottom, 0px), 1rem); inset-inline-end: calc(env(safe-area-inset-right, 0px) + 1rem);"><div data-scope="toast" data-part="root" dir="ltr" id="toast:toast:12" data-state="open" data-type="loading" data-placement="bottom-end" data-align="end" data-side="bottom" data-paused="" data-first="" role="status" aria-atomic="true" tabindex="0" type="success" class="toast__root min-w-[300px] bg-base-300 rounded-lg p-3  gap-1 z-50  " style="position: absolute; pointer-events: auto; --opacity: 1; --remove-delay: 200ms; --duration: 9007199254740991ms; --initial-height: 76px; --offset: 0px; --index: 0; --z-index: 1; --lift-amount: calc(var(--lift) * var(--gap)); --y: 0; --x: 0; bottom: 0px; --sign: 1; --lift: -1;" data-mounted="" data-overlap=""><div data-ghost="before" style="position: absolute; inset: 0px; scale: 1 2; pointer-events: none;"></div><div data-scope="toast" data-part="title" id="toast:toast:12:title" class="text-2xl font-bold">Warning</div><div data-scope="toast" data-part="description" id="toast:toast:12:description" class="text-sm">this is a warning toast</div><button class="button btn btn-link btn-sm absolute right-0 bottom-0 p-2" data-scope="toast" data-part="action-trigger" type="button">Action</button><button class="button btn btn-link btn-sm absolute right-0 top-0 p-2" id="toasttoast:12:close" data-scope="toast" data-part="close-trigger" type="button" aria-label="Dismiss notification"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x"><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg></button><div data-ghost="after" style="position: absolute; left: 0px; height: calc(var(--gap) + 2px); bottom: 100%; width: 100%;"></div></div></div>



<div data-scope="toast" data-part="root" dir="ltr" id="toast:toast:1q" data-state="open" data-type="error" data-placement="top" data-align="center" data-side="top" role="status" aria-atomic="true" tabindex="0" class="toast__root toast--type__error" style="position: absolute; pointer-events: auto; --opacity: 1; --remove-delay: 200ms; --duration: 200000ms; --initial-height: 101px; --offset: 117px; --index: 1; --z-index: 51; --lift-amount: calc(var(--lift) * var(--gap)); 
--y: calc(var(--lift-amount) * var(--index)); --x: 0; top: 0px; --sign: -1; --lift: 1; --height: var(--first-height); --base-scale: var(--index) * 0.05 + 1; --scale: calc(-1 * var(--base-scale));" data-mounted="" data-sibling="" data-overlap=""><div data-ghost="before" style="position: absolute; inset: 0px; scale: 1 2; pointer-events: none;"></div><div data-scope="toast" data-part="title" id="toast:toast:1q:title" class="toast__title">Toast Title</div><div data-scope="toast" data-part="description" id="toast:toast:1q:description" class="toast__description">Toast Description</div><button class="button button--variant_link button--size_sm toast__actionTrigger" data-scope="toast" data-part="action-trigger" type="button">Action</button><button class="iconButton iconButton--variant_link iconButton--size_sm toast__closeTrigger" id="toasttoast:1q:close" data-scope="toast" data-part="close-trigger" type="button" aria-label="Dismiss notification"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x"><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg></button><div data-ghost="after" style="position: absolute; left: 0px; height: calc(var(--gap) + 2px); bottom: 100%; width: 100%;"></div></div>



<div data-scope="toast" data-part="root" dir="ltr" id="toast:toast:21" data-state="open" data-type="error" data-placement="top" data-align="center" data-side="top" role="status" aria-atomic="true" tabindex="0" class="toast__root toast--type__error" style="position: absolute; pointer-events: auto; --opacity: 1; --remove-delay: 200ms; --duration: 200000ms; --initial-height: 101px; --offset: 234px; --index: 2; --z-index: 3; --lift-amount: calc(var(--lift) * var(--gap)); --y: calc(var(--lift-amount) * var(--index)); --x: 0; top: 0px; --sign: -1; --lift: 1; --height: var(--first-height); --base-scale: var(--index) * 0.05 + 1; --scale: calc(-1 * var(--base-scale));" data-mounted="" data-sibling="" data-overlap=""><div data-ghost="before" style="position: absolute; inset: 0px; scale: 1 2; pointer-events: none;"></div><div data-scope="toast" data-part="title" id="toast:toast:21:title" class="toast__title">Toast Title</div><div data-scope="toast" data-part="description" id="toast:toast:21:description" class="toast__description">Toast Description</div><button class="button button--variant_link button--size_sm toast__actionTrigger" data-scope="toast" data-part="action-trigger" type="button">Action</button><button class="iconButton iconButton--variant_link iconButton--size_sm toast__closeTrigger" id="toasttoast:21:close" data-scope="toast" data-part="close-trigger" type="button" aria-label="Dismiss notification"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x"><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg></button><div data-ghost="after" style="position: absolute; left: 0px; height: calc(var(--gap) + 2px); bottom: 100%; width: 100%;"></div></div>

```








================================================
FILE: biome.json
================================================
{
	"$schema": "https://biomejs.dev/schemas/1.6.4/schema.json",
	"organizeImports": {
		"enabled": true
	},
	"linter": {
		"enabled": true,
		"rules": {
			"a11y": {
				"noSvgWithoutTitle": "off"
			},
			"recommended": true,
			"style": {
				"useConst": "off"
			},
			"correctness": {
				"noEmptyPattern": "off",
				"useExhaustiveDependencies": "off"
			},
			"suspicious": {
				"noExplicitAny": "off",
				"noEmptyInterface": "off"
			},
			"complexity": {
				"noBannedTypes": "off"
			}
		}
	}
}



================================================
FILE: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/routes/index.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components/shadcn",
    "utils": "@/components/shadcn/lib/utils"
  }
}



================================================
FILE: index.html
================================================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <!-- <link rel="icon" type="image/svg+xml" href="/favicon.svg" /> -->
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>urban ui</title>
    <meta name="description" content="twark ui , tallwind + daisyui themse + arkui/react" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



================================================
FILE: package.json
================================================
{
  "name": "urban-ui",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "format": "prettier --write --ignore-unknown src",
    "preview": "vite preview"
  },
  "dependencies": {
    "@ark-ui/react": "^3.5.0",
    "@hookform/resolvers": "^3.9.0",
    "@million/lint": "1.0.0-rc.84",
    "@radix-ui/colors": "^3.0.0",
    
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.2",

    "@tanstack/react-router": "1.43.6",

    "chroma-js": "^3.0.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.2.0",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.408.0",
    "next-themes": "^0.3.0",

    "react-color": "^2.19.3",
    "react-day-picker": "8.10.1",

    "react-hook-form": "^7.53.0",
    "react-resizable-panels": "^2.1.2",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.4.0",
    "tailwind-variants": "^0.2.1",
    "theme-change": "^2.5.0",
    "vaul": "^0.9.1",
        "react": "19.0.0-rc-e210d081-20240909",
        "react-dom": "19.0.0-rc-e210d081-20240909",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@park-ui/tailwind-plugin": "^0.20.1",
    "babel-plugin-react-compiler": "0.0.0-experimental-2bc6fec-20240909",
    "@tailwindcss/container-queries": "^0.1.1",
    "@tanstack/react-table": "^8.20.5",
    "@tanstack/router-devtools": "1.43.6",
    "@tanstack/router-vite-plugin": "1.43.9",
    "@types/chroma-js": "^2.4.4",
    "@types/node": "^22.5.4",
    "@types/react": "^18.3.3",
    "@types/react-color": "^3.0.12",
    "@types/react-dom": "^18.3.0",
    "@typescript-eslint/eslint-plugin": "^7.13.1",
    "@typescript-eslint/parser": "^7.13.1",
    "@vitejs/plugin-react": "^4.3.1",
    "@vitejs/plugin-react-swc": "^3.7.0",
    "autoprefixer": "^10.4.19",
    "daisyui": "^4.12.10",
    
    "eslint": "^8.57.0",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.8",
    "postcss": "^8.4.39",
    "prettier": "^3.3.3",
    "prettier-plugin-tailwindcss": "^0.6.6",
    "rollup-plugin-analyzer": "^4.0.0",
    "tailwindcss": "^3.4.4",
    "tailwindcss-animate": "^1.0.7",
    "tsx": "^4.17.0",
    "typescript": "^5.2.2",
    "vite": "^5.3.1",
    "vite-plugin-splash-screen": "^0.0.1",
    "vite-tsconfig-paths": "^4.3.2",
    "vitest": "^2.0.5"
  },
      "pnpm": {
        "peerDependencyRules": {
          "allowedVersions": {
            "react": "^19.0.0-rc-e210d081-20240909",
            "react-dom": "^19.0.0-rc-e210d081-20240909"
          }
        }
      }
}



================================================
FILE: postcss.config.js
================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}



================================================
FILE: tailwind.config.js
================================================
/* eslint-disable no-undef */
/** @type {import('tailwindcss').Config} */


// "--p": "primary",          // primary color and its values
// "--pc": "primary-content", // color of content within primary color

// "--s": "secondary",        // secondary color and its values
// "--sc": "secondary-content", // color of content within secondary color

// "--n": "neutral",          // state color and its values
// "--nc": "neutral-content", // color of content within state color

// "--a": "accent",          // accent color and its values
// "--ac": "accent-content", // color of content within accent color

// "--b1": "base-100",              // base color, also called gray color
// "--b2": "base-200",              // base color, also called gray color
// "--b3": "base-300",              // base color, also called gray color
// "--bc": "base-content",           // base color, also called gray color

// "--in": "info",          // info color and its values
// "--inc": "info-content", // color of content within info color

// "--su": "success",          // success color and its values
// "--suc": "success-content", // color of content within success color

// "--wa": "warning",          // warning color and its values
// "--wac": "warning-content", // color of content within warning color

// "--er": "error",          // error color and its values
// "--erc": "error-content", // color of content within error color

// "--rounded-box": "1rem",          // border radius rounded-box utility class, used in card and other large boxes
// "--rounded-btn": "0.5rem",        // border radius rounded-btn utility class, used in buttons and similar element
// "--rounded-badge": "1.9rem",      // border radius rounded-badge utility class, used in badges and similar

// "--animation-btn": "0.25s",       // duration of animation when you click on button
// "--animation-input": "0.2s",      // duration of animation for inputs like checkbox, toggle, radio, etc

// "--btn-focus-scale": "0.95",      // scale transform of button when you focus on it
// "--border-btn": "1px",            // border width of buttons

// "--tab-border": "1px",            // border width of tabs
// "--tab-radius": "0.5rem",         // border radius of tab
export default {
  darkMode: ["class"],
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "oklch(var(--bc))",
        input: "oklch(var(--b1))",
        ring: "oklch(var(--ac))",
        background: "oklch(var(--b1))",
        foreground: "oklch(var(--bc))",
        "chart-1": "oklch(var(--p))",
        "chart-2": "oklch(var(--s))",
        "primary-foreground": "oklch(var(--pc))",
        "secondary-foreground": "oklch(var(--sc))",
        "accent-foreground": "oklch(var(--ac))",

        destructive: {
          DEFAULT: "oklch(var(--er))",
          foreground: "oklch(var(--erc))",
        },
        muted: {
          DEFAULT: "oklch(var(--b3))",
          foreground: "oklch(var(--bc))",
        },

        popover: {
          DEFAULT: "oklch(var(--b1))",
          foreground: "oklch(var(--bc))",
        },
        card: {
          DEFAULT: "oklch(var(--b2))",
          foreground: "oklch(var(--bc))",
        },
      },
      borderRadius: {
        lg: `var(--rounded-box)`,
        md: `calc(var(--rounded-box) - 2px)`,
        sm: "calc(var(--rounded-box) - 4px)",
      },
      // fontFamily: {
      //   sans: ["var(--font-sans)", ...fontFamily.sans],
      // },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },

        overlayShow: {
          from: { opacity: "0" },
          to: { opacity: "1" },
        },
        contentShow: {
          from: {
            opacity: " 0",
            transform: "translate(-50%, -48%) scale(0.96)",
          },
          to: { opacity: "1", transform: "translate(-50%, -50%) scale(1)" },
        },
      },
      // translate: var(--x) var(--y) 0;
      translate: {
        "toaster-var": "var(--x) var(--y) 0",
        "toaster-x": "var(--x)",
        "toaster-y": "var(--y)",
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },

  plugins: [
    require("daisyui"),
    require("tailwindcss-animate"),
    require("./src/components/park/lib/tw-plugin.ts"),
    // require("daisify-shadcn"),
    require("@tailwindcss/container-queries"),
  ],
  daisyui: {
    themes: [
      "light",
      "dark",
      "cupcake",
      "bumblebee",
      "emerald",
      "corporate",
      "synthwave",
      "retro",
      "cyberpunk",
      "valentine",
      "halloween",
      "garden",
      "forest",
      "aqua",
      "lofi",
      "pastel",
      "fantasy",
      "wireframe",
      "black",
      "luxury",
      "dracula",
      "cmyk",
      "autumn",
      "business",
      "acid",
      "lemonade",
      "night",
      "coffee",
      "winter",
      "dim",
      "nord",
      "sunset",
      {
        custom_theme: {
          "color-scheme": "light",
          primary: "#db924b",
          "primary-content": "#110802",
          secondary: "#263e3f",
          "secondary-content": "#d0d5d5",
          accent: "#10576d",
          "accent-content": "#cfdce1",
          neutral: "#120c12",
          "neutral-content": "#c9c7c9",
          "base-100": "#20161f",
          "base-200": "#1c131b",
          "base-300": "#181017",
          "base-content": "#632c3b",
          success: "#9db787",
          error: "#fc9581",
          info: "#8dcac1",
          warning: "#ffd25f",
          "--animation-btn": "0.25s",
          "--animation-input": ".2s",
          "--border-btn": "1px",
          "--btn-focus-scale": "0.95",
          "--rounded-badge": "1.9rem",
          "--rounded-box": "1rem",
          "--rounded-btn": "1.9rem",
          "--tab-border": "1px",
          "--tab-radius": "0.7rem",
        },
      },
    ],
  },
};




================================================
FILE: test.json
================================================
{
    "custom_theme": {
        "primary": "#65c3c8",
        "primary-content": "#030e0f",
        "secondary": "#ef9fbc",
        "secondary-content": "#14090d",
        "accent": "#eeaf3a",
        "accent-content": "#140b01",
        "neutral": "#291334",
        "neutral-content": "#d0cad3",
        "base-100": "#faf7f5",
        "base-200": "#efeae6",
        "base-300": "#e7e2df",
        "base-content": "#291334",
        "success": "#00a96e",
        "error": "#ff5861",
        "info": "#00b5ff",
        "warning": "#ffbe00",
        "--animation-btn": "0.25s",
        "--animation-input": ".2s",
        "--border-btn": "1px",
        "--btn-focus-scale": "0.95",
        "--rounded-badge": "1.9rem",
        "--rounded-box": "1rem",
        "--rounded-btn": "1.9rem",
        "--tab-border": "2px",
        "--tab-radius": "0.7rem"
    }
}



================================================
FILE: tsconfig.app.json
================================================
{
  "compilerOptions": {
    "composite": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "~/*": ["./src/*"]
    }
  },
  "include": ["src"]
}



================================================
FILE: tsconfig.json
================================================
{
  "files": [],
  "compilerOptions": {
    "baseUrl": ".",
    "noFallthroughCasesInSwitch": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "paths": {
      "@/*": ["./src/*"],
      "~/*": ["./src/*"]
    }
  },
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ]
}



================================================
FILE: tsconfig.node.json
================================================
{
  "compilerOptions": {
    "composite": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "strict": true,
    "noEmit": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "~/*": ["./src/*"]
    }
  },
  "include": ["vite.config.ts"]
}



================================================
FILE: vercel.json
================================================
{
    "routes": [
        {
            "src": "/[^.]+",
            "dest": "/",
            "status": 200
        }
    ]
}



================================================
FILE: vite.config.ts
================================================
/// <reference types="vitest" />

import MillionLint from '@million/lint';
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import tsconfigPaths from "vite-tsconfig-paths";
import { TanStackRouterVite } from "@tanstack/router-vite-plugin";
import analyze from "rollup-plugin-analyzer";
// import { splashScreen } from "vite-plugin-splash-screen";
const ReactCompilerConfig = {
  /* ... */
};
// https://vitejs.dev/config/
const _plugins = [
  react({
    babel: {
      plugins: [["babel-plugin-react-compiler", ReactCompilerConfig]],
    },
  }),
  ,
  TanStackRouterVite(),
  tsconfigPaths(),
  analyze({
    // highlight the modules with size > 40kb
    filter(moduleObject) {
      return moduleObject.size > 40000;
    },
  }),
  // splashScreen({
  //   splashBg: "#4D3119",
  //   loaderBg: "#D2BA79",
  //   loaderType: "dots",
  //   logoSrc: "logo.svg",
  // }),
];
if(process.env.MILLION_LINT) {
  _plugins.unshift(MillionLint.vite())
  
}
export default defineConfig({
  plugins: _plugins,
  server: {
    host: true,
    port: 5000
  },
  test: {
    globals: true
  }
});



================================================
FILE: .env.example
================================================
MILLION_LINT=true



================================================
FILE: .eslintrc.cjs
================================================
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parser: '@typescript-eslint/parser',
  plugins: ['react-refresh'],
  rules: {
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}



================================================
FILE: .prettierrc
================================================
{
      "plugins": ["prettier-plugin-tailwindcss"]
}



================================================
FILE: src/App.tsx
================================================
import { RouterProvider } from "@tanstack/react-router";
import { router } from "./main";

export function App() {
  return (
    <>
      <RouterProvider router={router} defaultPreload="intent" />
    </>
  );
}



================================================
FILE: src/index.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --chart-1: theme(colors.primary);
    --chart-2: theme(colors.secondary);
    --color-desktop: theme(colors.warning);
    --color-mobile: theme(colors.accent);
    --color-chrome: theme(colors.error);
    --color-safari: theme(colors.success);
    --y: calc(var(--lift-amount) * var(--index))
    --translate:var(--x) var(--y) 0;
  }
  * {
    @apply border-border;
  }
    .toast--type__info {
    @apply bg-bg-muted;
  }
  /* Base styles for toast types (assuming Tailwind CSS) */
  .toast--type__success {
    @apply text-success-content bg-success;
  }

  .toast--type__error {
    @apply text-error-content bg-error;
  }
  .toast--type__loading {
    @apply text-loading-content bg-loading;
  }

}

.animated-body {
  @apply bg-primary/20 text-primary-content;
  font-feature-settings:
    "rlig" 1,
    "calt" 1;
}
.background-animate {
  background-size: 400%;
  -webkit-animation: AnimationName 5s ease infinite;
  -moz-animation: AnimationName 5s ease infinite;
  animation: AnimationName 5s ease infinite;
}

@keyframes AnimationName {
  0%,
  100% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
}


.toast__root {
  overflow-wrap: anywhere;
  position: relative;
  translate: var(--x) var(--y) 0;
  will-change: translate, opacity, scale;
  --transition-duration: 300ms;
  transition-duration: 300ms;
  --transition-prop: translate, scale, opacity, height;
  transition-property: translate, scale, opacity, height;
  --transition-easing:cubic-bezier(0.2, 0.0, 0, 1.0);
  transition-timing-function:cubic-bezier(0.2, 0.0, 0, 1.0);



}





================================================
FILE: src/main.tsx
================================================
import * as React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import { createRouter } from "@tanstack/react-router";
import { routeTree } from "./routeTree.gen";
import { Loader } from "lucide-react";
import { App } from "./App";

export interface RouterCntextTypes {}

export const router = createRouter({
  routeTree,
  defaultNotFoundComponent() {
    return (
      <div className="flex h-full min-h-screen w-full flex-col items-center justify-center">
        <div className="bg-bg-emphasized flex flex-col items-center justify-center rounded-lg p-[5%]">
          <h1 className="text-9xl font-bold">404</h1>
          <p className="text-2xl">Page Not Found</p>
        </div>
      </div>
    );
  },
  defaultPendingComponent: () => (
    <div className="flex h-full min-h-screen w-full flex-col items-center justify-center">
      <div className="rounded-full border-b-2 border-primary">
        <Loader className="animate-spin" />
      </div>
    </div>
  ),
  defaultErrorComponent: ({ error }: { error: Error }) => (
    <div className="flex h-full min-h-screen w-full flex-col items-center justify-center">
      <div className="rounded-lg bg-error p-[2%] text-error-content">
        <p className="">{error.name}</p>
        <p className="text-sm">{error.message}</p>
      </div>
    </div>
  ),
  context: {},
  defaultPreload: "intent",
  // Since we're using React Query, we don't want loader calls to ever be stale
  // This will ensure that the loader is always called when the route is preloaded or visited
  defaultPreloadStaleTime: 0,
});

declare module "@tanstack/react-router" {
  interface Register {
    router: typeof router;
  }
}

// biome-ignore lint/style/noNonNullAssertion: <explanation>
const rootElement = document.getElementById("root")!;
if (!rootElement.innerHTML) {
  const root = ReactDOM.createRoot(rootElement);
  root.render(
    <React.StrictMode>
      <App />
    </React.StrictMode>,
  );
}



================================================
FILE: src/routeTree.gen.ts
================================================
/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const TwarkuiIndexLazyImport = createFileRoute('/twarkui/')()
const ShadcnIndexLazyImport = createFileRoute('/shadcn/')()
const ShadcnChartsLazyImport = createFileRoute('/shadcn/charts')()

// Create/Update Routes

const AboutRoute = AboutImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TwarkuiIndexLazyRoute = TwarkuiIndexLazyImport.update({
  path: '/twarkui/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/twarkui/index.lazy').then((d) => d.Route))

const ShadcnIndexLazyRoute = ShadcnIndexLazyImport.update({
  path: '/shadcn/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/shadcn/index.lazy').then((d) => d.Route))

const ShadcnChartsLazyRoute = ShadcnChartsLazyImport.update({
  path: '/shadcn/charts',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/shadcn/charts.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/shadcn/charts': {
      id: '/shadcn/charts'
      path: '/shadcn/charts'
      fullPath: '/shadcn/charts'
      preLoaderRoute: typeof ShadcnChartsLazyImport
      parentRoute: typeof rootRoute
    }
    '/shadcn/': {
      id: '/shadcn/'
      path: '/shadcn'
      fullPath: '/shadcn'
      preLoaderRoute: typeof ShadcnIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/twarkui/': {
      id: '/twarkui/'
      path: '/twarkui'
      fullPath: '/twarkui'
      preLoaderRoute: typeof TwarkuiIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  AboutRoute,
  ShadcnChartsLazyRoute,
  ShadcnIndexLazyRoute,
  TwarkuiIndexLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/shadcn/charts",
        "/shadcn/",
        "/twarkui/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/shadcn/charts": {
      "filePath": "shadcn/charts.lazy.tsx"
    },
    "/shadcn/": {
      "filePath": "shadcn/index.lazy.tsx"
    },
    "/twarkui/": {
      "filePath": "twarkui/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */



================================================
FILE: src/vite-env.d.ts
================================================
/// <reference types="vite/client" />



================================================
FILE: src/components/all-in-one-theme-editor/ColorpickerModal.tsx
================================================
import { twMerge } from "tailwind-merge";
import { ReactColorPicker } from "./ReactColorPicker";
import { DaisyUIColorSearchParmsTypes } from "./utils/schema";
import { memo, useCallback, useEffect, useRef } from "react";

type BaseDaisyUiThemeKeysWithoutBase = keyof DaisyUIColorSearchParmsTypes;
interface ColorpickerModalProps<T extends BaseDaisyUiThemeKeysWithoutBase> {
  theme_key: T;
  theme: DaisyUIColorSearchParmsTypes[T];
  bg_color: string;
  children: React.ReactNode;
  className?: string;
  updateTheme: (items_key: string, new_items: string) => void;
}

export const ColorpickerModal = memo(
  <T extends BaseDaisyUiThemeKeysWithoutBase>({
    children,
    bg_color,
    theme_key,
    theme,
    className = "",
    updateTheme,
  }: ColorpickerModalProps<T>) => {

    const modalRef = useRef<HTMLDialogElement|null>(null);
    useEffect(() => {
      const current_modal = document.getElementById(
        `my_color_picker_modal-${theme_key}`,
      ) as HTMLDialogElement;
      modalRef.current = current_modal;
    },[theme_key])
    
    const updateThemeCallback = useCallback((items_key: string, new_items: string)=>{
      updateTheme(items_key, new_items)
    },[updateTheme])
    if (!theme) return null;
    return (
      <div className={twMerge("w-full items-center", className)}>
        {/* Open the modal using document.getElementById('ID').showModal() method */}
        <div
          className=""
          ref={
            modalRef as unknown as React.LegacyRef<HTMLDivElement> | undefined
          }
          onClick={() => {
            modalRef.current?.showModal();
          }}
        >
          {children}
        </div>
        <dialog
          id={`my_color_picker_modal-${theme_key}`}
          className="modal w-full"
        >
          <div className={twMerge("modal-box min-w-fit", bg_color)}>
            <ReactColorPicker
              themeName={theme.name}
              oklchString={theme?.value}
              colorKey={theme_key}
              updateTheme={updateThemeCallback}
            />
          </div>
          <form method="dialog" className="modal-backdrop">
            <button>close</button>
          </form>
        </dialog>
      </div>
    );
  },
);



================================================
FILE: src/components/all-in-one-theme-editor/DaisyUIThemeEditor.tsx
================================================
/* eslint-disable react-hooks/exhaustive-deps */
import { useCallback, useMemo } from "react";
import { GenericColorCard, GenericThemeCurveCard } from "./GenericThemeCard";
import { DaisyUIThemeSearchParmsTypes } from "./utils/schema";


export default function DaisyUIThemeEditor({
  theme,
  updateTheme,
  updateLockedTheme
}: {
  theme: DaisyUIThemeSearchParmsTypes;
  updateTheme: (items_key: string, new_items: string) => void;
  updateLockedTheme: (items_key: string, is_locked: boolean) => void;
}) {
  // block
  const primaryTheme = useMemo(() => theme?.["primary"], [theme?.["primary"]]);
  const primaryContentTheme = useMemo(
    () => theme?.["primary-content"],
    [theme?.["primary-content"]],
  );
  const secondaryTheme = useMemo(
    () => theme?.["secondary"],
    [theme?.["secondary"]],
  );
  const secondaryContentTheme = useMemo(
    () => theme?.["secondary-content"],
    [theme?.["secondary-content"]],
  );
  const accentTheme = useMemo(() => theme?.["accent"], [theme?.["accent"]]);
  const accentContentTheme = useMemo(
    () => theme?.["accent-content"],
    [theme?.["accent-content"]],
  );
  const successTheme = useMemo(() => theme?.["success"], [theme?.["success"]]);
  const successContentTheme = useMemo(
    () => theme?.["success-content"],
    [theme?.["success-content"]],
  );
  const neutralTheme = useMemo(() => theme?.["neutral"], [theme?.["neutral"]]);
  const neutralContentTheme = useMemo(
    () => theme?.["neutral-content"],
    [theme?.["neutral-content"]],
  );
  const base100Theme = useMemo(
    () => theme?.["base-100"],
    [theme?.["base-100"]],
  );
  const base200Theme = useMemo(
    () => theme?.["base-200"],
    [theme?.["base-200"]],
  );
  const base300Theme = useMemo(
    () => theme?.["base-300"],
    [theme?.["base-300"]],
  );
  const baseContentTheme = useMemo(
    () => theme?.["base-content"],
    [theme?.["base-content"]],
  );
  const infoTheme = useMemo(() => theme?.["info"], [theme?.["info"]]);
  const infoContentTheme = useMemo(
    () => theme?.["info-content"],
    [theme?.["info-content"]],
  );
  const warningTheme = useMemo(() => theme?.["warning"], [theme?.["warning"]]);
  const warningContentTheme = useMemo(
    () => theme?.["warning-content"],
    [theme?.["warning-content"]],
  );
  const errorTheme = useMemo(() => theme?.["error"], [theme?.["error"]]);
  const errorContentTheme = useMemo(
    () => theme?.["error-content"],
    [theme?.["error-content"]],
  );

  // endblock

  //  tab
  const tabRadius = useMemo(
    () => theme?.["--tab-radius"],
    [theme?.["--tab-radius"]],
  );
  const tabBorder = useMemo(
    () => theme?.["--tab-border"],
    [theme?.["--tab-border"]],
  );
  //  btn
  const btnFocusState = useMemo(
    () => theme?.["--btn-focus-scale"],
    [theme?.["--btn-focus-scale"]],
  );
  const borderBtn = useMemo(
    () => theme?.["--border-btn"],
    [theme?.["--border-btn"]],
  );
  //  rpunded
  const roundedBox = useMemo(
    () => theme?.["--rounded-box"],
    [theme?.["--rounded-box"]],
  );
  const roundedBadge = useMemo(
    () => theme?.["--rounded-badge"],
    [theme?.["--rounded-badge"]],
  );
  const roundedBtn = useMemo(
    () => theme?.["--rounded-btn"],
    [theme?.["--rounded-btn"]],
  );
  //  animation
  const animationBtn = useMemo(
    () => theme?.["--animation-btn"],
    [theme?.["--animation-btn"]],
  );
  const animationInput = useMemo(
    () => theme?.["--animation-input"],
    [theme?.["--animation-input"]],
  );


  const updateThemeCallback = useCallback(
    (items_key: string, new_items: string) => {
      updateTheme(items_key, new_items);
    },
    [updateTheme],
  );
  const updateLockedThemeCallback = useCallback(
    (items_key: string, is_locked: boolean) => {
      updateLockedTheme(items_key, is_locked);
    },
    [updateLockedTheme],
  );



  return (

    <div className="flex h-full w-full flex-col items-center justify-center gap-3 p-[5%]">
      <div className="flex h-full w-full flex-wrap items-center justify-center gap-2 p-2">
        <div className="flex h-full w-[48%] flex-col items-center justify-center gap-1 @md:w-[23%] @lg:w-[40%]">
          <h3>Primary</h3>
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="primary"
            theme={primaryTheme}
          />
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="primary-content"
            theme={primaryContentTheme}
          />
        </div>
        <div className="flex h-full w-[48%] flex-col items-center justify-center gap-1 @md:w-[23%] @lg:w-[40%]">
          <h3>Secondary</h3>
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="secondary"
            theme={secondaryTheme}
          />
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="secondary-content"
            theme={secondaryContentTheme}
          />
        </div>
        <div className="flex h-full w-[48%] flex-col items-center justify-center gap-1 @md:w-[23%] @lg:w-[40%]">
          <h3>Accent</h3>
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="accent"
            theme={accentTheme}
          />
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="accent-content"
            theme={accentContentTheme}
          />
        </div>
        <div className="flex h-full w-[48%] flex-col items-center justify-center gap-1 @md:w-[23%] @lg:w-[40%]">
          <h3>Neutral</h3>
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="neutral"
            theme={neutralTheme}
          />
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="neutral-content"
            theme={neutralContentTheme}
          />
        </div>
      </div>
      <div className="flex w-full flex-col items-center justify-center p-2">
        <h3>Base</h3>
        <div className="flex w-full flex-wrap items-center justify-center gap-2 p-2">
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            className="w-[48%] @md:w-[30%] @lg:w-[24%]"
            theme_key="base-100"
            theme={base100Theme}
          />
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            className="w-[48%] gap-1 @md:w-[23%] @lg:w-[40%]"
            theme_key="base-200"
            theme={base200Theme}
          />
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            className="w-[48%] gap-1 @md:w-[23%] @lg:w-[40%]"
            theme_key="base-300"
            theme={base300Theme}
          />
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            className="w-[48%] gap-1 @md:w-[23%] @lg:w-[40%]"
            theme_key="base-content"
            theme={baseContentTheme}
          />
        </div>
      </div>
      <div className="flex h-full w-full flex-wrap items-center justify-center gap-2 p-2">
        <div className="flex h-full w-[48%] flex-col items-center justify-center gap-1 @md:w-[23%] @lg:w-[40%]">
          <h3>Info</h3>
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="info"
            theme={infoTheme}
          />
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="info-content"
            theme={infoContentTheme}
          />
        </div>
        <div className="flex h-full w-[48%] flex-col items-center justify-center gap-1 @md:w-[23%] @lg:w-[40%]">
          <h3>Success</h3>
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="success"
            theme={successTheme}
          />
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="success-content"
            theme={successContentTheme}
          />
        </div>
        <div className="flex h-full w-[48%] flex-col items-center justify-center gap-1 @md:w-[23%] @lg:w-[40%]">
          <h3>Warning</h3>
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="warning"
            theme={warningTheme}
          />
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="warning-content"
            theme={warningContentTheme}
          />
        </div>
        <div className="flex h-full w-[48%] flex-col items-center justify-center gap-1 @md:w-[23%] @lg:w-[40%]">
          <h3>Error</h3>
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="error"
            theme={errorTheme}
          />
          <GenericColorCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="error-content"
            theme={errorContentTheme}
          />
        </div>
      </div>

      <div className="flex h-full w-full flex-wrap items-center justify-center gap-2 bg-base-200 p-2 @container">
        {/* {curves && (
          <DaisyUIBaseCurvesThemeCard
            theme_group={curves}
          />
        )} */}
        {/* animation */}
        {animationBtn && (
          <GenericThemeCurveCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="--animation-btn"
            row={animationBtn}
          />
        )}
        {animationInput && (
          <GenericThemeCurveCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="--animation-input"
            row={animationInput}
          />
        )}
        {/* rounded */}
        {roundedBox && (
          <GenericThemeCurveCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="--rounded-box"
            row={roundedBox}
          />
        )}
        {roundedBtn && (
          <GenericThemeCurveCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="--rounded-btn"
            row={roundedBtn}
          />
        )}
        {roundedBadge && (
          <GenericThemeCurveCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="--rounded-badge"
            row={roundedBadge}
          />
        )}
        {/* btn */}
        {borderBtn && (
          <GenericThemeCurveCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="--border-btn"
            row={borderBtn}
          />
        )}
        {btnFocusState && (
          <GenericThemeCurveCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="--btn-focus-scale"
            row={btnFocusState}
          />
        )}
        {tabBorder && (
          <GenericThemeCurveCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="--tab-border"
            row={tabBorder}
          />
        )}
        {tabRadius && (
          <GenericThemeCurveCard
            updateTheme={updateThemeCallback}
            updateLockedTheme={updateLockedThemeCallback}
            theme_key="--tab-radius"
            row={tabRadius}
          />
        )}
      </div>
    </div>


  );
}



================================================
FILE: src/components/all-in-one-theme-editor/ExportTheme.tsx
================================================
import { useEffect, useState } from "react";
import { oklchToHexString } from "./utils/color-converters";
import { DaisyUIThemeSearchParmsTypes } from "./utils/schema";
import { Check, Copy } from "lucide-react";

interface ExportThemeProps {
  theme: DaisyUIThemeSearchParmsTypes;
}

export function ExportTheme({ theme }: ExportThemeProps) {
  const [wrapInBraces, setWrapInBraces] = useState(false);
  const colors_to_export = [
    theme?.["--color-scheme"]?.value
      ? `"color-scheme":"${theme?.["--color-scheme"]?.value}"`
      : undefined,
    theme?.primary?.value
      ? `"primary":"${oklchToHexString(theme?.primary?.value)}"`
      : undefined,
    theme?.["primary-content"]?.value
      ? `"primary-content":"${oklchToHexString(theme?.["primary-content"]?.value)}"`
      : undefined,

    theme?.secondary?.value
      ? `"secondary":"${oklchToHexString(theme?.secondary?.value)}"`
      : undefined,

    theme?.["secondary-content"]?.value
      ? `"secondary-content":"${oklchToHexString(theme?.["secondary-content"]?.value)}"`
      : undefined,
    theme?.accent?.value
      ? `"accent":"${oklchToHexString(theme?.accent?.value)}"`
      : undefined,
    theme?.["accent-content"]?.value
      ? `"accent-content":"${oklchToHexString(theme?.["accent-content"]?.value)}"`
      : undefined,
    theme?.neutral?.value
      ? `"neutral":"${oklchToHexString(theme?.neutral?.value)}"`
      : undefined,
    theme?.["neutral-content"]?.value
      ? `"neutral-content":"${oklchToHexString(theme?.["neutral-content"]?.value)}"`
      : undefined,
    theme?.["base-100"]?.value
      ? `"base-100":"${oklchToHexString(theme?.["base-100"]?.value)}"`
      : undefined,
    theme?.["base-200"]?.value
      ? `"base-200":"${oklchToHexString(theme?.["base-200"]?.value)}"`
      : undefined,
    theme?.["base-300"]?.value
      ? `"base-300":"${oklchToHexString(theme?.["base-300"]?.value)}"`
      : undefined,
    theme?.["base-content"]?.value
      ? `"base-content":"${oklchToHexString(theme?.["base-content"]?.value)}"`
      : undefined,
    theme?.["success"]?.value
      ? `"success":"${oklchToHexString(theme?.["success"]?.value)}"`
      : undefined,
    theme?.["error"]?.value
      ? `"error":"${oklchToHexString(theme?.["error"]?.value)}"`
      : undefined,
    theme?.["info"]?.value
      ? `"info":"${oklchToHexString(theme?.["info"]?.value)}"`
      : undefined,
    theme?.["warning"]?.value
      ? `"warning":"${oklchToHexString(theme?.["warning"]?.value)}"`
      : undefined,
    theme?.["--animation-btn"]?.value
      ? `"--animation-btn":"${theme?.["--animation-btn"]?.value}"`
      : undefined,
    theme?.["--animation-input"]?.value
      ? `"--animation-input":"${theme?.["--animation-input"]?.value}"`
      : undefined,

    theme?.["--border-btn"]?.value
      ? `"--border-btn":"${theme?.["--border-btn"]?.value}"`
      : undefined,
    theme?.["--btn-focus-scale"]?.value
      ? `"--btn-focus-scale":"${theme?.["--btn-focus-scale"]?.value}"`
      : undefined,
    theme?.["--rounded-badge"]?.value
      ? `"--rounded-badge":"${theme?.["--rounded-badge"]?.value}"`
      : undefined,
    theme?.["--rounded-box"]?.value
      ? `"--rounded-box":"${theme?.["--rounded-box"]?.value}"`
      : undefined,
    theme?.["--rounded-btn"]?.value
      ? `"--rounded-btn":"${theme?.["--rounded-btn"]?.value}"`
      : undefined,
    theme?.["--tab-border"]?.value
      ? `"--tab-border":"${theme?.["--tab-border"]?.value}"`
      : undefined,
    theme?.["--tab-radius"]?.value
      ? `"--tab-radius":"${theme?.["--tab-radius"]?.value}"`
      : undefined,
  ].filter(Boolean);

  // const exportFormatedTring = `{ \n 'custom_theme': {\n ${colors_to_export.join("',\n")} \n}\n}`;
  // const exportFormatedTring = ` ${colors_to_export.join(",\n")}`;
  function copyToClipboard(text: string) {
    navigator.clipboard.writeText(text);
  }
  const [exportFormatedString, setExportFormatedString] = useState(
    ` ${colors_to_export.join(",\n")}`,
  );
  const [copied, setCopied] = useState(false);
  useEffect(() => {
    if (copied) {
      setTimeout(() => {
        setCopied(false);
      }, 2000);
    }
  }, [copied]);
  const copied_styles = copied ? "animate-bounce text-success" : "";
  return (
    <div className="flex h-full w-full flex-col items-center justify-center gap-3">
      <div className="flex items-center justify-center gap-3">
        <button className="flex items-center justify-center pt-2">
          <Copy
            className={`h-6 w-6 ${copied_styles}`}
            onClick={() => {
              setCopied(true);
              copyToClipboard(exportFormatedString);
            }}
          />
          <div className="ml-2">
            {copied ? (
              <div className="flex items-center justify-center gap-1 rounded-lg text-success">
                Copied <Check className="h-6 w-6" />
              </div>
            ) : (
              "Copy"
            )}
          </div>
        </button>
        <label className="label flex gap-2" htmlFor="wrapInBraces">
          <input
            name="wrapInBraces"
            type="checkbox"
            className="checkbox-primary checkbox border-4 border-accent"
            checked={wrapInBraces}
            onChange={(e) => {
              setWrapInBraces(e.target.checked);
              if (e.target.checked) {
                setExportFormatedString(
                  `{ \n "custom_theme": {\n ${colors_to_export.join(",\n")} \n}\n}`,
                );
              } else {
                setExportFormatedString(` ${colors_to_export.join(",\n")}`);
              }
            }}
          />
          Wrap in braces
        </label>
      </div>
      <pre className="bg-base-300 p-5">
        <code>{exportFormatedString}</code>
      </pre>
    </div>
  );
}



================================================
FILE: src/components/all-in-one-theme-editor/GenericThemeCard.tsx
================================================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { useState, useTransition, memo, useMemo, useCallback } from "react";
import {
  DaisyUIColorSearchParmsTypes,
  DaisyUICurvesSearchParmsTypes,
} from "./utils/schema";
import { twMerge } from "tailwind-merge";
import { ColorpickerModal } from "./ColorpickerModal";
import {
  BaseDaisyUiThemeKeys,
  getTailwindBg,
} from "./utils/daisyui-css-variables-helpers";
import { GenericThemeState } from "./utils/types";
import { Lock, Unlock } from "lucide-react";


export type BGandContentObject<T extends BaseDaisyUiThemeKeys> = {
  [key in T]: GenericThemeState;
};

type BaseDaisyUiThemeKeysWithoutBase = keyof DaisyUIColorSearchParmsTypes;

interface GenericColorCardProps<T extends BaseDaisyUiThemeKeysWithoutBase> {
  // theme: DaisyUIThemeSearchParmsTypes["accent"];
  theme_key: T;
  theme: DaisyUIColorSearchParmsTypes[T];
  className?: string;
  updateTheme: (items_key: string, new_items: string) => void;
  updateLockedTheme: (items_key: string, is_locked: boolean) => void;
}

export const GenericColorCard = memo(
  <T extends BaseDaisyUiThemeKeysWithoutBase>({
    theme_key,
    theme,
    className,
    updateTheme,
    updateLockedTheme
  }: GenericColorCardProps<T>) => {


    const { bg, content } = useMemo(
      () => getTailwindBg(theme?.name),
      [theme?.name],
    );
    const handleLockClick = useCallback(
      () => updateLockedTheme(theme_key, true),
      [theme_key, updateLockedTheme],
    );
    const handleUnlockClick = useCallback(
      () => updateLockedTheme(theme_key, false),
      [theme_key, updateLockedTheme],
    );
    const updateThemeCallback = useCallback((items_key: string, new_items: string) => {
        updateTheme(items_key, new_items);
      },
      [updateTheme]
      
    )
    return (
      <div
        className={twMerge(
          "relative flex h-full w-full cursor-pointer flex-col items-center justify-center gap-1 hover:scale-110 hover:animate-in",
          className,
        )}
      >
        <div
          className={
            "flex h-full w-full flex-col items-center justify-center gap-2"
          }
        >
          <ColorpickerModal updateTheme={updateThemeCallback} key={theme_key} theme={theme} theme_key={theme_key} bg_color={bg}>
            <div
              className={twMerge(
                "flex w-full flex-col items-center justify-between gap-0.5 rounded-lg p-1 text-sm",
                bg,
                content,
              )}
            >
              <div className="line-clamp-1 text-sm">{theme?.name}</div>
              <div className="line-clamp-1 text-[9px]">{theme?.value}</div>
            </div>
          </ColorpickerModal>
        </div>
        <div
          className={twMerge(
            `absolute right-[1%] top-[5%] flex flex-col items-center justify-center gap-2`,
          )}
        >
          {theme?.locked ? (
            <div className="rounded-lg bg-error-content p-1">
              <Lock className="size-3 text-error" onClick={handleUnlockClick} />
            </div>
          ) : (
            <div className="rounded-lg bg-error-content p-1">
              <Unlock
                className="size-3 bg-success-content text-success"
                onClick={handleLockClick}
              />
            </div>
          )}
        </div>
      </div>
    );
  },
);

type ThemeCurves = DaisyUICurvesSearchParmsTypes;
type ThemeCurveKeys = ThemeCurves extends undefined ? never : keyof ThemeCurves;



interface GenericThemeCurveCardProps {
  theme_key: ThemeCurveKeys;
  row: GenericThemeState;
  updateTheme: (items_key: string, new_items: string) => void;
  updateLockedTheme: (items_key: string, is_locked: boolean) => void;
}

export const GenericThemeCurveCard = memo(
  ({ theme_key, row,updateTheme,updateLockedTheme }: GenericThemeCurveCardProps) => {


    const updateChages = useCallback(
      (new_items: string) => updateTheme(theme_key, new_items),
      [updateTheme, theme_key],
    );

    const handleLockClick = useCallback(
      () => updateLockedTheme(theme_key, true),
      [theme_key, updateLockedTheme],
    );
    const handleUnlockClick = useCallback(
      () => updateLockedTheme(theme_key, false),
      [theme_key, updateLockedTheme],
    );

    const [input, setInput] = useState(row?.value);
    const [, startTransition] = useTransition();
    const handleUpdateCurves = useCallback(
      (e: React.ChangeEvent<HTMLInputElement>) => {
        setInput(e.target.value);
        startTransition(() => {
          updateChages(e.target.value);
        });
      },
      [updateChages],
    );
    return (
      <div className="flex w-[48%] flex-col rounded-lg @md:w-1/3 @lg:w-[24%]">
        <h2 className="text-sm font-bold">{theme_key.replace(/_/g, " ")}</h2>
        <div className="flex gap-1">
          <input
            className="input input-sm flex w-full flex-col justify-center rounded-lg"
            value={input}
            onChange={handleUpdateCurves}
          />
          <div
            className={twMerge(
              `right-[1%] flex flex-col items-center justify-center gap-2`,
            )}
          >
            {row?.locked ? (
              <div className="rounded-lg bg-error-content p-1">
                <Lock
                  className="size-4 text-error"
                  onClick={handleUnlockClick}
                />
              </div>
            ) : (
              <div className="rounded-lg bg-error-content p-1">
                <Unlock
                  className="size-4 bg-success-content text-success"
                  onClick={handleLockClick}
                />
              </div>
            )}
          </div>
        </div>
      </div>
    );
  },
);



================================================
FILE: src/components/all-in-one-theme-editor/ImprtTheme.tsx
================================================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { useState } from "react";
import { DaisyUIThemeSearchParmsTypes } from "./utils/schema";
import { importThemes } from "./utils/theme-default-values";

interface ImportThemeProps {
  theme: DaisyUIThemeSearchParmsTypes;
  updateWholeTheme: (theme: Record<string, string>) => void;
}

export function ImportTheme({ updateWholeTheme }: ImportThemeProps) {
  const samplePlaceholder = `
        "primary": "#ffd900",
        "primary-content": "#4c4528",
        "secondary": "#ffa400",
        "secondary-content": "#5d3f18",
        "accent": "#ffa551",
        "accent-content": "#180a02",
        "neutral": "#060023",
        "neutral-content": "#c4c5d0",
        "base-100": "#ffffff",
        "base-200": "#e8e8e8",
        "base-300": "#d1d1d1",
        "base-content": "#291334",
        "success": "#00a96e",
        "error": "#ff5861",
        "info": "#00b5ff",
        "warning": "#ffbe00",
        "--animation-btn": "0.25s",
        "--animation-input": ".2s",
        "--border-btn": "1px",
        "--btn-focus-scale": "0.95",
        "--rounded-badge": "1.9rem",
        "--rounded-box": "1rem",
        "--rounded-btn": "1.9rem",
        "--tab-border": "2px",
        "--tab-radius": "0.7rem"
  `;
  const [input, setInput] = useState("");

  return (
    <div className="flex h-screen w-full flex-col justify-center gap-2 md:items-center">
      <textarea
        placeholder={samplePlaceholder}
        className="textarea textarea-bordered h-[80%] min-h-[70vh] w-full p-6"
        value={input}
        onChange={(e) => setInput(e.target.value)}
      />
      <button
        onClick={() => {
          const imported_theme = importThemes(input);
          if (imported_theme) {
            updateWholeTheme(imported_theme as any);
          }
        }}
        className="btn btn-primary btn-sm btn-wide p-1"
      >
        import
      </button>
    </div>
  );
}



================================================
FILE: src/components/all-in-one-theme-editor/ReactColorPicker.tsx
================================================
import { oklchToHSL, reactColorHSLToOKLCH } from "./utils/color-converters";
import { useState } from "react";
import {
  ColorResult,
  HSLColor,
  SketchPicker,
  SliderPicker,
  SwatchesPicker,
} from "react-color";


interface ReactColorPickerProps {
  oklchString: string; // oklch color string to be coverted into hsl from the editor
  colorKey: string; // css variable key ;
  themeName: string;
  updateTheme: (items_key: string, new_items: string) => void;
}

export function ReactColorPicker({
  oklchString,
  colorKey,
  themeName,
  updateTheme
}: ReactColorPickerProps) {

  const [color, setColor] = useState<HSLColor>(oklchToHSL(oklchString));
  const oklch_string = reactColorHSLToOKLCH(color);
  const [oklch, setOklch] = useState(oklch_string);

  function handleChange(new_color: ColorResult) {
    setColor(new_color.hsl);
    const oklch_string = reactColorHSLToOKLCH(new_color.hsl);
    if (!oklch_string) return;
    setOklch(oklch_string);
    updateTheme(colorKey, oklch_string);
  }
  return (
    <div className="flex h-full w-full flex-col items-center justify-center">
      <div className="flex w-full flex-col items-center justify-center bg-base-100 rounded-lg">
        <h3 className="text-lg font-bold">{themeName}</h3>
        {oklch && (
          <span className="rounded-lg p-1 px-2 text-base-content">{`oklch${oklch})`}</span>
        )}
      </div>
      <div className="flex max-h-[70vh] w-full items-center justify-center gap-2 overflow-y-scroll rounded p-2">
        <SketchPicker color={color} onChange={handleChange} />
        <div className="hidden md:flex">
          <SwatchesPicker color={color} onChange={handleChange} />
        </div>
      </div>
      <div className="w-full">
        <SliderPicker color={color} onChange={handleChange} />
      </div>
    </div>
  );
}



================================================
FILE: src/components/all-in-one-theme-editor/state/tsr.ts
================================================
import { useNavigate, useSearch } from "@tanstack/react-router";
import { GenericThemeState } from "../utils/types";

export function useUpdateTheme() {
  const navigate = useNavigate();
  const searchParams = useSearch({
    from: "__root__",
  });
  const updateTheme = (newTheme: Record<string, GenericThemeState>) => {
    navigate({
      search: {
        ...searchParams,
        ...newTheme,
      },
    });
  };
  return { updateTheme, searchParams, navigate };
}



================================================
FILE: src/components/all-in-one-theme-editor/utils/color-converters.ts
================================================
/* eslint-disable @typescript-eslint/no-explicit-any */
import chroma from "chroma-js";
import { HSLColor } from "react-color";

/**
 * Converts an OKLCH color to a hexadecimal color string.
 *
 * @param {string} input - The OKLCH color to convert, optionally wrapped in 'oklch()'.
 * @return {string} The hexadecimal color string, or '#000000' if the conversion fails.
 */
export function oklchToHexString(input: string) {
  try {
    if (!input.startsWith("oklch(")) {
      input = `oklch(${input})`;
    }
    // console.log(" parsing oklch", input);
    return chroma(input).hex();
  } catch (error: any) {
    console.error(
      " ⚠️ ====  oklch parse error in oklchToHexString ====⚠️",
      error.message,
    );
    return "#000000";
  }
}

/**
 * Converts an OKLCH color slice to a string representation.
 *
 * @param {number[]} oklchSlice - The OKLCH color slice to convert, in the format [lightness, chroma, hue].
 * @param {boolean} [wrapWithoklch=false] - Whether to wrap the resulting string in 'oklch()'.
 * @return {string} The string representation of the OKLCH color slice in the format 'lightness% chroma, hue optionally wrapped in 'oklch()'.
 */
function oklchSliceToString(
  oklchSlice: [number, number, number],
  wrapWithoklch = false,
) {
  const l = Number.isNaN(oklchSlice[0])
    ? 0.5
    : (oklchSlice[0] * 100).toFixed(2);
  const c = Number.isNaN(oklchSlice[1]) ? 0.5 : oklchSlice[1].toFixed(2);
  const h = Number.isNaN(oklchSlice[2]) ? 0.5 : oklchSlice[2].toFixed(2);
  const oklchSTring = `${l}% ${c} ${h}`;
  if (wrapWithoklch) return `oklch(${oklchSTring})`;
  return oklchSTring;
}

export function hexToOklch(input: string) {
  // if(input.startsWith("#")) input = input.slice(1)
  try {
    const oklch_slice = chroma(input).oklch();
    console.log(" parsing oklch", oklch_slice);
    return oklchSliceToString(oklch_slice);
  } catch (error: any) {
    console.error(
      " ⚠️ ====  oklch parse error in hexToOklch ====⚠️",
      error.message,
    );
    return oklchSliceToString([0.5, 0.5, 0.5]);
  }
}

/**
 * Converts an OKLCH color to an HSL color object.
 *
 * @param {string} oklch - The OKLCH color to convert.
 * @return {HSLColor} The HSL color object, or a default HSL color if the conversion fails.
 */
export function oklchToHSL(oklch: string): HSLColor {
  try {
    if (!oklch || oklch === "") return { h: 0, s: 0, l: 0 };
    if (!oklch.startsWith("oklch(")) {
      oklch = `oklch(${oklch})`;
    }

    const hsl_slice = chroma(oklch).hsl();
    return {
      h: hsl_slice[0],
      s: hsl_slice[1],
      l: hsl_slice[2],
    };
  } catch (error: any) {
    console.error(
      " ⚠️ ====  oklch parse error in oklchToHSL ====",
      error.message,
    );
    return {
      h: 0,
      s: 0,
      l: 0,
    };
  }
}

/**
 * Converts an HSL color to an OKLCH color string.
 *
 * @param {{ h: number, s: number, l: number, a?: number }} hsl - The HSL color to convert.
 * @return {string} The OKLCH color string, or a default value if the conversion fails.
 *
 * @example
 * reactColorHSLToOKLCH({h: 0, s: 0, l: 0})
 */
export function reactColorHSLToOKLCH(hsl: HSLColor) {
  try {
    if (Number.isNaN(hsl.h)) [(hsl.h = 0)];
    if (Number.isNaN(hsl.s)) [(hsl.s = 0)];
    if (Number.isNaN(hsl.l)) [(hsl.l = 0)];
    const hsl_string = `hsl(${hsl.h.toFixed(0)}, ${(hsl.s * 100).toFixed(0)}%, ${(hsl.l * 100).toFixed(0)}%)`;
    const oklch_slice = chroma(hsl_string).oklch();
    if (Number.isNaN(oklch_slice[0])) {
      return;
    }
    if (Number.isNaN(oklch_slice[1])) {
      return;
    }
    if (Number.isNaN(oklch_slice[2])) {
      return;
    }
    return `${(oklch_slice[0] * 100).toFixed(2)}% ${oklch_slice[1].toFixed(2)} ${oklch_slice[2].toFixed(2)}`;
  } catch (error: any) {
    console.log(
      " =========  reactColorHSLToOKLCH convert hsl to oklch issue ============ ",
      error.message,
    );
    return "0.5 0.5 0.5";
  }
}



================================================
FILE: src/components/all-in-one-theme-editor/utils/daisyui-css-variables-helpers.ts
================================================
import { DaisyUIThemeSearchParmsTypes } from "./schema";

export const getColorValueFromTheme = (variable: string) => {
  const colorValues = getComputedStyle(
    document.documentElement,
  ).getPropertyValue(variable);
  return colorValues;
};

export const getThemeVariable = (variable: string) => {
  const colorValues = getComputedStyle(
    document.documentElement,
  ).getPropertyValue(variable);

  return colorValues;
};

type InlineCSSVaraiblesTheme = Omit<DaisyUIThemeSearchParmsTypes, "theme_name">;
type InlineCSSVaraiblesThemeVAriable =
  Required<InlineCSSVaraiblesTheme>[keyof InlineCSSVaraiblesTheme]["variable"];
type InlineCSSVaraibles = {
  [key in InlineCSSVaraiblesThemeVAriable]?: string;
} & {
  colorScheme?: string;
};
export function getDaisyUiInlineCSSVariables(
  theme: DaisyUIThemeSearchParmsTypes,
): InlineCSSVaraibles {
  return {
    colorScheme: theme["--color-scheme"]?.value,
    "--p": theme.primary?.value,
    "--pc": theme["primary-content"]?.value,
    "--s": theme.secondary?.value,
    "--sc": theme["secondary-content"]?.value,
    "--a": theme.accent?.value,
    "--ac": theme["accent-content"]?.value,
    "--n": theme.neutral?.value,
    "--nc": theme["neutral-content"]?.value,
    "--b1": theme["base-100"]?.value,
    "--b2": theme["base-200"]?.value,
    "--b3": theme["base-300"]?.value,
    "--bc": theme["base-content"]?.value,
    "--wa": theme.warning?.value,
    "--wac": theme["warning-content"]?.value,
    "--er": theme.error?.value,
    "--erc": theme["error-content"]?.value,
    "--in": theme.info?.value,
    "--inc": theme["info-content"]?.value,
    "--su": theme.success?.value,
    "--suc": theme["success-content"]?.value,
    "--animation-btn": theme["--animation-btn"]?.value,
    "--animation-input": theme["--animation-input"]?.value,
    "--border-btn": theme["--border-btn"]?.value,
    "--btn-focus-scale": theme["--btn-focus-scale"]?.value,
    "--rounded-badge": theme["--rounded-badge"]?.value,
    "--rounded-btn": theme["--rounded-btn"]?.value,
    "--rounded-box": theme["--rounded-box"]?.value,
    "--tab-radius": theme["--tab-radius"]?.value,
  };
}

export function getDaisyUiColors() {
  return [
    // primary
    {
      name: "primary",
      variable: "--p",
      value: getColorValueFromTheme("--p"),
    },
    {
      name: "primary-content",
      variable: "--pc",
      value: getColorValueFromTheme("--pc"),
    },
    // secondary
    {
      name: "secondary",
      variable: "--s",
      value: getColorValueFromTheme("--s"),
    },
    {
      name: "secondary-content",
      variable: "--sc",
      value: getColorValueFromTheme("--sc"),
    },
    // accent
    {
      name: "accent",
      variable: "--a",
      value: getColorValueFromTheme("--a"),
    },
    {
      name: "accent-content",
      variable: "--ac",
      value: getColorValueFromTheme("--ac"),
    },
    // neutral
    {
      name: "neutral",
      variable: "--n",
      value: getColorValueFromTheme("--n"),
    },
    {
      name: "neutral-content",
      variable: "--nc",
      value: getColorValueFromTheme("--nc"),
    },
    // base
    {
      name: "base-100",
      variable: "--b1",
      value: getColorValueFromTheme("--b1"),
    },
    {
      name: "base-200",
      variable: "--b2",
      value: getColorValueFromTheme("--b2"),
    },
    {
      name: "base-300",
      variable: "--b3",
      value: getColorValueFromTheme("--b3"),
    },
    {
      name: "base-content",
      variable: "--bc",
      value: getColorValueFromTheme("--bc"),
    },
    // info
    {
      name: "info",
      variable: "--in",
      value: getColorValueFromTheme("--in"),
    },
    {
      name: "info-content",
      variable: "--inc",
      value: getColorValueFromTheme("--inc"),
    },

    // success
    {
      name: "success",
      variable: "--su",
      value: getColorValueFromTheme("--su"),
    },
    {
      name: "success-content",
      variable: "--suc",
      value: getColorValueFromTheme("--suc"),
    },

    // warning
    {
      name: "warning",
      variable: "--wa",
      value: getColorValueFromTheme("--wa"),
    },
    {
      name: "warning-content",
      variable: "--wac",
      value: getColorValueFromTheme("--wac"),
    },

    // error
    {
      name: "error",
      variable: "--er",
      value: getColorValueFromTheme("--er"),
    },
    {
      name: "error-content",
      variable: "--erc",
      value: getColorValueFromTheme("--erc"),
    },
  ] as const;
}

export const daisyUiColors = getDaisyUiColors();

export const getTailwindBg = (
  color?: (typeof daisyUiColors)[number]["name"],
): {
  bg: string;
  bg_muted: string;
  content: string;
} => {
  switch (color) {
    // primary
    case "primary":
      return {
        bg: "bg-primary",
        bg_muted: "bg-primary/20",
        content: "text-primary-content",
      };
    case "primary-content":
      return {
        bg: "bg-primary-content",
        bg_muted: "bg-primary-content/20",
        content: "text-primary",
      };

    // secondary
    case "secondary":
      return {
        bg: "bg-secondary",
        bg_muted: "bg-secondary/20",
        content: "text-secondary-content",
      };
    case "secondary-content":
      return {
        bg: "bg-secondary-content",
        bg_muted: "bg-secondary-content/20",
        content: "text-secondary",
      };

    // accent
    case "accent":
      return {
        bg: "bg-accent",
        bg_muted: "bg-accent/20",
        content: "text-accent-content",
      };
    case "accent-content":
      return {
        bg: "bg-accent-content",
        bg_muted: "bg-accent-content/20",
        content: "text-accent",
      };

    // neutral
    case "neutral":
      return {
        bg: "bg-neutral",
        bg_muted: "bg-neutral/20",
        content: "text-neutral-content",
      };
    case "neutral-content":
      return {
        bg: "bg-neutral-content",
        bg_muted: "bg-neutral-content/20",
        content: "text-neutral",
      };

    // base
    case "base-100":
      return {
        bg: "bg-base-100",
        bg_muted: "bg-base-100/20",
        content: "text-base-content",
      };
    case "base-200":
      return {
        bg: "bg-base-200",
        bg_muted: "bg-base-200/20",
        content: "text-base-content",
      };
    case "base-300":
      return {
        bg: "bg-base-300",
        bg_muted: "bg-base-300/20",
        content: "text-base-content",
      };
    case "base-content":
      return {
        bg: "bg-base-content",
        bg_muted: "bg-base-content/20",
        content: "text-base-100",
      };
    // info
    case "info":
      return {
        bg: "bg-info",
        bg_muted: "bg-info/20",
        content: "text-info-content",
      };
    case "info-content":
      return {
        bg: "bg-info-content",
        bg_muted: "bg-info-content/20",
        content: "text-info",
      };

    // success
    case "success":
      return {
        bg: "bg-success",
        bg_muted: "bg-success/20",
        content: "text-success-content",
      };
    case "success-content":
      return {
        bg: "bg-success-content",
        bg_muted: "bg-success-content/20",
        content: "text-success",
      };

    // warning
    case "warning":
      return {
        bg: "bg-warning",
        bg_muted: "bg-warning/20",
        content: "text-warning-content",
      };
    case "warning-content":
      return {
        bg: "bg-warning-content",
        bg_muted: "bg-warning-content/20",
        content: "text-warning",
      };

    // error
    case "error":
      return {
        bg: "bg-error",
        bg_muted: "bg-error/20",
        content: "text-error-content",
      };
    case "error-content":
      return {
        bg: "bg-error-content",
        bg_muted: "bg-error-content/20",
        content: "text-error",
      };

    default:
      return {
        bg: "bg-base-100",
        bg_muted: "bg-base-100/20",
        content: "text-base-content",
      };
  }
};

export type DaisyUIDefaulltColors = (typeof daisyUiColors)[number];

export const base_daisyui_theme_names = [
  "primary",
  "secondary",
  "accent",
  "neutral",
  "base",
  "info",
  "success",
  "warning",
  "error",
] as const;

export type BaseDaisyUiThemeKeys = (typeof base_daisyui_theme_names)[number];



================================================
FILE: src/components/all-in-one-theme-editor/utils/default-daisyui-oklch.ts
================================================
export const formatedAllThemeDefaults = {
  aqua: {
    "color-scheme": "dark",
    primary: "85.660% 0.1450 198.6330",
    "primary-content": "40.124% 0.0683 197.5912",
    secondary: "60.683% 0.1087 309.7982",
    accent: "93.428% 0.1022 94.5454",
    neutral: "61.061% 0.1170 243.7535",
    "base-100": "48.758% 0.1275 261.1804",
    info: "54.613% 0.2152 262.8802",
    success: "62.705% 0.1699 149.2119",
    warning: "66.586% 0.1574 58.3130",
    error: "73.95% 0.19 27.33",
  },
  black: {
    "color-scheme": "dark",
    primary: "33.680% 0.0000 NaN",
    secondary: "33.680% 0.0000 NaN",
    accent: "33.680% 0.0000 NaN",
    "base-100": "0.000% 0.0000 NaN",
    "base-200": "19.125% 0.0000 NaN",
    "base-300": "26.862% 0.0000 NaN",
    "base-content": "87.610% 0.0000 NaN",
    neutral: "33.680% 0.0000 NaN",
    info: "45.198% 0.3132 264.0520",
    success: "51.975% 0.1769 142.4953",
    warning: "96.799% 0.2110 109.7633",
    error: "62.799% 0.2577 29.2339",
    "--rounded-box": "0",
    "--rounded-btn": "0",
    "--rounded-badge": "0",
    "--animation-btn": "0",
    "--animation-input": "0",
    "--btn-focus-scale": "1",
    "--tab-radius": "0",
  },
  bumblebee: {
    "color-scheme": "light",
    primary: "89.51% 0.2132 96.61",
    "primary-content": "38.92% 0.046 96.61",
    secondary: "80.39% 0.194 70.76",
    "secondary-content": "39.38% 0.068 70.76",
    accent: "81.27% 0.157 56.52",
    neutral: "12.75% 0.075 281.99",
    "base-100": "100% 0 0",
  },
  cmyk: {
    "color-scheme": "light",
    primary: "71.771% 0.1333 239.4348",
    secondary: "64.479% 0.2028 359.3485",
    accent: "94.230% 0.1897 105.3002",
    neutral: "21.779% 0.0000 NaN",
    "base-100": "100% 0 0",
    info: "68.475% 0.0945 217.2697",
    success: "46.949% 0.1625 321.4174",
    warning: "71.238% 0.1599 52.0199",
    error: "62.016% 0.2084 28.7189",
  },
  corporate: {
    "color-scheme": "light",
    primary: "60.39% 0.228 269.1",
    secondary: "65.369% 0.0547 256.6860",
    accent: "76.966% 0.1140 163.5687",
    neutral: "22.390% 0.0313 278.0793",
    "neutral-content": "95.880% 0.0086 247.8899",
    "base-100": "100% 0 0",
    "base-content": "22.390% 0.0313 278.0793",
    "--rounded-box": "0.25rem",
    "--rounded-btn": ".125rem",
    "--rounded-badge": ".125rem",
    "--tab-radius": "0.25rem",
    "--animation-btn": "0",
    "--animation-input": "0",
    "--btn-focus-scale": "1",
  },
  cupcake: {
    "color-scheme": "light",
    primary: "76.171% 0.0895 200.0093",
    secondary: "78.936% 0.1013 356.3193",
    accent: "79.383% 0.1460 78.6114",
    neutral: "23.574% 0.0662 313.2016",
    "base-100": "97.788% 0.0042 56.5130",
    "base-200": "93.982% 0.0077 61.4957",
    "base-300": "91.586% 0.0068 53.5319",
    "base-content": "23.574% 0.0662 313.2016",
    "--rounded-btn": "1.9rem",
    "--tab-border": "2px",
    "--tab-radius": "0.7rem",
  },
  cyberpunk: {
    "color-scheme": "light",
    fontFamily:
      "ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace",
    primary: "74.22% 0.209 6.35",
    secondary: "83.33% 0.184 204.72",
    accent: "71.86% 0.2176 310.43",
    neutral: "23.04% 0.065 269.31",
    "neutral-content": "94.51% 0.179 104.32",
    "base-100": "94.51% 0.179 104.32",
    "--rounded-box": "0",
    "--rounded-btn": "0",
    "--rounded-badge": "0",
    "--tab-radius": "0",
  },
  dark: {
    "color-scheme": "dark",
    primary: "65.69% 0.196 275.75",
    secondary: "74.8% 0.26 342.55",
    accent: "74.51% 0.167 183.61",
    neutral: "31.381% 0.0211 254.1357",
    "neutral-content": "74.648% 0.0216 264.4488",
    "base-100": "25.327% 0.0159 252.4129",
    "base-200": "23.261% 0.0138 253.0965",
    "base-300": "21.148% 0.0116 254.0846",
    "base-content": "74.648% 0.0216 264.4488",
  },
  dracula: {
    "color-scheme": "dark",
    primary: "75.462% 0.1831 346.8255",
    secondary: "74.202% 0.1485 301.8957",
    accent: "83.394% 0.1242 66.5534",
    neutral: "39.445% 0.0326 275.5339",
    "base-100": "28.823% 0.0221 277.5205",
    "base-content": "97.748% 0.0079 106.3927",
    info: "88.262% 0.0934 212.8287",
    success: "87.099% 0.2195 148.0224",
    warning: "95.534% 0.1343 112.7482",
    error: "68.223% 0.2063 24.4343",
  },
  emerald: {
    "color-scheme": "light",
    primary: "76.662% 0.1354 153.4434",
    "primary-content": "33.387% 0.0406 162.2268",
    secondary: "61.301% 0.2023 261.2930",
    "secondary-content": "100.000% 0.0000 NaN",
    accent: "72.774% 0.1498 33.2033",
    "accent-content": "0.000% 0.0000 NaN",
    neutral: "35.519% 0.0321 262.9901",
    "neutral-content": "98.463% 0.0017 247.7268",
    "base-100": "100% 0 0",
    "base-content": "35.519% 0.0321 262.9901",
    "--animation-btn": "0",
    "--animation-input": "0",
    "--btn-focus-scale": "1",
  },
  fantasy: {
    "color-scheme": "light",
    primary: "37.45% 0.189 325.02",
    secondary: "53.92% 0.162 241.36",
    accent: "75.98% 0.204 56.72",
    neutral: "27.808% 0.0296 256.8457",
    "base-100": "100% 0 0",
    "base-content": "27.808% 0.0296 256.8457",
  },
  forest: {
    "color-scheme": "dark",
    primary: "68.628% 0.1856 148.9570",
    "primary-content": "0.000% 0.0000 NaN",
    secondary: "69.776% 0.1354 168.3199",
    accent: "70.627% 0.1195 185.7018",
    neutral: "30.698% 0.0390 171.3510",
    "base-100": "18.841% 0.0083 17.9515",
    "--rounded-btn": "1.9rem",
  },
  garden: {
    "color-scheme": "light",
    primary: "62.45% 0.278 3.8363600743192197",
    "primary-content": "100.000% 0.0000 NaN",
    secondary: "48.496% 0.1110 355.1085",
    accent: "56.273% 0.0543 154.3729",
    neutral: "24.156% 0.0494 89.0628",
    "neutral-content": "92.952% 0.0022 17.9741",
    "base-100": "92.952% 0.0022 17.9741",
    "base-content": "16.962% 0.0017 17.5050",
  },
  halloween: {
    "color-scheme": "dark",
    primary: "77.48% 0.204 60.62",
    "primary-content": "19.694% 0.0047 196.7006",
    secondary: "45.98% 0.248 305.03",
    accent: "64.8% 0.223 136.07347934356451",
    "accent-content": "0.000% 0.0000 NaN",
    neutral: "24.372% 0.0466 65.6757",
    "base-100": "24.776% 0.0000 NaN",
    info: "54.613% 0.2152 262.8802",
    success: "62.705% 0.1699 149.2119",
    warning: "66.586% 0.1574 58.3130",
    error: "65.72% 0.199 27.33",
  },
  light: {
    "color-scheme": "light",
    primary: "49.12% 0.3096 275.75",
    secondary: "69.71% 0.329 342.55",
    "secondary-content": "98.71% 0.0106 342.55",
    accent: "76.76% 0.184 183.61",
    neutral: "32.178% 0.0247 255.6991",
    "neutral-content": "89.499% 0.0115 252.0900",
    "base-100": "100% 0 0",
    "base-200": "96.115% 0.0000 NaN",
    "base-300": "92.417% 0.0011 195.5414",
    "base-content": "27.808% 0.0296 256.8457",
  },
  lofi: {
    "color-scheme": "light",
    primary: "15.907% 0.0000 NaN",
    "primary-content": "100% 0 0",
    secondary: "21.455% 0.0016 17.5270",
    "secondary-content": "100% 0 0",
    accent: "26.862% 0.0000 NaN",
    "accent-content": "100% 0 0",
    neutral: "0.000% 0.0000 NaN",
    "neutral-content": "100% 0 0",
    "base-100": "100% 0 0",
    "base-200": "96.115% 0.0000 NaN",
    "base-300": "92.268% 0.0011 18.7071",
    "base-content": "0.000% 0.0000 NaN",
    info: "79.54% 0.103 205.9",
    success: "90.13% 0.153 164.14",
    warning: "88.37% 0.135 79.94",
    error: "78.66% 0.15 28.47",
    "--rounded-box": "0.25rem",
    "--rounded-btn": "0.125rem",
    "--rounded-badge": "0.125rem",
    "--tab-radius": "0.125rem",
    "--animation-btn": "0",
    "--animation-input": "0",
    "--btn-focus-scale": "1",
  },
  luxury: {
    "color-scheme": "dark",
    primary: "100% 0 0",
    secondary: "27.581% 0.0641 261.0679",
    accent: "36.675% 0.0517 338.8465",
    neutral: "24.271% 0.0570 59.8194",
    "neutral-content": "93.204% 0.0897 90.8514",
    "base-100": "14.077% 0.0044 285.8630",
    "base-200": "20.219% 0.0042 308.3221",
    "base-300": "29.896% 0.0038 308.4673",
    "base-content": "75.689% 0.1237 76.8834",
    info: "79.060% 0.1217 237.1242",
    success: "78.120% 0.1929 132.1515",
    warning: "86.128% 0.1365 102.8830",
    error: "71.755% 0.1764 22.5741",
  },
  pastel: {
    "color-scheme": "light",
    primary: "83.083% 0.0349 316.9267",
    secondary: "88.077% 0.0492 8.7246",
    accent: "89.209% 0.0603 170.8943",
    neutral: "71.340% 0.0735 228.1692",
    "base-100": "100% 0 0",
    "base-200": "98.463% 0.0017 247.7268",
    "base-300": "87.168% 0.0093 258.3552",
    "--rounded-btn": "1.9rem",
    "--tab-radius": "0.7rem",
  },
  retro: {
    "color-scheme": "light",
    primary: "76.868% 0.1041 22.6753",
    "primary-content": "26.510% 0.0062 0.6146",
    secondary: "80.741% 0.0525 159.0656",
    "secondary-content": "26.510% 0.0062 0.6146",
    accent: "70.393% 0.1255 52.9510",
    "accent-content": "26.510% 0.0062 0.6146",
    neutral: "28.418% 0.0095 355.6015",
    "neutral-content": "92.561% 0.0251 89.1911",
    "base-100": "91.638% 0.0346 90.4950",
    "base-200": "88.273% 0.0494 91.7588",
    "base-300": "84.134% 0.0660 90.8449",
    "base-content": "26.510% 0.0062 0.6146",
    info: "54.613% 0.2152 262.8802",
    success: "62.705% 0.1699 149.2119",
    warning: "66.586% 0.1574 58.3130",
    error: "65.72% 0.199 27.33",
    "--rounded-box": "0.4rem",
    "--rounded-btn": "0.4rem",
    "--rounded-badge": "0.4rem",
    "--tab-radius": "0.4rem",
  },
  synthwave: {
    "color-scheme": "dark",
    primary: "72.212% 0.1595 342.0239",
    secondary: "78.270% 0.1181 227.3702",
    accent: "88.04% 0.206 93.72",
    neutral: "25.555% 0.1035 286.5143",
    "neutral-content": "97.937% 0.0082 301.5627",
    "base-100": "21.821% 0.0819 287.8423",
    "base-content": "97.937% 0.0082 301.5627",
    info: "76.518% 0.1227 231.8207",
    "info-content": "23.501% 0.0964 290.3370",
    success: "86.056% 0.1150 178.6109",
    "success-content": "23.501% 0.0964 290.3370",
    warning: "85.532% 0.1221 93.7137",
    "warning-content": "23.501% 0.0964 290.3370",
    error: "73.702% 0.1214 32.6442",
    "error-content": "23.501% 0.0964 290.3370",
  },
  valentine: {
    "color-scheme": "light",
    primary: "68.622% 0.1538 15.0746",
    secondary: "71.970% 0.1463 293.1999",
    accent: "71.268% 0.0748 197.8098",
    neutral: "54.607% 0.1434 358.0156",
    "neutral-content": "90.270% 0.0372 337.0140",
    "base-100": "94.685% 0.0267 337.1465",
    "base-content": "37.309% 0.0811 4.6175",
    info: "54.613% 0.2152 262.8802",
    success: "62.705% 0.1699 149.2119",
    warning: "66.586% 0.1574 58.3130",
    error: "73.07% 0.207 27.33",
    "--rounded-btn": "1.9rem",
    "--tab-radius": "0.7rem",
  },
  wireframe: {
    "color-scheme": "light",
    fontFamily: "Chalkboard,comic sans ms,'sans-serif'",
    primary: "78.260% 0.0000 NaN",
    secondary: "78.260% 0.0000 NaN",
    accent: "78.260% 0.0000 NaN",
    neutral: "94.007% 0.0000 NaN",
    "base-100": "100% 0 0",
    "base-200": "94.912% 0.0000 NaN",
    "base-300": "89.755% 0.0000 NaN",
    info: "45.198% 0.3132 264.0520",
    success: "51.975% 0.1769 142.4953",
    warning: "70.814% 0.1000 108.6935",
    error: "62.799% 0.2577 29.2339",
    "--rounded-box": "0.2rem",
    "--rounded-btn": "0.2rem",
    "--rounded-badge": "0.2rem",
    "--tab-radius": "0.2rem",
  },
  autumn: {
    "color-scheme": "light",
    primary: "40.725% 0.1612 17.5342",
    secondary: "61.678% 0.1691 23.8700",
    accent: "73.426% 0.0950 60.7266",
    neutral: "54.368% 0.0374 51.9083",
    "base-100": "95.815% 0.0000 NaN",
    info: "69.223% 0.0980 207.2693",
    success: "60.995% 0.0802 174.6027",
    warning: "70.084% 0.1649 56.8393",
    error: "53.07% 0.241 24.16",
  },
  business: {
    "color-scheme": "dark",
    primary: "41.703% 0.0990 251.4694",
    secondary: "64.092% 0.0274 229.3633",
    accent: "67.273% 0.1677 35.7924",
    neutral: "27.441% 0.0132 253.0370",
    "base-100": "24.353% 0.0000 NaN",
    info: "62.615% 0.1435 240.0258",
    success: "70.226% 0.0946 156.5852",
    warning: "77.484% 0.1157 81.5116",
    error: "51.612% 0.1468 29.6765",
    "--rounded-box": "0.25rem",
    "--rounded-btn": ".125rem",
    "--rounded-badge": ".125rem",
  },
  acid: {
    "color-scheme": "light",
    primary: "71.9% 0.357 330.7595734057481",
    secondary: "73.37% 0.224 48.25087840015526",
    accent: "92.78% 0.264 122.96295065960891",
    neutral: "21.31% 0.128 278.68",
    "base-100": "98.510% 0.0000 NaN",
    info: "60.72% 0.227 252.05",
    success: "85.72% 0.266 158.53",
    warning: "91.01% 0.212 100.5",
    error: "64.84% 0.293 29.34918758658804",
    "--rounded-box": "1.25rem",
    "--rounded-btn": "1rem",
    "--rounded-badge": "1rem",
    "--tab-radius": "0.7rem",
  },
  lemonade: {
    "color-scheme": "light",
    primary: "58.92% 0.199 134.6",
    secondary: "77.75% 0.196 111.09",
    accent: "85.39% 0.201 100.73",
    neutral: "30.98% 0.075 108.6",
    "base-100": "98.71% 0.02 123.72",
    info: "86.19% 0.047 224.14",
    success: "86.19% 0.047 157.85",
    warning: "86.19% 0.047 102.15",
    error: "86.19% 0.047 25.85",
  },
  night: {
    "color-scheme": "dark",
    primary: "75.350% 0.1390 232.6513",
    secondary: "68.010% 0.1583 276.9394",
    accent: "72.362% 0.1762 350.0614",
    neutral: "27.949% 0.0368 260.0299",
    "base-100": "20.768% 0.0398 265.7556",
    info: "68.454% 0.1480 237.2426",
    "info-content": "0.000% 0.0000 NaN",
    success: "78.451% 0.1325 181.9011",
    warning: "83.244% 0.1396 82.9424",
    error: "71.788% 0.1703 13.1265",
  },
  coffee: {
    "color-scheme": "dark",
    primary: "71.998% 0.1238 62.7517",
    secondary: "34.465% 0.0298 199.1719",
    accent: "42.620% 0.0744 224.3773",
    neutral: "16.511% 0.0157 326.2892",
    "base-100": "21.676% 0.0231 329.7343",
    "base-content": "72.356% 0.0928 79.1221",
    info: "79.490% 0.0639 184.5338",
    success: "74.722% 0.0725 131.1014",
    warning: "88.151% 0.1408 87.7144",
    error: "77.320% 0.1282 31.8771",
  },
  winter: {
    "color-scheme": "light",
    primary: "56.86% 0.255 257.57",
    secondary: "42.550% 0.1611 282.3448",
    accent: "59.941% 0.1915 335.1831",
    neutral: "19.616% 0.0635 257.6495",
    "base-100": "100% 0 0",
    "base-200": "97.466% 0.0119 259.8418",
    "base-300": "93.269% 0.0162 262.7707",
    "base-content": "41.886% 0.0539 255.8220",
    info: "88.127% 0.0859 214.4966",
    success: "80.493% 0.0770 197.8030",
    warning: "89.173% 0.0459 71.4657",
    error: "73.094% 0.1102 20.0866",
  },
  dim: {
    "color-scheme": "dark",
    primary: "86.133% 0.1417 139.5431",
    secondary: "73.378% 0.1659 35.3547",
    accent: "74.230% 0.1336 311.3947",
    neutral: "24.731% 0.0205 264.0973",
    "neutral-content": "82.901% 0.0313 222.9250",
    "base-100": "30.857% 0.0232 264.1526",
    "base-200": "28.037% 0.0198 264.1856",
    "base-300": "26.347% 0.0184 262.1799",
    "base-content": "82.901% 0.0313 222.9250",
    info: "86.077% 0.1420 206.1696",
    success: "86.171% 0.1422 166.5250",
    warning: "86.164% 0.1422 94.8106",
    error: "82.420% 0.0996 33.7639",
  },
  nord: {
    "color-scheme": "light",
    primary: "59.435% 0.0772 254.0240",
    secondary: "69.651% 0.0591 248.6804",
    accent: "77.464% 0.0622 217.4482",
    neutral: "45.229% 0.0352 264.1341",
    "neutral-content": "89.926% 0.0163 262.7676",
    "base-100": "95.128% 0.0074 260.7685",
    "base-200": "93.300% 0.0104 261.8171",
    "base-300": "89.926% 0.0163 262.7676",
    "base-content": "32.437% 0.0229 264.1855",
    info: "69.207% 0.0625 332.6944",
    success: "76.827% 0.0749 131.0483",
    warning: "85.487% 0.0893 84.0847",
    error: "60.611% 0.1206 15.3509",
    "--rounded-box": "0.4rem",
    "--rounded-btn": "0.2rem",
    "--rounded-badge": "0.4rem",
    "--tab-radius": "0.2rem",
  },
  sunset: {
    "color-scheme": "dark",
    primary: "74.706% 0.1583 39.9476",
    secondary: "72.539% 0.1777 2.7308",
    accent: "71.294% 0.1666 299.8556",
    neutral: "26% 0.019 237.69",
    "neutral-content": "70% 0.019 237.69",
    "base-100": "22% 0.019 237.69",
    "base-200": "20% 0.019 237.69",
    "base-300": "18% 0.019 237.69",
    "base-content": "77.383% 0.0436 245.0860",
    info: "85.559% 0.0853 205.9957",
    success: "85.561% 0.0859 144.7633",
    warning: "85.570% 0.0848 74.4215",
    error: "85.513% 0.0789 16.9053",
    "--rounded-box": "1.2rem",
    "--rounded-btn": "0.8rem",
    "--rounded-badge": "0.4rem",
    "--tab-radius": "0.7rem",
  },
};



================================================
FILE: src/components/all-in-one-theme-editor/utils/schema.ts
================================================
import { z } from "zod";

export const daisyUIThemeColorsSearchParamsSchema = z.object({
  primary: z
    .object({
      name: z.literal("primary"),
      variable: z.literal("--p"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "primary-content": z
    .object({
      name: z.literal("primary-content"),
      variable: z.literal("--pc"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  secondary: z
    .object({
      name: z.literal("secondary"),
      variable: z.literal("--s"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "secondary-content": z
    .object({
      name: z.literal("secondary-content"),
      variable: z.literal("--sc"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  accent: z
    .object({
      name: z.literal("accent"),
      variable: z.literal("--a"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "accent-content": z
    .object({
      name: z.literal("accent-content"),
      variable: z.literal("--ac"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  neutral: z
    .object({
      name: z.literal("neutral"),
      variable: z.literal("--n"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "neutral-content": z
    .object({
      name: z.literal("neutral-content"),
      variable: z.literal("--nc"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "base-100": z
    .object({
      name: z.literal("base-100"),
      variable: z.literal("--b1"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "base-200": z
    .object({
      name: z.literal("base-200"),
      variable: z.literal("--b2"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "base-300": z
    .object({
      name: z.literal("base-300"),
      variable: z.literal("--b3"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "base-content": z
    .object({
      name: z.literal("base-content"),
      variable: z.literal("--bc"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  info: z
    .object({
      name: z.literal("info"),
      variable: z.literal("--in"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "info-content": z
    .object({
      name: z.literal("info-content"),
      variable: z.literal("--inc"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  success: z
    .object({
      name: z.literal("success"),
      variable: z.literal("--su"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "success-content": z
    .object({
      name: z.literal("success-content"),
      variable: z.literal("--suc"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  warning: z
    .object({
      name: z.literal("warning"),
      variable: z.literal("--wa"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "warning-content": z
    .object({
      name: z.literal("warning-content"),
      variable: z.literal("--wac"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  error: z
    .object({
      name: z.literal("error"),
      variable: z.literal("--er"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "error-content": z
    .object({
      name: z.literal("error-content"),
      variable: z.literal("--erc"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
});
export const daisyUIThemeCurvesSearchParamsSchema = z.object({
  "--rounded-box": z
    .object({
      name: z.literal("rounded-box"),
      variable: z.literal("--rounded-box"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "--rounded-btn": z
    .object({
      name: z.literal("rounded-btn"),
      variable: z.literal("--rounded-btn"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "--rounded-badge": z
    .object({
      name: z.literal("rounded-badge"),
      variable: z.literal("--rounded-badge"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),

  "--animation-btn": z
    .object({
      name: z.literal("animation-btn"),
      variable: z.literal("--animation-btn"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "--animation-input": z
    .object({
      name: z.literal("animation-input"),
      variable: z.literal("--animation-input"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "--btn-focus-scale": z
    .object({
      name: z.literal("btn-focus-scale"),
      variable: z.literal("--btn-focus-scale"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "--border-btn": z
    .object({
      name: z.literal("border-btn"),
      variable: z.literal("--border-btn"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "--tab-border": z
    .object({
      name: z.literal("tab-border"),
      variable: z.literal("--tab-border"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
  "--tab-radius": z
    .object({
      name: z.literal("tab-radius"),
      variable: z.literal("--tab-radius"),
      value: z.string(),
      locked: z.boolean().optional(),
    })
    .optional(),
});

export const daisyUIThemeSearchParamsSchema = z
  .object({
    "--theme-name": z
      .object({
        name: z.literal("theme-name"),
        variable: z.literal("data-theme"),
        value: z.string(),
        locked: z.boolean().optional(),
      })
      .optional(),
    "--color-scheme": z
      .object({
        name: z.literal("color-scheme"),
        variable: z.literal("color-scheme"),
        value: z.string(),
        locked: z.boolean().optional(),
      })
      .optional(),
  })
  .merge(daisyUIThemeColorsSearchParamsSchema)
  .merge(daisyUIThemeCurvesSearchParamsSchema);

// "--p": "primary",          // primary color and its values
// "--pc": "primary-content", // color of content within primary color

// "--s": "secondary",        // secondary color and its values
// "--sc": "secondary-content", // color of content within secondary color

// "--n": "neutral",          // state color and its values
// "--nc": "neutral-content", // color of content within state color

// "--a": "accent",          // accent color and its values
// "--ac": "accent-content", // color of content within accent color

// "--b1": "base-100",              // base color, also called gray color
// "--b2": "base-200",              // base color, also called gray color
// "--b3": "base-300",              // base color, also called gray color
// "--bc": "base-content",           // base color, also called gray color

// "--in": "info",          // info color and its values
// "--inc": "info-content", // color of content within info color

// "--su": "success",          // success color and its values
// "--suc": "success-content", // color of content within success color

// "--wa": "warning",          // warning color and its values
// "--wac": "warning-content", // color of content within warning color

// "--er": "error",          // error color and its values
// "--erc": "error-content", // color of content within error color

// "--rounded-box": "1rem",          // border radius rounded-box utility class, used in card and other large boxes
// "--rounded-btn": "0.5rem",        // border radius rounded-btn utility class, used in buttons and similar element
// "--rounded-badge": "1.9rem",      // border radius rounded-badge utility class, used in badges and similar

// "--animation-btn": "0.25s",       // duration of animation when you click on button
// "--animation-input": "0.2s",      // duration of animation for inputs like checkbox, toggle, radio, etc

// "--btn-focus-scale": "0.95",      // scale transform of button when you focus on it
// "--border-btn": "1px",            // border width of buttons

// "--tab-border": "1px",            // border width of tabs
// "--tab-radius": "0.5rem",         // border radius of tabs

export type DaisyUIThemeSearchParmsTypes = z.infer<
  typeof daisyUIThemeSearchParamsSchema
>;
export type DaisyUIColorSearchParmsTypes = z.infer<
  typeof daisyUIThemeColorsSearchParamsSchema
>;
export type DaisyUICurvesSearchParmsTypes = z.infer<
  typeof daisyUIThemeCurvesSearchParamsSchema
>;



================================================
FILE: src/components/all-in-one-theme-editor/utils/theme-default-values.ts
================================================
/* eslint-disable @typescript-eslint/ban-ts-comment */

import { useNavigate, useSearch } from "@tanstack/react-router";
import type { DaisyUIThemeSearchParmsTypesVariables, GenericThemeState } from "./types";
import { useState } from "react";
import {
  getColorValueFromTheme,
  getThemeVariable,
} from "./daisyui-css-variables-helpers";
import { DaisyUIThemeSearchParmsTypes } from "./schema";
import { hexToOklch } from "./color-converters";

export function isThemeNotNull(theme?: DaisyUIThemeSearchParmsTypes) {
  if (!theme) return false;
  if (
    !theme?.primary &&
    !theme?.["primary-content"] &&
    !theme?.secondary &&
    !theme?.["secondary-content"] &&
    !theme?.neutral &&
    !theme?.accent &&
    !theme?.["accent-content"] &&
    !theme?.["base-100"] &&
    !theme?.["base-200"] &&
    !theme?.["base-300"] &&
    !theme?.["base-content"]
  ) {
    return false;
  }
  return true;
}

export function loadThemeName() {
  const elem = document.documentElement;
  const current_data_theme = elem.getAttribute("data-theme");
  return current_data_theme ?? "light";
}
export function loadColorScheme() {
  const color_scheme = getComputedStyle(
    document.documentElement,
  ).getPropertyValue("color-scheme");
  return color_scheme ?? undefined;
}

function loadFromSearchParamsIfLocked(
  css_variable:DaisyUIThemeSearchParmsTypesVariables,
  theme?: {
  name: string;
  value: string;
  variable: string;
  locked?: boolean | undefined;
}) {
  if (!theme) return getColorValueFromTheme(css_variable);
  const { value, variable, locked } = theme;
  if (!locked) {
    const value_from_css_ariable = getColorValueFromTheme(variable);
    return value_from_css_ariable;
  }
  return value ?? "";
}

export function defaultThemes({
  theme,
}: {
  theme?: DaisyUIThemeSearchParmsTypes;
}): DaisyUIThemeSearchParmsTypes {
  return {
    "--color-scheme": {
      name: "color-scheme",
      variable: "color-scheme",
      value: loadFromSearchParamsIfLocked("color-scheme",theme?.["--color-scheme"]),
      locked: theme?.["--color-scheme"]?.locked ?? false,
    },
    accent: {
      name: "accent",
      variable: "--a",
      value: loadFromSearchParamsIfLocked("--a",theme?.accent),
      locked: theme?.accent?.locked ?? false,
    },
    "accent-content": {
      name: "accent-content",
      variable: "--ac",
      value: loadFromSearchParamsIfLocked("--ac",theme?.["accent-content"]),
      locked: theme?.["accent-content"]?.locked ?? false,
    },

    "base-100": {
      name: "base-100",
      variable: "--b1",
      value: loadFromSearchParamsIfLocked("--b1",theme?.["base-100"]),
      locked: theme?.["base-100"]?.locked ?? false,
    },
    "base-200": {
      name: "base-200",
      variable: "--b2",
      value: loadFromSearchParamsIfLocked("--b2",theme?.["base-200"]),
      locked: theme?.["base-200"]?.locked ?? false,
    },
    "base-300": {
      name: "base-300",
      variable: "--b3",
      value: loadFromSearchParamsIfLocked("--b3",theme?.["base-300"]),
      locked: theme?.["base-300"]?.locked ?? false,
    },
    "base-content": {
      name: "base-content",
      variable: "--bc",
     value: loadFromSearchParamsIfLocked("--bc",theme?.["base-content"]),
      locked: theme?.["base-content"]?.locked ?? false,
    },

    error: {
      name: "error",
      variable: "--er",
      value: loadFromSearchParamsIfLocked("--er",theme?.error),
      locked: theme?.error?.locked ?? false,
    },
    "error-content": {
      name: "error-content",
      variable: "--erc",
      value: loadFromSearchParamsIfLocked("--erc",theme?.["error-content"]),
      locked: theme?.["error-content"]?.locked ?? false,
    },

    info: {
      name: "info",
      variable: "--in",
      value: loadFromSearchParamsIfLocked("--in",theme?.info),
      locked: theme?.info?.locked ?? false,
    },
    "info-content": {
      name: "info-content",
      variable: "--inc",
      value: loadFromSearchParamsIfLocked("--inc",theme?.["info-content"]),
      locked: theme?.["info-content"]?.locked ?? false,
    },

    neutral: {
      name: "neutral",
      variable: "--n",
      value: loadFromSearchParamsIfLocked("--n",theme?.neutral),
      locked: theme?.neutral?.locked ?? false,
    },
    "neutral-content": {
      name: "neutral-content",
      variable: "--nc",
      value: loadFromSearchParamsIfLocked("--nc",theme?.["neutral-content"]),
      locked: theme?.["neutral-content"]?.locked ?? false,
    },

    primary: {
      name: "primary",
      variable: "--p",
      value: loadFromSearchParamsIfLocked("--p",theme?.primary),
      locked: theme?.primary?.locked ?? false,
    },
    "primary-content": {
      name: "primary-content",
      variable: "--pc",
      value: loadFromSearchParamsIfLocked("--pc",theme?.["primary-content"]),
      locked: theme?.["primary-content"]?.locked ?? false,
    },

    success: {
      name: "success",
      variable: "--su",
      value: loadFromSearchParamsIfLocked("--su",theme?.success),
      locked: theme?.success?.locked ?? false,
    },
    "success-content": {
      name: "success-content",
      variable: "--suc",
      value: loadFromSearchParamsIfLocked("--suc",theme?.["success-content"]),
      locked: theme?.["success-content"]?.locked ?? false,
    },

    secondary: {
      name: "secondary",
      variable: "--s",
      value: loadFromSearchParamsIfLocked("--s",theme?.secondary),
      locked: theme?.secondary?.locked ?? false,
    },
    "secondary-content": {
      name: "secondary-content",
      variable: "--sc",
      value: loadFromSearchParamsIfLocked("--sc",theme?.["secondary-content"]),
      locked: theme?.["secondary-content"]?.locked ?? false,
    },

    warning: {
      name: "warning",
      variable: "--wa",
      value: loadFromSearchParamsIfLocked("--wa",theme?.warning),
      locked: theme?.warning?.locked ?? false,
    },
    "warning-content": {
      name: "warning-content",
      variable: "--wac",
      value: loadFromSearchParamsIfLocked("--wac",theme?.["warning-content"]),
      locked: theme?.["warning-content"]?.locked ?? false,
    },

    "--rounded-box": {
      name: "rounded-box",
      variable: "--rounded-box",
      value:
        theme?.["--rounded-box"]?.value ?? getThemeVariable("--rounded-box"),
      locked: theme?.["--rounded-box"]?.locked ?? false,
    },
    "--rounded-btn": {
      name: "rounded-btn",
      variable: "--rounded-btn",
      value:
        theme?.["--rounded-btn"]?.value ?? getThemeVariable("--rounded-btn"),
      locked: theme?.["--rounded-btn"]?.locked ?? false,
    },
    "--rounded-badge": {
      name: "rounded-badge",
      variable: "--rounded-badge",
      value:
        theme?.["--rounded-badge"]?.value ??
        getThemeVariable("--rounded-badge"),
      locked: theme?.["--rounded-badge"]?.locked ?? false,
    },
    "--animation-btn": {
      name: "animation-btn",
      variable: "--animation-btn",
      value:
        theme?.["--animation-btn"]?.value ??
        getThemeVariable("--animation-btn"),
      locked: theme?.["--animation-btn"]?.locked ?? false,
    },
    "--animation-input": {
      name: "animation-input",
      variable: "--animation-input",
      value:
        theme?.["--animation-input"]?.value ??
        getThemeVariable("--animation-input"),
      locked: theme?.["--animation-input"]?.locked ?? false,
    },
    "--border-btn": {
      name: "border-btn",
      variable: "--border-btn",
      value: theme?.["--border-btn"]?.value ?? getThemeVariable("--border-btn"),
      locked: theme?.["--border-btn"]?.locked ?? false,
    },
    "--tab-border": {
      name: "tab-border",
      variable: "--tab-border",
      value: theme?.["--tab-border"]?.value ?? getThemeVariable("--tab-border"),
      locked: theme?.["--tab-border"]?.locked ?? false,
    },
    "--tab-radius": {
      name: "tab-radius",
      variable: "--tab-radius",
      value: theme?.["--tab-radius"]?.value ?? getThemeVariable("--tab-radius"),
      locked: theme?.["--tab-radius"]?.locked ?? false,
    },

    "--btn-focus-scale": {
      name: "btn-focus-scale",
      variable: "--btn-focus-scale",
      value:
        theme?.["--btn-focus-scale"]?.value ??
        getThemeVariable("--btn-focus-scale"),
      locked: theme?.["--btn-focus-scale"]?.locked ?? false,
    },
    "--theme-name": {
      name: "theme-name",
      variable: "data-theme",
      value: theme?.["--theme-name"]?.value ?? loadThemeName() ?? "",
      locked: theme?.["--theme-name"]?.locked ?? false,
    },
    // "--color-scheme": {
    //   name: "color-scheme",
    //   variable: "--color-scheme",
    //   value:
    //     theme?.["--color-scheme"]?.value ??
    //     loadColorScheme() ??
    //     "",
    //   locked: theme?.["--color-scheme"]?.locked ?? false,
    // },

    // theme_name: theme?.theme_name ?? loadThemeName(),
  };
}

export function importThemes(imported_text: string) {
  const imported_theme = defaultThemes({});
  type AllThemeKeys = keyof typeof imported_theme;
  if (imported_text === "") return imported_theme;
  imported_text.split("\n").forEach((line) => {
    const [key, value] = line.split(":");
    if (key && value) {
      const trimmednewValue = value?.trim();
      let newThemeValue = trimmednewValue.endsWith(",")
        ? trimmednewValue.slice(1, -2)
        : trimmednewValue.slice(1, -1);
      const theme_key = key
        ?.trim()
        .split('"')[1] as keyof typeof imported_theme;
      // eslint-disable-next-line no-prototype-builtins
      if (
        imported_theme[theme_key] &&
        Object.prototype.hasOwnProperty.call(imported_theme[theme_key], "value")
      ) {
        const oldThemeObject =
          imported_theme[theme_key as Exclude<AllThemeKeys, "theme_name">];
        // @ts-expect-error
        if (theme_key !== "--") {
          if (newThemeValue.startsWith("#")) {
            newThemeValue = hexToOklch(newThemeValue);
          }

          imported_theme[theme_key] = {
            ...oldThemeObject,
            // @ts-expect-error
            value: newThemeValue,
          };
        }
      }
    }
  });
  return imported_theme;
}

export function useUpdateTheme() {
  const navigate = useNavigate();
  const searchParams = useSearch({
    from: "/",
  });
  const updateTheme = (newTheme: Record<string, GenericThemeState>) => {
    navigate({
      search: {
        ...searchParams,
        ...newTheme,
      },
    });
  };
  return { updateTheme };
}

export function useThemeWithDefaults() {
  const themeSearchParams = useSearch({
    from: "__root__",
  });
  const [themes] = useState(defaultThemes({ theme: themeSearchParams }));

  return themes;
}



================================================
FILE: src/components/all-in-one-theme-editor/utils/types.ts
================================================
import { BaseDaisyUiThemeKeys } from "./daisyui-css-variables-helpers";
import { DaisyUIThemeSearchParmsTypes } from "./schema";

export type BaseDaisyUiThemeKeysWithoutBase = Exclude<
  BaseDaisyUiThemeKeys,
  "base"
>;
export type BGColorRecord<T extends BaseDaisyUiThemeKeysWithoutBase> = Record<
  T,
  {
    name: T;
    value: string;
    variable: string;
    locked?: boolean;
  }
>;
export type ContentColorRecprdKey<T extends BaseDaisyUiThemeKeysWithoutBase> =
  `${T}-content`;
export type ContentColorRecord<T extends BaseDaisyUiThemeKeysWithoutBase> =
  Record<
    ContentColorRecprdKey<T>,
    {
      name: T;
      value: string;
      variable: string;
      locked?: boolean;
    }
  >;
export type ColorGroupProps<T extends BaseDaisyUiThemeKeysWithoutBase> =
  BGColorRecord<T> & ContentColorRecord<T>;

export interface GenericThemeState {
  name: string;
  value: string;
  variable: string;
  locked?: boolean;
}

export type AllPOssibleThemeKeys =
  | BaseDaisyUiThemeKeysWithoutBase
  | `${BaseDaisyUiThemeKeysWithoutBase}-content`
  | "base-100"
  | "base-200"
  | "base-300"
  | "base-content";

  export type DaisyUIThemeSearchParmsTypesVariables =
    Required<DaisyUIThemeSearchParmsTypes>[keyof DaisyUIThemeSearchParmsTypes]["variable"]



================================================
FILE: src/components/all-in-one-theme-editor/utils/use-search-params-theme.ts
================================================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { useNavigate, useSearch } from "@tanstack/react-router";

export function useDaisyUITheme() {
  const searchParams = useSearch({
    from: "__root__",
  });
  const navigate = useNavigate();
  function updateTheme(items_key: string, new_items: string) {
    navigate({
      search: (prev) => {
        return {
          ...prev,
          [items_key]: {
            ...prev[items_key as Exclude<keyof typeof prev, "theme_name">],
            value: new_items,
          },
        };
      },
    });
  }
  function updateWholeTheme(theme: Record<string, any>) {
    navigate({
      search: (prev) => {
        return {
          ...prev,
          ...theme,
        };
      },
    });
  }
  function updateThemeName(theme_name: string) {
    navigate({
      search: (prev) => {
        return {
          ...prev,
          "--theme-name": {
            // ...prev["--theme-name"],
            value: theme_name,
            name: "theme-name",
            variable: "data-theme",
          },
        };
      },
    });
  }
  function updateLockedTheme(items_key: string, is_locked: boolean) {
    navigate({
      search: (prev) => {
        return {
          ...prev,
          [items_key]: {
            ...prev[items_key as Exclude<keyof typeof prev, "theme_name">],
            locked: is_locked,
          },
        };
      },
    });
  }
  return {
    searchParams,
    navigate,
    updateTheme,
    updateLockedTheme,
    updateThemeName,
    updateWholeTheme,
  };
}



================================================
FILE: src/components/daisyui/Actions.tsx
================================================
export function Actions() {
  return (
    <div className="flex h-full w-full flex-col items-center justify-center gap-5 divide-y p-[5%]">
      {/* drop down */}
      <div className="w-[80%]">
        <h1 className="text-3xl font-bold">navbar</h1>
        <div className="navbar rounded-box bg-base-300">
          <div className="flex-1 px-2 lg:flex-none">
            <a className="text-lg font-bold">daisyUI</a>
          </div>
          <div className="flex flex-1 justify-end px-2">
            <div className="flex items-stretch">
              <a className="btn btn-ghost rounded-btn">Button</a>
              <div className="dropdown dropdown-end">
                <div
                  tabIndex={0}
                  role="button"
                  className="btn btn-ghost rounded-btn"
                >
                  Dropdown
                </div>
                <ul
                  tabIndex={0}
                  className="menu dropdown-content z-[1] mt-4 w-52 rounded-box bg-base-100 p-2 shadow"
                >
                  <li>
                    <a>Item 1</a>
                  </li>
                  <li>
                    <a>Item 2</a>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Buttons  and bages*/}
      <div className="flex w-full flex-col items-center justify-center gap-5 md:flex-row">
        {/* buttons */}
        <div className="flex w-full flex-wrap justify-center gap-5">
          <h1 className="w-full text-center text-3xl font-bold">Buttons</h1>
          <button className="btn">Button</button>
          <button className="btn btn-neutral">Neutral</button>
          <button className="btn btn-primary">Primary</button>
          <button className="btn btn-secondary">Secondary</button>
          <button className="btn btn-accent">Accent</button>
          <button className="btn btn-ghost">Ghost</button>
          <button className="btn btn-link">Link</button>
        </div>
        {/* modal */}
        <div className="flex w-full flex-col justify-center gap-5">
          <h1 className="w-full text-center text-3xl font-bold">Modal</h1>
          <div className="flex w-full items-center justify-center gap-5">
            <button
              className="btn btn-primary"
              onClick={() =>
                (
                  document.getElementById("my_modal_1") as HTMLDialogElement
                ).showModal()
              }
            >
              open modal
            </button>
            <dialog id="my_modal_1" className="modal">
              <div className="modal-box">
                <h3 className="text-lg font-bold">Hello!</h3>
                <p className="py-4">
                  Press ESC key or click the button below to close
                </p>
                <div className="modal-action">
                  <form method="dialog">
                    {/* if there is a button in form, it will close the modal */}
                    <button className="btn">Close</button>
                  </form>
                </div>
              </div>
            </dialog>
          </div>
        </div>
        {/* badge */}
        <div className="flex w-full flex-wrap justify-center gap-5">
          <h1 className="w-full text-center text-3xl font-bold">badge</h1>
          <div className="badge">default</div>
          <div className="badge badge-neutral">neutral</div>
          <div className="badge badge-primary">primary</div>
          <div className="badge badge-secondary">secondary</div>
          <div className="badge badge-accent">accent</div>
          <div className="badge badge-ghost">ghost</div>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: src/components/daisyui/AllDaisyUI.tsx
================================================
import { Actions } from "./Actions";
import { DaisyUIDisplayComponents } from "./DaisyUIDisplayComponents";
import { DaisyUIForm } from "./DaisyUIForm";

export function AllDaisyUIComponents() {
  return (
    <div className="flex h-full w-full flex-col items-center justify-center">
      <Actions />
      <DaisyUIForm />
      <DaisyUIDisplayComponents />
    </div>
  );
}



================================================
FILE: src/components/daisyui/DaisyUIDisplayComponents.tsx
================================================
export function DaisyUIDisplayComponents() {
  return (
    <div className="flex h-full w-full flex-wrap items-center justify-center gap-2 divide-x divide-y p-[5%]">
      {/* steps */}
      <div className="flex flex-wrap items-center justify-center gap-1 p-5">
        <h1 className="w-full text-center text-3xl font-bold">Steps</h1>
        <ul className="steps steps-vertical lg:steps-horizontal">
          <li className="step step-primary">Register</li>
          <li className="step step-primary">Choose plan</li>
          <li className="step">Purchase</li>
          <li className="step">Receive Product</li>
        </ul>
      </div>

      {/* card   */}
      <div className="flex flex-wrap items-center justify-center gap-1 p-5">
        <h1 className="w-full text-center text-3xl font-bold">Card</h1>
        <div className="card w-96 bg-base-200 shadow-xl">
          <div className="card-body">
            <h2 className="card-title">Card title!</h2>
            <p>If a dog chews shoes whose shoes does he choose?</p>
            <div className="card-actions justify-end">
              <button className="btn btn-primary">Buy Now</button>
            </div>
          </div>
        </div>
      </div>
      {/* chat bubble   */}
      <div className="flex w-full flex-wrap items-center justify-center gap-1 p-5">
        <h1 className="w-full text-center text-3xl font-bold">Chat bubble</h1>
        <div className="chat chat-start">
          <div className="chat-bubble chat-bubble-primary">
            What kind of nonsense is this
          </div>
        </div>
        <div className="chat chat-start">
          <div className="chat-bubble chat-bubble-secondary">
            Put me on the Council and not make me a Master!??
          </div>
        </div>
        <div className="chat chat-start">
          <div className="chat-bubble chat-bubble-accent">
            That's never been done in the history of the Jedi. It's insulting!
          </div>
        </div>
        <div className="chat chat-end">
          <div className="chat-bubble chat-bubble-info">Calm down, Anakin.</div>
        </div>
        <div className="chat chat-end">
          <div className="chat-bubble chat-bubble-success">
            You have been given a great honor.
          </div>
        </div>
        <div className="chat chat-end">
          <div className="chat-bubble chat-bubble-warning">
            To be on the Council at your age.
          </div>
        </div>
        <div className="chat chat-end">
          <div className="chat-bubble chat-bubble-error">
            It's never happened before.
          </div>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: src/components/daisyui/DaisyUIForm.tsx
================================================
export function DaisyUIForm() {
  return (
    <form className="flex w-[90%] flex-col items-center justify-center gap-3 bg-base-200 p-[5%] md:w-[60%]">
      <h1 className="text-3xl font-bold">form</h1>
      {/* inputs */}
      <div className="flex w-full flex-col gap-2">
        <h1 className="text-xl font-bold">inputs</h1>
        <label className="input input-bordered flex items-center gap-2 rounded-lg">
          Name
          <input type="text" className="grow" placeholder="Daisy" />
        </label>
        <label className="input input-bordered flex items-center gap-2">
          Email
          <input type="text" className="grow" placeholder="daisy@site.com" />
        </label>
        <label className="input input-bordered flex items-center gap-2">
          <input type="text" className="grow" placeholder="Search" />
          <kbd className="kbd kbd-sm">⌘</kbd>
          <kbd className="kbd kbd-sm">K</kbd>
        </label>
        <label className="input input-bordered flex items-center gap-2">
          <input type="text" className="grow" placeholder="Search" />
          <span className="badge badge-info">Optional</span>
        </label>
        <label className="input input-bordered">
          <input
            type="file"
            className="file-input file-input-bordered file-input-primary w-full max-w-xs"
          />
        </label>
      </div>
      {/* clickable inputs */}
      <div className="flex w-full flex-wrap items-center justify-center gap-5">
        {/* checkbox */}
        <div className="flex flex-col items-center justify-center rounded-lg bg-base-100 p-4">
          <h1 className="text-sm">checkbox</h1>
          <div className="flex w-full items-center justify-center gap-2">
            <input
              type="checkbox"
              defaultChecked
              className="checkbox-primary checkbox checkbox-sm"
            />
            <input
              type="checkbox"
              defaultChecked
              className="checkbox-secondary checkbox checkbox-sm"
            />
            <input
              type="checkbox"
              defaultChecked
              className="checkbox-accent checkbox checkbox-sm"
            />
          </div>
        </div>

        {/* radio */}
        <div className="flex flex-col items-center justify-center rounded-lg bg-base-100 p-4">
          <h1 className="text-sm">radio</h1>
          <div className="flex items-center justify-center gap-2">
            <input
              type="radio"
              name="radio-8"
              className="radio-primary radio"
              defaultChecked
            />
            <input
              type="radio"
              name="radio-8"
              className="radio-secondary radio"
              defaultChecked
            />
            <input
              type="radio"
              name="radio-8"
              className="radio-accent radio"
              defaultChecked
            />
          </div>
        </div>
        {/* rating */}
        <div className="flex flex-col items-center justify-center rounded-lg bg-base-100 p-4">
          <h1 className="text-sm">rating</h1>
          <div className="rating rating-lg">
            <input
              type="radio"
              name="rating-9"
              className="rating-hidden bg-primary"
            />
            <input
              type="radio"
              name="rating-9"
              className="mask mask-star-2 bg-primary"
            />
            <input
              type="radio"
              name="rating-9"
              className="mask mask-star-2 bg-primary"
              defaultChecked
            />
            <div className="rating rating-half rating-lg">
              <input
                type="radio"
                name="rating-10"
                className="mask mask-half-1 mask-star-2 bg-green-500 bg-primary"
                defaultChecked
              />
            </div>
            <input
              type="radio"
              name="rating-9"
              className="mask mask-star-2 bg-primary"
            />
            <input
              type="radio"
              name="rating-9"
              className="mask mask-star-2 bg-primary"
            />
          </div>
        </div>
      </div>
      {/* range */}
      <div className="flex w-full flex-col items-center justify-center gap-2">
        <h1 className="text-sm">range</h1>
        <input
          type="range"
          min={0}
          max="100"
          value="40"
          className="range range-accent range-xs"
          onChange={() => {}}
        />
        <input
          type="range"
          min={0}
          max="100"
          value="50"
          onChange={() => {}}
          className="range range-primary range-sm"
        />
        <input
          type="range"
          min={0}
          max="100"
          value="60"
          onChange={() => {}}
          className="range range-secondary range-md"
        />
      </div>
    </form>
  );
}



================================================
FILE: src/components/hooks/use-toast.ts
================================================
"use client";

// Inspired by react-hot-toast library
import * as React from "react";

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/shadcn/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t,
        ),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };



================================================
FILE: src/components/navigation/DaisyUiDevtools.tsx
================================================
import { useState } from "react";
import DaisyUIThemeEditor from "../all-in-one-theme-editor/DaisyUIThemeEditor";
import { twMerge } from "tailwind-merge";
import { defaultThemes } from "../all-in-one-theme-editor/utils/theme-default-values";
import { useDaisyUITheme } from "../all-in-one-theme-editor/utils/use-search-params-theme";


interface DaisyUiDevtoolsProps {
position?:"start"|"end"
drawerID?:string;
drawerClassname?:string;
toggleClassname?:string;
iconClassname?:string;
}

export function DaisyUiDevtools({
  drawerID = "daisyui-devtools-drawer",
  position="end",
  toggleClassname="",
  drawerClassname="",
  iconClassname="",
}: DaisyUiDevtoolsProps) {

  const {searchParams,updateLockedTheme,updateTheme} = useDaisyUITheme() 
  if(process.env.NODE_ENV !== "development"){
    return
 }
 const drawerPositionStyles =
   position === "end"
     ? "drawer drawer-end sticky  z-50"
     : "drawer sticky  z-50";
  return (
    <>
      <label
        htmlFor="daisyui-devtools-drawer"
        className={twMerge("btn drawer-button fixed right-[5%] top-[10%] z-50 flex gap-2 rounded-full text-primary", toggleClassname)}
      >
        <svg
          className={twMerge("h-8 w-8 fill-primary text-primary hover:fill-accent", iconClassname)}
          viewBox="0 0 16.00 16.00"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
          <g
            id="SVGRepo_tracerCarrier"
            stroke-linecap="round"
            stroke-linejoin="round"
          ></g>
          <g id="SVGRepo_iconCarrier">
            {" "}
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M16 8C16 8.33866 15.979 8.67241 15.9381 9H8V11L11 14V15.4185C10.0736 15.7935 9.0609 16 8 16C3.58172 16 0 12.4183 0 8C0 3.58172 3.58172 0 8 0C12.4183 0 16 3.58172 16 8ZM3 9C3.55228 9 4 8.55229 4 8C4 7.44772 3.55228 7 3 7C2.44772 7 2 7.44772 2 8C2 8.55229 2.44772 9 3 9ZM9 3C9 3.55228 8.55229 4 8 4C7.44772 4 7 3.55228 7 3C7 2.44772 7.44772 2 8 2C8.55229 2 9 2.44772 9 3ZM5.17137 5.17158C5.56189 4.78106 5.56189 4.14789 5.17137 3.75737C4.78084 3.36685 4.14768 3.36685 3.75716 3.75737C3.36663 4.14789 3.36663 4.78106 3.75716 5.17158C4.14768 5.56211 4.78084 5.56211 5.17137 5.17158ZM12.2428 5.17161C11.8522 5.56214 11.2191 5.56214 10.8285 5.17161C10.438 4.78109 10.438 4.14792 10.8285 3.7574C11.2191 3.36688 11.8522 3.36688 12.2428 3.7574C12.6333 4.14792 12.6333 4.78109 12.2428 5.17161ZM5.17146 10.8284C4.78094 10.4379 4.14777 10.4379 3.75725 10.8284C3.36672 11.2189 3.36672 11.8521 3.75725 12.2426C4.14777 12.6331 4.78094 12.6331 5.17146 12.2426C5.56199 11.8521 5.56199 11.2189 5.17146 10.8284Z"
            ></path>{" "}
          </g>
        </svg>
      </label>

      <div className={twMerge(drawerPositionStyles,drawerClassname)}>
        <input id={drawerID} type="checkbox" className="drawer-toggle" />
        <div className="drawer-content">{/* Page content here */}</div>
        <div className="drawer-side">
          <label
            htmlFor={drawerID}
            aria-label="close sidebar"
            className="drawer-overlay"
          />
          <ul className="menu min-h-full w-[90%] bg-base-200 text-base-content md:w-[40%]">
            <label
              htmlFor={drawerID}
              aria-label="close sidebar"
              className="drawer-overlay sticky top-4"
            >
              🗙
            </label>
            {/* Sidebar content here */}

            <DaisyUIThemeEditor theme={searchParams} updateTheme={updateTheme} updateLockedTheme={updateLockedTheme}/>
          </ul>
        </div>
      </div>
    </>
  );
}



================================================
FILE: src/components/navigation/DaisyUiDrawers.tsx
================================================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { Link } from "@tanstack/react-router";
import { FileUp, Import, X } from "lucide-react";
import { ExportTheme } from "../all-in-one-theme-editor/ExportTheme";
import { ImportTheme } from "../all-in-one-theme-editor/ImprtTheme";
import { DrawerIds } from "@/routes/-components/type";
import { lazy, Suspense } from "react";
import { useDaisyUITheme } from "../all-in-one-theme-editor/utils/use-search-params-theme";
import { DaisyUIThemeSearchParmsTypes } from "../all-in-one-theme-editor/utils/schema";

const DaisyUIThemeEditor = lazy(
  () => import("../all-in-one-theme-editor/DaisyUIThemeEditor"),
);

interface MainDaisyUiDrawerProps {
  closeDrawer: (drawerId: DrawerIds) => void;

}

export function MainDaisyUiDrawer({
  closeDrawer,
}: MainDaisyUiDrawerProps) {
  const {searchParams,updateThemeName,updateTheme} = useDaisyUITheme()
  return (
    <div className="drawer-side z-20">
      <label
        htmlFor="main-page-drawer"
        aria-label="close sidebar"
        className="drawer-overlay"
      ></label>
      <ul className="menu min-h-full w-[80%] bg-base-200 py-[20%] text-base-content @container md:w-[40%] md:p-4 md:py-3">
        {/* Sidebar content here */}
        <div className="flex w-full md:justify-end">
          <button
            className="btn btn-square btn-ghost btn-sm"
            onClick={() => closeDrawer("main-page-drawer")}
          >
            <X />
          </button>
        </div>
        {/* links */}
        <div
          onClick={() => closeDrawer("main-page-drawer")}
          className="flex w-full flex-col justify-between gap-2 divide-y"
        >
          <Link
            search={searchParams}
            to="/"
            className="bg-base-100/70 p-5 text-center text-2xl font-bold hover:bg-base-100/20 md:p-10"
          >
            UI
          </Link>

          <Link search={searchParams} to="/shadcn" className="btn btn-link">
            shadcn
          </Link>

          <Link search={searchParams} to="/twarkui" className="btn btn-link">
            twark
          </Link>
        </div>
        <div className="flex items-center justify-center gap-2">
          <label
            htmlFor="import-theme-drawer"
            className="btn drawer-button btn-sm flex gap-2"
          >
            import <Import />
          </label>

          <label
            htmlFor="export-theme-drawer"
            className="btn drawer-button btn-sm flex gap-2"
          >
            export <FileUp />
          </label>
        </div>
        <Suspense fallback={<div className="skeleton min-h-[60vh] w-full" />}>
          <DaisyUIThemeEditor theme={searchParams} updateTheme={updateTheme} updateLockedTheme={updateThemeName} />
        </Suspense>
      </ul>
    </div>
  );
}
interface ExportThemeDaisyUiDrawerProps {
  searchParams: DaisyUIThemeSearchParmsTypes;
}

export function ExportThemeDaisyUiDrawer({
  searchParams,
}: ExportThemeDaisyUiDrawerProps) {
  return (
    <div className="drawer drawer-end sticky top-[12%] z-20">
      <input
        id="export-theme-drawer"
        type="checkbox"
        className="drawer-toggle"
      />
      <div className="drawer-content">{/* Page content here */}</div>
      <div className="drawer-side">
        <label
          htmlFor="export-theme-drawer"
          aria-label="close sidebar"
          className="drawer-overlay"
        />
        <ul className="menu min-h-full w-[90%] bg-base-200 text-base-content md:w-[40%]">
          <label
            htmlFor="export-theme-drawer"
            aria-label="close sidebar"
            className="drawer-overlay sticky top-4"
          >
            <X />
          </label>
          {/* Sidebar content here */}
          <ExportTheme theme={searchParams} />
        </ul>
      </div>
    </div>
  );
}
interface ImportThemeDaisyUiDrawerProps {
  searchParams: DaisyUIThemeSearchParmsTypes;
  updateWholeTheme: (theme: Record<string, any>) => void;
}

export function ImportThemeDaisyUiDrawer({
  searchParams,
  updateWholeTheme,
}: ImportThemeDaisyUiDrawerProps) {
  return (
    <div className="drawer drawer-end sticky top-[12%] z-20">
      <input
        id="import-theme-drawer"
        type="checkbox"
        className="drawer-toggle"
      />
      <div className="drawer-content">{/* Page content here */}</div>
      <div className="drawer-side">
        <label
          htmlFor="import-theme-drawer"
          aria-label="close sidebar"
          className="drawer-overlay"
        />
        <ul className="menu min-h-full w-[90%] bg-base-200 text-base-content md:w-[40%]">
          <label
            htmlFor="import-theme-drawer"
            aria-label="close sidebar"
            className="drawer-overlay sticky top-4"
          >
            <X />
          </label>
          {/* Sidebar content here */}
          <ImportTheme
            theme={searchParams}
            updateWholeTheme={updateWholeTheme}
          />
        </ul>
      </div>
    </div>
  );
}



================================================
FILE: src/components/navigation/DaisyuiThemesSelect.tsx
================================================
import { useDaisyUITheme } from "../all-in-one-theme-editor/utils/use-search-params-theme";

export function DaisyuiThemesSelect() {
  const items = [
    "light",
    "dark",
    "cupcake",
    "bumblebee",
    "emerald",
    "corporate",
    "synthwave",
    "retro",
    "cyberpunk",
    "valentine",
    "halloween",
    "custom_theme",
    "garden",
    "forest",
    "aqua",
    "lofi",
    "pastel",
    "fantasy",
    "wireframe",
    "black",
    "luxury",
    "dracula",
    "cmyk",
    "autumn",
    "business",
    "acid",
    "lemonade",
    "night",
    "coffee",
    "winter",
    "dim",
    "nord",
    "sunset",
  ];
  const { searchParams, updateThemeName } = useDaisyUITheme();
  function onThemeChange(theme_name: string) {
    updateThemeName(theme_name);
  }

  return (
    <select
      data-choose-theme
      className="select select-primary select-sm"
      onChange={(e) => onThemeChange(e.target.value)}
      defaultValue={searchParams?.["--theme-name"]?.value}
    >
      <option value="dark">Default</option>
      {items.map((item) => (
        <option value={item} key={item}>
          {item}
        </option>
      ))}
    </select>
  );
}



================================================
FILE: src/components/navigation/MainNavBar.tsx
================================================
import { Link } from "@tanstack/react-router";
import { DaisyuiThemesSelect } from "./DaisyuiThemesSelect";
import { useDaisyUITheme } from "../all-in-one-theme-editor/utils/use-search-params-theme";
import { FileUp, Import, Moon, Sun } from "lucide-react";



export function MainNavBar() {
  const { searchParams, updateTheme } = useDaisyUITheme();
  const color_scheme = searchParams?.["--color-scheme"]?.value;

  return (
    <header className="flex w-full flex-col items-center justify-between">
      <nav className="flex w-full items-center justify-end md:justify-between">
        <div className="hidden w-full items-center justify-center gap-2 text-sm md:flex">
          <Link search={searchParams} to="/twarkui" className="btn btn-link">
            twark
          </Link>
          <Link
            search={searchParams}
            to="/shadcn"
            className="btn btn-link btn-sm"
          >
            shadcn
          </Link>
        </div>

        <button className="btn btn-ghost btn-sm flex gap-2 bg-slate-900 text-slate-50 brightness-150">
          {color_scheme === "dark" ? (
            <Moon
              className=""
              onClick={() => updateTheme("--color-scheme", "light")}
            />
          ) : (
            <Sun
              className=""
              onClick={() => updateTheme("--color-scheme", "dark")}
            />
          )}
        </button>
        {/* <ManualThemeSwitcher/> */}
        <DaisyuiThemesSelect />
        <div className="flex min-w-[20%] justify-end gap-3">
          <div className="hidden items-center justify-center gap-2 md:flex">
            <label
              htmlFor="import-theme-drawer"
              className="btn drawer-button btn-sm flex gap-2"
            >
              import <Import />
            </label>
            <label
              htmlFor="export-theme-drawer"
              className="btn drawer-button btn-sm flex gap-2"
            >
              export <FileUp />
            </label>
          </div>
        </div>
      </nav>
    </header>
  );
}



================================================
FILE: src/components/navigation/tailwind-indicator.tsx
================================================
export function TailwindIndicator() {
  return (
    <div className="bg-bg-emphasized fixed bottom-[1.5%] left-[50%] z-50 flex size-8 items-center justify-center font-bold">
      <div className="block sm:hidden">xs</div>
      <div className="hidden sm:block md:hidden lg:hidden xl:hidden 2xl:hidden">
        sm
      </div>
      <div className="hidden md:block lg:hidden xl:hidden 2xl:hidden">md</div>
      <div className="hidden lg:block xl:hidden 2xl:hidden">lg</div>
      <div className="hidden xl:block 2xl:hidden">xl</div>
      <div className="hidden 2xl:block">2xl</div>
    </div>
  );
}



================================================
FILE: src/components/park/lib/create-style-context.tsx
================================================
/* eslint-disable @typescript-eslint/ban-types */
import {
  type ElementType,
  type ForwardRefExoticComponent,
  type PropsWithoutRef,
  type RefAttributes,
  createContext,
  forwardRef,
  useContext,
} from 'react'

type Recipe = (props: Record<string, unknown>) => Record<string, () => string>
type Slot<R extends Recipe> = keyof ReturnType<R>

const cx = (...args: (string | undefined)[]) => args.filter(Boolean).join(' ')

export const createStyleContext = <R extends Recipe>(recipe: R) => {
  const StyleContext = createContext<Record<Slot<R>, () => string> | null>(null)

  const withRootProvider = <P extends {}>(Component: ElementType) => {
    const StyledComponent = (props: P) => {
      const slotStyles = recipe(props) as Record<Slot<R>, () => string>

      return (
        <StyleContext.Provider value={slotStyles}>
          <Component {...props} />
        </StyleContext.Provider>
      )
    }
    return StyledComponent
  }

  const withProvider = <T, P extends { className?: string }>(
    Component: ElementType,
    slot: Slot<R>,
  ) => {
    return forwardRef<T, P>((props, ref) => {
      const slotStyles = recipe(props) as Record<Slot<R>, () => string>
      return (
        <StyleContext.Provider value={slotStyles}>
          <Component {...props} ref={ref} className={cx(slotStyles?.[slot](), props.className)} />
        </StyleContext.Provider>
      )
    })
  }

  const withContext = <T, P extends { className?: string }>(
    Component: ElementType,
    slot: Slot<R>,
  ): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>> => {
    return forwardRef<T, P>((props, ref) => {
      const slotStyles = useContext(StyleContext)
      return (
        <Component {...props} ref={ref} className={cx(slotStyles?.[slot](), props.className)} />
      )
    })
  }

  return {
    withRootProvider,
    withProvider,
    withContext,
  }
}



================================================
FILE: src/components/park/lib/create-taost.ts
================================================
import { createToaster } from "@ark-ui/react/toast";
export const toaster = createToaster({
  placement: "bottom-end",
  overlap: true,
  gap: 16,
});



================================================
FILE: src/components/park/lib/tw-plugin.ts
================================================
import { Config } from "tailwindcss";
import plugin from "tailwindcss/plugin";
const defaultCofig: Partial<Config> = {
  content: [],
  theme: {
    extend: {
      keyframes: {
        "ark-accordion-down": {
          from: { opacity: "0.01", height: "0" },
          to: { opacity: "1", height: "var(--height)" },
        },
        "ark-accordion-up": {
          from: { height: "var(--height)", opacity: "1" },
          to: { height: "0" , opacity: "0.01"},
        },
      },

      animation: {
        "ark-accordion-down": "ark-accordion-down 0.2s ease-out",
        "ark-accordion-up": "ark-accordion-up 0.2s ease-out",
      },
    },
  },
};
export default plugin(function ({ config }) {
    config();
}, defaultCofig);



================================================
FILE: src/components/park/ui/accordion.tsx
================================================
import { cn } from '@/components/shadcn/lib/utils';
import { Accordion as AccordionPrimitive } from '@ark-ui/react/accordion'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'
import * as React from "react";
import { ChevronDown } from 'lucide-react';

const accordion = tv(
  {
    base: "accordion",
    defaultVariants: { size: "md" },
    slots: {
      root: " p-2 flex flex-col items-center gap-1 ",
      item: "accordion__item w-full",
      itemTrigger:
        `w-full flex items-center justify-between py-4 
        font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180`,
      itemContent: "accordion__itemContent",
      itemIndicator: "accordion__itemIndicator",
    },
    variants: {
      size: {
        md: {
          root: "accordion__root--size_md",
          item: "accordion__item--size_md",
          itemTrigger: "accordion__itemTrigger--size_md",
          itemContent: "accordion__itemContent--size_md",
          itemIndicator: "accordion__itemIndicator--size_md",
        },
      },
    },
  },
  { twMerge: false },
);

const { withProvider, withContext } = createStyleContext(accordion)

export interface RootProps
  extends AccordionPrimitive.RootProps,
    VariantProps<typeof accordion> {}
export const Root = withProvider<HTMLDivElement, RootProps>(AccordionPrimitive.Root, 'root')

export const ItemContent = withContext<HTMLDivElement, AccordionPrimitive.ItemContentProps>(
  AccordionPrimitive.ItemContent,
  'itemContent',
)

export const ItemIndicator = withContext<HTMLDivElement, AccordionPrimitive.ItemIndicatorProps>(
  AccordionPrimitive.ItemIndicator,
  'itemIndicator',
)

export const Item = withContext<HTMLDivElement, AccordionPrimitive.ItemProps>(AccordionPrimitive.Item, 'item')

export const ItemTrigger = withContext<HTMLButtonElement, AccordionPrimitive.ItemTriggerProps>(
  AccordionPrimitive.ItemTrigger,
  'itemTrigger',
)

export {
  AccordionContext as Context,
  AccordionItemContext as ItemContext,
  type AccordionContextProps as ContextProps,
  type AccordionItemContextProps as ItemContextProps,
} from '@ark-ui/react/accordion'

export type {
  AccordionFocusChangeDetails as FocusChangeDetails,
  AccordionValueChangeDetails as ValueChangeDetails,
} from '@ark-ui/react/accordion'



const Accordion = AccordionPrimitive.Root;
const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
));
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.ItemTrigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.ItemTrigger>
>(({ className, children, ...props }, ref) => (

    <AccordionPrimitive.ItemTrigger
      ref={ref}
      className={cn(
        "w-full flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.ItemTrigger>

));
AccordionTrigger.displayName = AccordionPrimitive.ItemTrigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.ItemContent>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.ItemContent>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.ItemContent
    ref={ref}
    className={`data-[state=close]:animate-ark-accordion-up data-[state=open]:animate-ark-accordion-down
       overflow-hidden text-sm transition-all`}
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.ItemContent>
));

AccordionContent.displayName = AccordionPrimitive.ItemContent.displayName;
export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };



================================================
FILE: src/components/park/ui/alert.tsx
================================================
import { type HTMLArkProps, ark } from '@ark-ui/react/factory'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const alert = tv(
  {
    base: 'alert',
    slots: {
      root: 'alert__root',
      content: 'alert__content',
      description: 'alert__description',
      icon: 'alert__icon',
      title: 'alert__title',
    },
    variants: {},
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(alert)

export interface RootProps extends HTMLArkProps<'div'>, VariantProps<typeof alert> {}

export const Root = withProvider<HTMLDivElement, RootProps>(ark.div, 'root')

export const Content = withContext<HTMLDivElement, HTMLArkProps<'div'>>(ark.div, 'content')

export const Description = withContext<HTMLDivElement, HTMLArkProps<'div'>>(ark.div, 'description')

export const Icon = withContext<HTMLOrSVGElement, HTMLArkProps<'svg'>>(ark.svg, 'icon')

export const Title = withContext<HTMLHeadingElement, HTMLArkProps<'h5'>>(ark.h5, 'title')



================================================
FILE: src/components/park/ui/avatar.tsx
================================================
import { Avatar as ArkAvatar, type AvatarRootProps } from '@ark-ui/react/avatar'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface AvatarProps extends AvatarRootProps, AvatarVariantProps {
  name?: string
  src?: string
}

export const Avatar = forwardRef<HTMLDivElement, AvatarProps>((props, ref) => {
  const { size, className, name, src, ...rootProps } = props
  const { root, fallback, image } = avatar({ size })

  return (
    <ArkAvatar.Root ref={ref} className={root({ className })} {...rootProps}>
      <ArkAvatar.Fallback className={fallback()}>
        {getInitials(name) || <UserIcon />}
      </ArkAvatar.Fallback>
      <ArkAvatar.Image className={image()} src={src} alt={name} />
    </ArkAvatar.Root>
  )
})

Avatar.displayName = 'Avatar'

type AvatarVariantProps = VariantProps<typeof avatar>

const avatar = tv(
  {
    base: 'avatar',
    defaultVariants: { size: 'md' },
    slots: { root: 'avatar__root', image: 'avatar__image', fallback: 'avatar__fallback' },
    variants: {
      size: {
        xs: {
          root: 'avatar__root--size_xs',
          image: 'avatar__image--size_xs',
          fallback: 'avatar__fallback--size_xs',
        },
        sm: {
          root: 'avatar__root--size_sm',
          image: 'avatar__image--size_sm',
          fallback: 'avatar__fallback--size_sm',
        },
        md: {
          root: 'avatar__root--size_md',
          image: 'avatar__image--size_md',
          fallback: 'avatar__fallback--size_md',
        },
        lg: {
          root: 'avatar__root--size_lg',
          image: 'avatar__image--size_lg',
          fallback: 'avatar__fallback--size_lg',
        },
        xl: {
          root: 'avatar__root--size_xl',
          image: 'avatar__image--size_xl',
          fallback: 'avatar__fallback--size_xl',
        },
        '2xl': {
          root: 'avatar__root--size_2xl',
          image: 'avatar__image--size_2xl',
          fallback: 'avatar__fallback--size_2xl',
        },
      },
    },
  },
  { twMerge: false },
)

const UserIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
  >
    <title>User</title>
    <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" />
    <circle cx="12" cy="7" r="4" />
  </svg>
)

const getInitials = (name = '') =>
  name
    .split(' ')
    .map((part) => part[0])
    .splice(0, 2)
    .join('')
    .toUpperCase()



================================================
FILE: src/components/park/ui/badge.tsx
================================================
import { type HTMLArkProps, ark } from '@ark-ui/react/factory'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface BadgeProps extends BadgeVariantProps, HTMLArkProps<'div'> {}

export const Badge = forwardRef<HTMLDivElement, BadgeProps>((props, ref) => {
  const { size, variant, className, ...rest } = props
  return <ark.div className={badge({ size, variant, className })} ref={ref} {...rest} />
})

Badge.displayName = 'Badge'

type BadgeVariantProps = VariantProps<typeof badge>

const badge = tv(
  {
    base: 'badge',
    defaultVariants: { variant: 'subtle', size: 'md' },
    variants: {
      variant: {
        solid: 'badge--variant_solid',
        subtle: 'badge--variant_subtle',
        outline: 'badge--variant_outline',
      },
      size: { sm: 'badge--size_sm', md: 'badge--size_md', lg: 'badge--size_lg' },
    },
  },
  { twMerge: false },
)



================================================
FILE: src/components/park/ui/button.tsx
================================================
import { type HTMLArkProps, ark } from '@ark-ui/react/factory'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface ButtonProps extends ButtonVariantProps, HTMLArkProps<'button'> {}

export const Button = forwardRef<HTMLButtonElement, ButtonProps>((props, ref) => {
  const { size, variant, className, ...buttonProps } = props
  return <ark.button className={button({ size, variant, className })} ref={ref} {...buttonProps} />
})

Button.displayName = 'Button'

type ButtonVariantProps = VariantProps<typeof button>

const button = tv(
  {
    base: 'button',
    defaultVariants: { variant: 'solid', size: 'md' },
    variants: {
      variant: {
        solid: 'btn btn-primary',
        outline: 'btn btn-outline',
        ghost: 'btn btn-ghost',
        link: 'btn btn-link',
        subtle: 'btn',
      },
      size: {
      sm: 'btn-sm',
      md: '',
      lg: 'btn-lg'
    },
    },
  },
  { twMerge: false },
)



================================================
FILE: src/components/park/ui/card.tsx
================================================
import { type HTMLArkProps, ark } from '@ark-ui/react/factory'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const card = tv(
  {
    base: 'card',
    slots: {
      root: 'card__root',
      header: 'card__header',
      body: 'card__body',
      footer: 'card__footer',
      title: 'card__title',
      description: 'card__description',
    },
    variants: {},
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(card)

export interface RootProps extends HTMLArkProps<'div'>, VariantProps<typeof card> {}
export const Root = withProvider<HTMLDivElement, RootProps>(ark.div, 'root')

export const Body = withContext<HTMLDivElement, HTMLArkProps<'div'>>(ark.div, 'body')

export const Description = withContext<HTMLDivElement, HTMLArkProps<'div'>>(ark.div, 'description')

export const Footer = withContext<HTMLDivElement, HTMLArkProps<'div'>>(ark.div, 'footer')

export const Header = withContext<HTMLDivElement, HTMLArkProps<'div'>>(ark.div, 'header')

export const Title = withContext<HTMLHeadingElement, HTMLArkProps<'h3'>>(ark.h3, 'title')



================================================
FILE: src/components/park/ui/carousel.tsx
================================================
import { Carousel } from '@ark-ui/react/carousel'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const carousel = tv(
  {
    base: 'carousel',
    defaultVariants: { size: 'md' },
    slots: {
      root: 'carousel__root',
      viewport: 'carousel__viewport',
      itemGroup: 'carousel__itemGroup',
      item: 'carousel__item',
      nextTrigger: 'carousel__nextTrigger',
      prevTrigger: 'carousel__prevTrigger',
      indicatorGroup: 'carousel__indicatorGroup',
      indicator: 'carousel__indicator',
      control: 'carousel__control',
    },
    variants: {
      size: {
        sm: {
          root: 'carousel__root--size_sm',
          viewport: 'carousel__viewport--size_sm',
          itemGroup: 'carousel__itemGroup--size_sm',
          item: 'carousel__item--size_sm',
          nextTrigger: 'carousel__nextTrigger--size_sm',
          prevTrigger: 'carousel__prevTrigger--size_sm',
          indicatorGroup: 'carousel__indicatorGroup--size_sm',
          indicator: 'carousel__indicator--size_sm',
          control: 'carousel__control--size_sm',
        },
        md: {
          root: 'carousel__root--size_md',
          viewport: 'carousel__viewport--size_md',
          itemGroup: 'carousel__itemGroup--size_md',
          item: 'carousel__item--size_md',
          nextTrigger: 'carousel__nextTrigger--size_md',
          prevTrigger: 'carousel__prevTrigger--size_md',
          indicatorGroup: 'carousel__indicatorGroup--size_md',
          indicator: 'carousel__indicator--size_md',
          control: 'carousel__control--size_md',
        },
      },
    },
  },
  { twMerge: false },
)

const { withProvider, withContext } = createStyleContext(carousel)

export interface RootProps extends Carousel.RootProps, VariantProps<typeof carousel> {}
export const Root = withProvider<HTMLDivElement, RootProps>(Carousel.Root, 'root')

export const Control = withContext<HTMLDivElement, Carousel.ControlProps>(
  Carousel.Control,
  'control',
)

export const IndicatorGroup = withContext<HTMLDivElement, Carousel.IndicatorGroupProps>(
  Carousel.IndicatorGroup,
  'indicatorGroup',
)

export const Indicator = withContext<HTMLButtonElement, Carousel.IndicatorProps>(
  Carousel.Indicator,
  'indicator',
)

export const ItemGroup = withContext<HTMLDivElement, Carousel.ItemGroupProps>(
  Carousel.ItemGroup,
  'itemGroup',
)

export const Item = withContext<HTMLDivElement, Carousel.ItemProps>(Carousel.Item, 'item')

export const NextTrigger = withContext<HTMLButtonElement, Carousel.NextTriggerProps>(
  Carousel.NextTrigger,
  'nextTrigger',
)

export const PrevTrigger = withContext<HTMLButtonElement, Carousel.PrevTriggerProps>(
  Carousel.PrevTrigger,
  'prevTrigger',
)

export const Viewport = withContext<HTMLDivElement, Carousel.ViewportProps>(
  Carousel.Viewport,
  'viewport',
)

export {
  CarouselContext as Context,
  type CarouselContextProps as ContextProps,
} from '@ark-ui/react/carousel'



================================================
FILE: src/components/park/ui/checkbox.tsx
================================================
import { Checkbox as ArkCheckbox, type CheckboxRootProps } from '@ark-ui/react/checkbox'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface CheckboxProps extends CheckboxRootProps, CheckboxVariantProps {}

export const Checkbox = forwardRef<HTMLLabelElement, CheckboxProps>((props, ref) => {
  const { className, size, children, ...rootProps } = props
  const { root, control, label, indicator } = checkbox({ size })

  return (
    <ArkCheckbox.Root ref={ref} className={root({ className })} {...rootProps}>
      <ArkCheckbox.Control className={control()}>
        <ArkCheckbox.Indicator className={indicator()}>
          <CheckIcon />
        </ArkCheckbox.Indicator>
        <ArkCheckbox.Indicator indeterminate className={indicator()}>
          <MinusIcon />
        </ArkCheckbox.Indicator>
      </ArkCheckbox.Control>
      {children && <ArkCheckbox.Label className={label()}>{children}</ArkCheckbox.Label>}
      <ArkCheckbox.HiddenInput />
    </ArkCheckbox.Root>
  )
})

Checkbox.displayName = 'Checkbox'

type CheckboxVariantProps = VariantProps<typeof checkbox>

const checkbox = tv(
  {
    base: 'checkbox',
    defaultVariants: { size: 'md' },
    slots: {
      root: 'checkbox__root',
      label: 'checkbox__label',
      control: 'checkbox__control',
      indicator: 'checkbox__indicator',
    },
    variants: {
      size: {
        sm: {
          root: 'checkbox__root--size_sm',
          label: 'checkbox__label--size_sm',
          control: 'checkbox__control--size_sm',
          indicator: 'checkbox__indicator--size_sm',
        },
        md: {
          root: 'checkbox__root--size_md',
          label: 'checkbox__label--size_md',
          control: 'checkbox__control--size_md',
          indicator: 'checkbox__indicator--size_md',
        },
        lg: {
          root: 'checkbox__root--size_lg',
          label: 'checkbox__label--size_lg',
          control: 'checkbox__control--size_lg',
          indicator: 'checkbox__indicator--size_lg',
        },
      },
    },
  },
  { twMerge: false },
)

const CheckIcon = () => (
  <svg viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
    <title>Check</title>
    <path
      d="M11.6666 3.5L5.24992 9.91667L2.33325 7"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
)

const MinusIcon = () => (
  <svg viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
    <title>Minus</title>
    <path
      d="M2.91675 7H11.0834"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
)



================================================
FILE: src/components/park/ui/code.tsx
================================================
import { type HTMLArkProps, ark } from '@ark-ui/react/factory'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface CodeProps extends CodeVariantProps, HTMLArkProps<'code'> {}

export const Code = forwardRef<HTMLElement, CodeProps>((props, ref) => {
  const { size, variant, className, ...rest } = props
  return <ark.code className={code({ size, variant, className })} ref={ref} {...rest} />
})

Code.displayName = 'Code'

type CodeVariantProps = VariantProps<typeof code>

const code = tv(
  {
    base: 'code',
    defaultVariants: { size: 'md', variant: 'outline' },
    variants: {
      variant: { outline: 'code--variant_outline', ghost: 'code--variant_ghost' },
      size: { sm: 'code--size_sm', md: 'code--size_md', lg: 'code--size_lg' },
    },
  },
  { twMerge: false },
)



================================================
FILE: src/components/park/ui/collapsible.tsx
================================================
import { Collapsible } from '@ark-ui/react/collapsible'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const collapsible = tv(
  {
    base: 'collapsible',
    slots: {
      root: 'collapsible__root',
      trigger: 'collapsible__trigger',
      content: 'collapsible__content',
    },
    variants: {},
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(collapsible)

export interface RootProps extends Collapsible.RootProps, VariantProps<typeof collapsible> {}
export const Root = withProvider<HTMLDivElement, RootProps>(Collapsible.Root, 'root')

export const Content = withContext<HTMLDivElement, Collapsible.ContentProps>(
  Collapsible.Content,
  'content',
)

export const Trigger = withContext<HTMLButtonElement, Collapsible.TriggerProps>(
  Collapsible.Trigger,
  'trigger',
)

export {
  CollapsibleContext as Context,
  type CollapsibleContextProps as ContextProps,
} from '@ark-ui/react/collapsible'



================================================
FILE: src/components/park/ui/color-picker.tsx
================================================
import { ColorPicker } from '@ark-ui/react/color-picker'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const colorPicker = tv(
  {
    base: 'colorPicker',
    slots: {
      root: 'colorPicker__root',
      label: 'colorPicker__label',
      control: 'colorPicker__control',
      trigger: 'colorPicker__trigger',
      positioner: 'colorPicker__positioner',
      content: 'colorPicker__content',
      area: 'colorPicker__area',
      areaThumb: 'colorPicker__areaThumb',
      areaBackground: 'colorPicker__areaBackground',
      channelSlider: 'colorPicker__channelSlider',
      channelSliderTrack: 'colorPicker__channelSliderTrack',
      channelSliderThumb: 'colorPicker__channelSliderThumb',
      channelInput: 'colorPicker__channelInput',
      transparencyGrid: 'colorPicker__transparencyGrid',
      swatchGroup: 'colorPicker__swatchGroup',
      swatchTrigger: 'colorPicker__swatchTrigger',
      swatchIndicator: 'colorPicker__swatchIndicator',
      swatch: 'colorPicker__swatch',
      eyeDropperTrigger: 'colorPicker__eyeDropperTrigger',
      formatTrigger: 'colorPicker__formatTrigger',
      formatSelect: 'colorPicker__formatSelect',
      valueText: 'colorPicker__valueText',
      view: 'colorPicker__view',
    },
    variants: {},
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(colorPicker)

export interface RootProps extends ColorPicker.RootProps, VariantProps<typeof colorPicker> {}
export const Root = withProvider<HTMLDivElement, RootProps>(ColorPicker.Root, 'root')

export const AreaBackground = withContext<HTMLDivElement, ColorPicker.AreaBackgroundProps>(
  ColorPicker.AreaBackground,
  'areaBackground',
)

export const Area = withContext<HTMLDivElement, ColorPicker.AreaProps>(ColorPicker.Area, 'area')

export const AreaThumb = withContext<HTMLDivElement, ColorPicker.AreaThumbProps>(
  ColorPicker.AreaThumb,
  'areaThumb',
)

export const ChannelInput = withContext<HTMLInputElement, ColorPicker.ChannelInputProps>(
  ColorPicker.ChannelInput,
  'channelInput',
)

export const ChannelSlider = withContext<HTMLDivElement, ColorPicker.ChannelSliderProps>(
  ColorPicker.ChannelSlider,
  'channelSlider',
)

export const ChannelSliderThumb = withContext<HTMLDivElement, ColorPicker.ChannelSliderThumbProps>(
  ColorPicker.ChannelSliderThumb,
  'channelSliderThumb',
)

export const ChannelSliderTrack = withContext<HTMLDivElement, ColorPicker.ChannelSliderTrackProps>(
  ColorPicker.ChannelSliderTrack,
  'channelSliderTrack',
)

export const Content = withContext<HTMLDivElement, ColorPicker.ContentProps>(
  ColorPicker.Content,
  'content',
)

export const Control = withContext<HTMLDivElement, ColorPicker.ControlProps>(
  ColorPicker.Control,
  'control',
)

export const EyeDropperTrigger = withContext<HTMLButtonElement, ColorPicker.EyeDropperTriggerProps>(
  ColorPicker.EyeDropperTrigger,
  'eyeDropperTrigger',
)

export const FormatSelect = withContext<HTMLSelectElement, ColorPicker.FormatSelectProps>(
  ColorPicker.FormatSelect,
  'formatSelect',
)

export const FormatTrigger = withContext<HTMLButtonElement, ColorPicker.FormatTriggerProps>(
  ColorPicker.FormatTrigger,
  'formatTrigger',
)

export const Label = withContext<HTMLLabelElement, ColorPicker.LabelProps>(
  ColorPicker.Label,
  'label',
)

export const Positioner = withContext<HTMLDivElement, ColorPicker.PositionerProps>(
  ColorPicker.Positioner,
  'positioner',
)

export const SwatchGroup = withContext<HTMLDivElement, ColorPicker.SwatchGroupProps>(
  ColorPicker.SwatchGroup,
  'swatchGroup',
)

export const SwatchIndicator = withContext<HTMLDivElement, ColorPicker.SwatchIndicatorProps>(
  ColorPicker.SwatchIndicator,
  'swatchIndicator',
)

export const Swatch = withContext<HTMLDivElement, ColorPicker.SwatchProps>(
  ColorPicker.Swatch,
  'swatch',
)

export const SwatchTrigger = withContext<HTMLButtonElement, ColorPicker.SwatchTriggerProps>(
  ColorPicker.SwatchTrigger,
  'swatchTrigger',
)

export const TransparencyGrid = withContext<HTMLDivElement, ColorPicker.TransparencyGridProps>(
  ColorPicker.TransparencyGrid,
  'transparencyGrid',
)

export const Trigger = withContext<HTMLButtonElement, ColorPicker.TriggerProps>(
  ColorPicker.Trigger,
  'trigger',
)

export const ValueText = withContext<HTMLDivElement, ColorPicker.ValueTextProps>(
  ColorPicker.ValueText,
  'valueText',
)

export const View = withContext<HTMLDivElement, ColorPicker.ViewProps>(ColorPicker.View, 'view')

export {
  ColorPickerContext as Context,
  ColorPickerHiddenInput as HiddenInput,
  type ColorPickerContextProps as ContextProps,
  type ColorPickerHiddenInputProps as HiddenInputProps,
} from '@ark-ui/react/color-picker'



================================================
FILE: src/components/park/ui/combobox.tsx
================================================
import { Combobox } from '@ark-ui/react/combobox'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const combobox = tv(
  {
    base: 'combobox',
    defaultVariants: { size: 'md' },
    slots: {
      root: 'combobox__root',
      label: 'combobox__label',
      input: 'combobox__input',
      positioner: 'combobox__positioner',
      control: 'combobox__control',
      trigger: 'combobox__trigger',
      content: 'combobox__content',
      clearTrigger: 'combobox__clearTrigger',
      item: 'combobox__item',
      itemText: 'combobox__itemText',
      itemIndicator: 'combobox__itemIndicator',
      itemGroup: 'combobox__itemGroup',
      itemGroupLabel: 'combobox__itemGroupLabel',
    },
    variants: {
      size: {
        sm: {
          root: 'combobox__root--size_sm',
          label: 'combobox__label--size_sm',
          input: 'combobox__input--size_sm',
          positioner: 'combobox__positioner--size_sm',
          control: 'combobox__control--size_sm',
          trigger: 'combobox__trigger--size_sm',
          content: 'combobox__content--size_sm',
          clearTrigger: 'combobox__clearTrigger--size_sm',
          item: 'combobox__item--size_sm',
          itemText: 'combobox__itemText--size_sm',
          itemIndicator: 'combobox__itemIndicator--size_sm',
          itemGroup: 'combobox__itemGroup--size_sm',
          itemGroupLabel: 'combobox__itemGroupLabel--size_sm',
        },
        md: {
          root: 'combobox__root--size_md',
          label: 'combobox__label--size_md',
          input: 'combobox__input--size_md',
          positioner: 'combobox__positioner--size_md',
          control: 'combobox__control--size_md',
          trigger: 'combobox__trigger--size_md',
          content: 'combobox__content--size_md',
          clearTrigger: 'combobox__clearTrigger--size_md',
          item: 'combobox__item--size_md',
          itemText: 'combobox__itemText--size_md',
          itemIndicator: 'combobox__itemIndicator--size_md',
          itemGroup: 'combobox__itemGroup--size_md',
          itemGroupLabel: 'combobox__itemGroupLabel--size_md',
        },
        lg: {
          root: 'combobox__root--size_lg',
          label: 'combobox__label--size_lg',
          input: 'combobox__input--size_lg',
          positioner: 'combobox__positioner--size_lg',
          control: 'combobox__control--size_lg',
          trigger: 'combobox__trigger--size_lg',
          content: 'combobox__content--size_lg',
          clearTrigger: 'combobox__clearTrigger--size_lg',
          item: 'combobox__item--size_lg',
          itemText: 'combobox__itemText--size_lg',
          itemIndicator: 'combobox__itemIndicator--size_lg',
          itemGroup: 'combobox__itemGroup--size_lg',
          itemGroupLabel: 'combobox__itemGroupLabel--size_lg',
        },
      },
    },
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(combobox)

export interface RootProps
  extends Combobox.RootProps<Combobox.CollectionItem>,
    VariantProps<typeof combobox> {}
export const Root = withProvider<HTMLDivElement, RootProps>(Combobox.Root, 'root')

export const ClearTrigger = withContext<HTMLButtonElement, Combobox.ClearTriggerProps>(
  Combobox.ClearTrigger,
  'clearTrigger',
)

export const Content = withContext<HTMLDivElement, Combobox.ContentProps>(
  Combobox.Content,
  'content',
)

export const Control = withContext<HTMLDivElement, Combobox.ControlProps>(
  Combobox.Control,
  'control',
)

export const Input = withContext<HTMLInputElement, Combobox.InputProps>(Combobox.Input, 'input')

export const ItemGroupLabel = withContext<HTMLDivElement, Combobox.ItemGroupLabelProps>(
  Combobox.ItemGroupLabel,
  'itemGroupLabel',
)

export const ItemGroup = withContext<HTMLDivElement, Combobox.ItemGroupProps>(
  Combobox.ItemGroup,
  'itemGroup',
)

export const ItemIndicator = withContext<HTMLDivElement, Combobox.ItemIndicatorProps>(
  Combobox.ItemIndicator,
  'itemIndicator',
)

export const Item = withContext<HTMLDivElement, Combobox.ItemProps>(Combobox.Item, 'item')

export const ItemText = withContext<HTMLDivElement, Combobox.ItemTextProps>(
  Combobox.ItemText,
  'itemText',
)

export const Label = withContext<HTMLLabelElement, Combobox.LabelProps>(Combobox.Label, 'label')

export const Positioner = withContext<HTMLDivElement, Combobox.PositionerProps>(
  Combobox.Positioner,
  'positioner',
)

export const Trigger = withContext<HTMLButtonElement, Combobox.TriggerProps>(
  Combobox.Trigger,
  'trigger',
)

export {
  ComboboxContext as Context,
  type ComboboxContextProps as ContextProps,
} from '@ark-ui/react/combobox'

export type {
  ComboboxHighlightChangeDetails as HighlightChangeDetails,
  ComboboxInputValueChangeDetails as InputValueChangeDetails,
  ComboboxOpenChangeDetails as OpenChangeDetails,
  ComboboxValueChangeDetails as ValueChangeDetails,
} from '@ark-ui/react/combobox'



================================================
FILE: src/components/park/ui/date-picker.tsx
================================================
import { DatePicker } from '@ark-ui/react/date-picker'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const datePicker = tv(
  {
    base: 'datePicker',
    slots: {
      root: 'datePicker__root',
      label: 'datePicker__label',
      clearTrigger: 'datePicker__clearTrigger',
      content: 'datePicker__content',
      control: 'datePicker__control',
      input: 'datePicker__input',
      monthSelect: 'datePicker__monthSelect',
      nextTrigger: 'datePicker__nextTrigger',
      positioner: 'datePicker__positioner',
      presetTrigger: 'datePicker__presetTrigger',
      prevTrigger: 'datePicker__prevTrigger',
      rangeText: 'datePicker__rangeText',
      table: 'datePicker__table',
      tableBody: 'datePicker__tableBody',
      tableCell: 'datePicker__tableCell',
      tableCellTrigger: 'datePicker__tableCellTrigger',
      tableHead: 'datePicker__tableHead',
      tableHeader: 'datePicker__tableHeader',
      tableRow: 'datePicker__tableRow',
      trigger: 'datePicker__trigger',
      viewTrigger: 'datePicker__viewTrigger',
      viewControl: 'datePicker__viewControl',
      yearSelect: 'datePicker__yearSelect',
      view: 'datePicker__view',
    },
    variants: {},
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(datePicker)

export interface RootProps extends DatePicker.RootProps, VariantProps<typeof datePicker> {}
export const Root = withProvider<HTMLDivElement, RootProps>(DatePicker.Root, 'root')

export const ClearTrigger = withContext<HTMLButtonElement, DatePicker.ClearTriggerProps>(
  DatePicker.ClearTrigger,
  'clearTrigger',
)

export const Content = withContext<HTMLDivElement, DatePicker.ContentProps>(
  DatePicker.Content,
  'content',
)

export const Control = withContext<HTMLDivElement, DatePicker.ControlProps>(
  DatePicker.Control,
  'control',
)

export const Input = withContext<HTMLInputElement, DatePicker.InputProps>(DatePicker.Input, 'input')

export const Label = withContext<HTMLLabelElement, DatePicker.LabelProps>(DatePicker.Label, 'label')

export const MonthSelect = withContext<HTMLSelectElement, DatePicker.MonthSelectProps>(
  DatePicker.MonthSelect,
  'monthSelect',
)

export const NextTrigger = withContext<HTMLButtonElement, DatePicker.NextTriggerProps>(
  DatePicker.NextTrigger,
  'nextTrigger',
)

export const Positioner = withContext<HTMLDivElement, DatePicker.PositionerProps>(
  DatePicker.Positioner,
  'positioner',
)

export const PresetTrigger = withContext<HTMLButtonElement, DatePicker.PresetTriggerProps>(
  DatePicker.PresetTrigger,
  'presetTrigger',
)

export const PrevTrigger = withContext<HTMLButtonElement, DatePicker.PrevTriggerProps>(
  DatePicker.PrevTrigger,
  'prevTrigger',
)

export const RangeText = withContext<HTMLDivElement, DatePicker.RangeTextProps>(
  DatePicker.RangeText,
  'rangeText',
)

export const TableBody = withContext<HTMLTableSectionElement, DatePicker.TableBodyProps>(
  DatePicker.TableBody,
  'tableBody',
)

export const TableCell = withContext<HTMLTableCellElement, DatePicker.TableCellProps>(
  DatePicker.TableCell,
  'tableCell',
)

export const TableCellTrigger = withContext<HTMLButtonElement, DatePicker.TableCellTriggerProps>(
  DatePicker.TableCellTrigger,
  'tableCellTrigger',
)

export const TableHead = withContext<HTMLTableSectionElement, DatePicker.TableHeadProps>(
  DatePicker.TableHead,
  'tableHead',
)

export const TableHeader = withContext<HTMLTableCellElement, DatePicker.TableHeaderProps>(
  DatePicker.TableHeader,
  'tableHeader',
)

export const Table = withContext<HTMLTableElement, DatePicker.TableProps>(DatePicker.Table, 'table')

export const TableRow = withContext<HTMLTableRowElement, DatePicker.TableRowProps>(
  DatePicker.TableRow,
  'tableRow',
)

export const Trigger = withContext<HTMLButtonElement, DatePicker.TriggerProps>(
  DatePicker.Trigger,
  'trigger',
)

export const ViewControl = withContext<HTMLDivElement, DatePicker.ViewControlProps>(
  DatePicker.ViewControl,
  'viewControl',
)

export const View = withContext<HTMLDivElement, DatePicker.ViewProps>(DatePicker.View, 'view')

export const ViewTrigger = withContext<HTMLButtonElement, DatePicker.ViewTriggerProps>(
  DatePicker.ViewTrigger,
  'viewTrigger',
)

export const YearSelect = withContext<HTMLSelectElement, DatePicker.YearSelectProps>(
  DatePicker.YearSelect,
  'yearSelect',
)

export {
  DatePickerContext as Context,
  type DatePickerContextProps as ContextProps,
} from '@ark-ui/react/date-picker'



================================================
FILE: src/components/park/ui/dialog.tsx
================================================
import { Dialog } from '@ark-ui/react/dialog'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const dialog = tv(
  {
    base: 'dialog',
    slots: {
      trigger: 'dialog__trigger',
      backdrop: 'dialog__backdrop',
      positioner: 'dialog__positioner',
      content: 'dialog__content',
      title: 'dialog__title',
      description: 'dialog__description',
      closeTrigger: 'dialog__closeTrigger',
    },
    variants: {},
  },
  { twMerge: false },
)
const { withRootProvider, withContext } = createStyleContext(dialog)

export interface RootProps extends Dialog.RootProps, VariantProps<typeof dialog> {}
export const Root = withRootProvider<RootProps>(Dialog.Root)

export const Backdrop = withContext<HTMLDivElement, Dialog.BackdropProps>(
  Dialog.Backdrop,
  'backdrop',
)

export const CloseTrigger = withContext<HTMLButtonElement, Dialog.CloseTriggerProps>(
  Dialog.CloseTrigger,
  'closeTrigger',
)

export const Content = withContext<HTMLDivElement, Dialog.ContentProps>(Dialog.Content, 'content')

export const Description = withContext<HTMLParagraphElement, Dialog.DescriptionProps>(
  Dialog.Description,
  'description',
)

export const Positioner = withContext<HTMLDivElement, Dialog.PositionerProps>(
  Dialog.Positioner,
  'positioner',
)

export const Title = withContext<HTMLHeadingElement, Dialog.TitleProps>(Dialog.Title, 'title')

export const Trigger = withContext<HTMLButtonElement, Dialog.TriggerProps>(
  Dialog.Trigger,
  'trigger',
)

export {
  DialogContext as Context,
  type DialogContextProps as ContextProps,
} from '@ark-ui/react/dialog'



================================================
FILE: src/components/park/ui/drawer.tsx
================================================
import { Dialog as Drawer } from '@ark-ui/react/dialog'
import { type HTMLArkProps, ark } from '@ark-ui/react/factory'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const drawer = tv(
  {
    base: 'drawer',
    defaultVariants: { variant: 'right' },
    slots: {
      trigger: 'drawer__trigger',
      backdrop: 'drawer__backdrop',
      positioner: 'drawer__positioner',
      content: 'drawer__content',
      title: 'drawer__title',
      description: 'drawer__description',
      closeTrigger: 'drawer__closeTrigger',
      header: 'drawer__header',
      body: 'drawer__body',
      footer: 'drawer__footer',
    },
    variants: {
      variant: {
        left: {
          trigger: 'drawer__trigger--variant_left',
          backdrop: 'drawer__backdrop--variant_left',
          positioner: 'drawer__positioner--variant_left',
          content: 'drawer__content--variant_left',
          title: 'drawer__title--variant_left',
          description: 'drawer__description--variant_left',
          closeTrigger: 'drawer__closeTrigger--variant_left',
          header: 'drawer__header--variant_left',
          body: 'drawer__body--variant_left',
          footer: 'drawer__footer--variant_left',
        },
        right: {
          trigger: 'drawer__trigger--variant_right',
          backdrop: 'drawer__backdrop--variant_right',
          positioner: 'drawer__positioner--variant_right',
          content: 'drawer__content--variant_right',
          title: 'drawer__title--variant_right',
          description: 'drawer__description--variant_right',
          closeTrigger: 'drawer__closeTrigger--variant_right',
          header: 'drawer__header--variant_right',
          body: 'drawer__body--variant_right',
          footer: 'drawer__footer--variant_right',
        },
      },
    },
  },
  { twMerge: false },
)
const { withRootProvider, withContext } = createStyleContext(drawer)

export interface RootProps extends Drawer.RootProps, VariantProps<typeof drawer> {}
export const Root = withRootProvider<RootProps>(Drawer.Root)

export const Backdrop = withContext<HTMLDivElement, Drawer.BackdropProps>(
  Drawer.Backdrop,
  'backdrop',
)

export const Body = withContext<HTMLDivElement, HTMLArkProps<'div'>>(ark.div, 'body')

export const CloseTrigger = withContext<HTMLButtonElement, Drawer.CloseTriggerProps>(
  Drawer.CloseTrigger,
  'closeTrigger',
)

export const Content = withContext<HTMLDivElement, Drawer.ContentProps>(Drawer.Content, 'content')

export const Description = withContext<HTMLParagraphElement, Drawer.DescriptionProps>(
  Drawer.Description,
  'description',
)

export const Footer = withContext<HTMLDivElement, HTMLArkProps<'div'>>(ark.div, 'footer')

export const Header = withContext<HTMLDivElement, HTMLArkProps<'div'>>(ark.div, 'header')

export const Positioner = withContext<HTMLDivElement, Drawer.PositionerProps>(
  Drawer.Positioner,
  'positioner',
)

export const Title = withContext<HTMLHeadingElement, Drawer.TitleProps>(Drawer.Title, 'title')

export const Trigger = withContext<HTMLButtonElement, Drawer.TriggerProps>(
  Drawer.Trigger,
  'trigger',
)

export {
  DialogContext as Context,
  type DialogContextProps as ContextProps,
} from '@ark-ui/react/dialog'



================================================
FILE: src/components/park/ui/editable.tsx
================================================
import { Editable } from '@ark-ui/react/editable'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const editable = tv(
  {
    base: 'editable',
    slots: {
      root: 'editable__root',
      area: 'editable__area',
      label: 'editable__label',
      preview: 'editable__preview',
      input: 'editable__input',
      editTrigger: 'editable__editTrigger',
      submitTrigger: 'editable__submitTrigger',
      cancelTrigger: 'editable__cancelTrigger',
      control: 'editable__control',
    },
    variants: {},
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(editable)

export interface RootProps extends Editable.RootProps, VariantProps<typeof editable> {}
export const Root = withProvider<HTMLDivElement, RootProps>(Editable.Root, 'root')

export const Area = withContext<HTMLDivElement, Editable.AreaProps>(Editable.Area, 'area')

export const CancelTrigger = withContext<HTMLButtonElement, Editable.CancelTriggerProps>(
  Editable.CancelTrigger,
  'cancelTrigger',
)

export const Control = withContext<HTMLDivElement, Editable.ControlProps>(
  Editable.Control,
  'control',
)

export const EditTrigger = withContext<HTMLButtonElement, Editable.EditTriggerProps>(
  Editable.EditTrigger,
  'editTrigger',
)

export const Input = withContext<HTMLInputElement, Editable.InputProps>(Editable.Input, 'input')

export const Label = withContext<HTMLLabelElement, Editable.LabelProps>(Editable.Label, 'label')

export const Preview = withContext<HTMLSpanElement, Editable.PreviewProps>(
  Editable.Preview,
  'preview',
)

export const SubmitTrigger = withContext<HTMLButtonElement, Editable.SubmitTriggerProps>(
  Editable.SubmitTrigger,
  'submitTrigger',
)

export {
  EditableContext as Context,
  type EditableContextProps as ContextProps,
} from '@ark-ui/react/editable'



================================================
FILE: src/components/park/ui/file-upload.tsx
================================================
import { FileUpload } from '@ark-ui/react/file-upload'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const fileUpload = tv(
  {
    base: 'fileUpload',
    slots: {
      root: 'fileUpload__root',
      dropzone: 'fileUpload__dropzone',
      item: 'fileUpload__item',
      itemDeleteTrigger: 'fileUpload__itemDeleteTrigger',
      itemGroup: 'fileUpload__itemGroup',
      itemName: 'fileUpload__itemName',
      itemPreview: 'fileUpload__itemPreview',
      itemPreviewImage: 'fileUpload__itemPreviewImage',
      itemSizeText: 'fileUpload__itemSizeText',
      label: 'fileUpload__label',
      trigger: 'fileUpload__trigger',
    },
    variants: {},
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(fileUpload)

export interface RootProps extends FileUpload.RootProps, VariantProps<typeof fileUpload> {}
export const Root = withProvider<HTMLDivElement, RootProps>(FileUpload.Root, 'root')

export const Dropzone = withContext<HTMLDivElement, FileUpload.DropzoneProps>(
  FileUpload.Dropzone,
  'dropzone',
)

export const ItemDeleteTrigger = withContext<HTMLButtonElement, FileUpload.ItemDeleteTriggerProps>(
  FileUpload.ItemDeleteTrigger,
  'itemDeleteTrigger',
)

export const ItemGroup = withContext<HTMLUListElement, FileUpload.ItemGroupProps>(
  FileUpload.ItemGroup,
  'itemGroup',
)

export const ItemName = withContext<HTMLDivElement, FileUpload.ItemNameProps>(
  FileUpload.ItemName,
  'itemName',
)

export const ItemPreviewImage = withContext<HTMLImageElement, FileUpload.ItemPreviewImageProps>(
  FileUpload.ItemPreviewImage,
  'itemPreviewImage',
)

export const ItemPreview = withContext<HTMLImageElement, FileUpload.ItemPreviewProps>(
  FileUpload.ItemPreview,
  'itemPreview',
)

export const Item = withContext<HTMLLIElement, FileUpload.ItemProps>(FileUpload.Item, 'item')

export const ItemSizeText = withContext<HTMLDivElement, FileUpload.ItemSizeTextProps>(
  FileUpload.ItemSizeText,
  'itemSizeText',
)

export const Label = withContext<HTMLLabelElement, FileUpload.LabelProps>(FileUpload.Label, 'label')

export const Trigger = withContext<HTMLButtonElement, FileUpload.TriggerProps>(
  FileUpload.Trigger,
  'trigger',
)

export {
  FileUploadContext as Context,
  FileUploadHiddenInput as HiddenInput,
  type FileUploadContextProps as ContextProps,
  type FileUploadHiddenInputProps as HiddenInputProps,
} from '@ark-ui/react/file-upload'



================================================
FILE: src/components/park/ui/form-label.tsx
================================================
import { type HTMLArkProps, ark } from '@ark-ui/react/factory'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface FormLabelProps extends FormLabelVariantProps, HTMLArkProps<'label'> {}

export const FormLabel = forwardRef<HTMLLabelElement, FormLabelProps>((props, ref) => {
  const { size, className, ...rest } = props
  return <ark.label className={formLabel({ size, className })} ref={ref} {...rest} />
})

FormLabel.displayName = 'FormLabel'

type FormLabelVariantProps = VariantProps<typeof formLabel>

const formLabel = tv(
  {
    base: 'formLabel',
    defaultVariants: { size: 'md' },
    variants: {
      size: {
        sm: 'formLabel--size_sm',
        md: 'formLabel--size_md',
        lg: 'formLabel--size_lg',
        xl: 'formLabel--size_xl',
      },
    },
  },
  { twMerge: false },
)



================================================
FILE: src/components/park/ui/heading.tsx
================================================
import { createElement } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

type As = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'

export type HeadingProps = {
  as?: As
} & TextVariantProps &
  JSX.IntrinsicElements[As]

export const Heading = (props: HeadingProps) => {
  const { as = 'h2', size, className, ...elementProps } = props
  const classes = text({ size, variant: 'heading', className })

  return createElement(as, {
    className: classes,
    ...elementProps,
  })
}

type TextVariantProps = VariantProps<typeof text>

const text = tv(
  {
    base: 'text',
    variants: {
      variant: { heading: 'text--variant_heading' },
      size: {
        xs: 'text--size_xs',
        sm: 'text--size_sm',
        md: 'text--size_md',
        lg: 'text--size_lg',
        xl: 'text--size_xl',
        '2xl': 'text--size_2xl',
        '3xl': 'text--size_3xl',
        '4xl': 'text--size_4xl',
        '5xl': 'text--size_5xl',
        '6xl': 'text--size_6xl',
        '7xl': 'text--size_7xl',
      },
    },
  },
  { twMerge: false },
)



================================================
FILE: src/components/park/ui/hover-card.tsx
================================================
import { HoverCard } from '@ark-ui/react/hover-card'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const hoverCard = tv(
  {
    base: 'hoverCard',
    slots: {
      arrow: 'hoverCard__arrow',
      arrowTip: 'hoverCard__arrowTip',
      trigger: 'hoverCard__trigger',
      positioner: 'hoverCard__positioner',
      content: 'hoverCard__content',
    },
    variants: {},
  },
  { twMerge: false },
)
const { withRootProvider, withContext } = createStyleContext(hoverCard)

export interface RootProps extends HoverCard.RootProps, VariantProps<typeof hoverCard> {}
export const Root = withRootProvider<RootProps>(HoverCard.Root)

export const Arrow = withContext<HTMLDivElement, HoverCard.ArrowProps>(HoverCard.Arrow, 'arrow')

export const ArrowTip = withContext<HTMLDivElement, HoverCard.ArrowTipProps>(
  HoverCard.ArrowTip,
  'arrowTip',
)

export const Content = withContext<HTMLDivElement, HoverCard.ContentProps>(
  HoverCard.Content,
  'content',
)

export const Positioner = withContext<HTMLDivElement, HoverCard.PositionerProps>(
  HoverCard.Positioner,
  'positioner',
)

export const Trigger = withContext<HTMLButtonElement, HoverCard.TriggerProps>(
  HoverCard.Trigger,
  'trigger',
)

export {
  HoverCardContext as Context,
  type HoverCardContextProps as ContextProps,
} from '@ark-ui/react/hover-card'



================================================
FILE: src/components/park/ui/icon-button.tsx
================================================
import { type HTMLArkProps, ark } from '@ark-ui/react/factory'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface IconButtonProps extends IconButtonVariantProps, HTMLArkProps<'button'> {}

export const IconButton = forwardRef<HTMLButtonElement, IconButtonProps>((props, ref) => {
  const { size, variant, className, ...rest } = props
  return <ark.button className={iconButton({ size, variant, className })} ref={ref} {...rest} />
})

IconButton.displayName = 'IconButton'

type IconButtonVariantProps = VariantProps<typeof iconButton>

const iconButton = tv(
  {
    base: 'iconButton',
    defaultVariants: { variant: 'solid', size: 'md' },
    variants: {
      variant: {
        solid: 'iconButton--variant_solid',
        outline: 'iconButton--variant_outline',
        ghost: 'iconButton--variant_ghost',
        link: 'iconButton--variant_link',
        subtle: 'iconButton--variant_subtle',
      },
      size: {
        xs: 'iconButton--size_xs',
        sm: 'iconButton--size_sm',
        md: 'iconButton--size_md',
        lg: 'iconButton--size_lg',
        xl: 'iconButton--size_xl',
        '2xl': 'iconButton--size_2xl',
      },
    },
  },
  { twMerge: false },
)



================================================
FILE: src/components/park/ui/icon.tsx
================================================
import { type HTMLArkProps, ark } from '@ark-ui/react/factory'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface IconProps extends IconVariantProps, HTMLArkProps<'svg'> {}

export const Icon = forwardRef<SVGSVGElement, IconProps>((props, ref) => {
  const { size, className, ...otherProps } = props
  return <ark.svg asChild className={icon({ size, className })} ref={ref} {...otherProps} />
})

Icon.displayName = 'Icon'

type IconVariantProps = VariantProps<typeof icon>

const icon = tv(
  {
    base: 'icon',
    defaultVariants: { size: 'md' },
    variants: {
      size: {
        xs: 'icon--size_xs',
        sm: 'icon--size_sm',
        md: 'icon--size_md',
        lg: 'icon--size_lg',
        xl: 'icon--size_xl',
        '2xl': 'icon--size_2xl',
      },
    },
  },
  { twMerge: false },
)



================================================
FILE: src/components/park/ui/input.tsx
================================================
import { type HTMLArkProps, ark } from '@ark-ui/react/factory'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface InputProps extends InputVariantProps, Omit<HTMLArkProps<'input'>, 'size'> {}

export const Input = forwardRef<HTMLInputElement, InputProps>((props, ref) => {
  const { size, className, ...rest } = props
  return <ark.input className={input({ size, className })} ref={ref} {...rest} />
})

Input.displayName = 'Input'

type InputVariantProps = VariantProps<typeof input>

const input = tv(
  {
    base: 'input',
    defaultVariants: { size: 'md' },
    variants: {
      size: {
        '2xs': 'input--size_2xs',
        xs: 'input--size_xs',
        sm: 'input--size_sm',
        md: 'input--size_md',
        lg: 'input--size_lg',
        xl: 'input--size_xl',
        '2xl': 'input--size_2xl',
      },
    },
  },
  { twMerge: false },
)



================================================
FILE: src/components/park/ui/kbd.tsx
================================================
import { type HTMLArkProps, ark } from '@ark-ui/react/factory'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface KbdProps extends KbdVariantProps, HTMLArkProps<'kbd'> {}

export const Kbd = forwardRef<HTMLElement, KbdProps>((props, ref) => {
  const { size, className, ...rest } = props
  return <ark.kbd className={kbd({ size, className })} ref={ref} {...rest} />
})

Kbd.displayName = 'Kbd'

type KbdVariantProps = VariantProps<typeof kbd>

const kbd = tv(
  {
    base: 'kbd',
    defaultVariants: { size: 'md' },
    variants: { size: { sm: 'kbd--size_sm', md: 'kbd--size_md', lg: 'kbd--size_lg' } },
  },
  { twMerge: false },
)



================================================
FILE: src/components/park/ui/link.tsx
================================================
import { type HTMLArkProps, ark } from '@ark-ui/react/factory'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface LinkProps extends LinkVariantProps, HTMLArkProps<'a'> {}

export const Link = forwardRef<HTMLAnchorElement, LinkProps>((props, ref) => {
  const { className, ...otherProps } = props
  return <ark.a className={link({ className })} ref={ref} {...otherProps} />
})

Link.displayName = 'Link'

type LinkVariantProps = VariantProps<typeof link>

const link = tv({ base: 'link', variants: {} }, { twMerge: false })



================================================
FILE: src/components/park/ui/menu.tsx
================================================
import { Menu } from '@ark-ui/react/menu'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const menu = tv(
  {
    base: 'menu',
    defaultVariants: { size: 'md' },
    slots: {
      contextTrigger: 'menu__contextTrigger',
      trigger: 'menu__trigger',
      triggerItem: 'menu__triggerItem',
      indicator: 'menu__indicator',
      positioner: 'menu__positioner',
      arrow: 'menu__arrow',
      arrowTip: 'menu__arrowTip',
      content: 'menu__content',
      separator: 'menu__separator',
      item: 'menu__item',
      optionItem: 'menu__optionItem',
      optionItemIndicator: 'menu__optionItemIndicator',
      optionItemText: 'menu__optionItemText',
      itemGroupLabel: 'menu__itemGroupLabel',
      itemGroup: 'menu__itemGroup',
    },
    variants: {
      size: {
        xs: {
          contextTrigger: 'menu__contextTrigger--size_xs',
          trigger: 'menu__trigger--size_xs',
          triggerItem: 'menu__triggerItem--size_xs',
          indicator: 'menu__indicator--size_xs',
          positioner: 'menu__positioner--size_xs',
          arrow: 'menu__arrow--size_xs',
          arrowTip: 'menu__arrowTip--size_xs',
          content: 'menu__content--size_xs',
          separator: 'menu__separator--size_xs',
          item: 'menu__item--size_xs',
          optionItem: 'menu__optionItem--size_xs',
          optionItemIndicator: 'menu__optionItemIndicator--size_xs',
          optionItemText: 'menu__optionItemText--size_xs',
          itemGroupLabel: 'menu__itemGroupLabel--size_xs',
          itemGroup: 'menu__itemGroup--size_xs',
        },
        sm: {
          contextTrigger: 'menu__contextTrigger--size_sm',
          trigger: 'menu__trigger--size_sm',
          triggerItem: 'menu__triggerItem--size_sm',
          indicator: 'menu__indicator--size_sm',
          positioner: 'menu__positioner--size_sm',
          arrow: 'menu__arrow--size_sm',
          arrowTip: 'menu__arrowTip--size_sm',
          content: 'menu__content--size_sm',
          separator: 'menu__separator--size_sm',
          item: 'menu__item--size_sm',
          optionItem: 'menu__optionItem--size_sm',
          optionItemIndicator: 'menu__optionItemIndicator--size_sm',
          optionItemText: 'menu__optionItemText--size_sm',
          itemGroupLabel: 'menu__itemGroupLabel--size_sm',
          itemGroup: 'menu__itemGroup--size_sm',
        },
        md: {
          contextTrigger: 'menu__contextTrigger--size_md',
          trigger: 'menu__trigger--size_md',
          triggerItem: 'menu__triggerItem--size_md',
          indicator: 'menu__indicator--size_md',
          positioner: 'menu__positioner--size_md',
          arrow: 'menu__arrow--size_md',
          arrowTip: 'menu__arrowTip--size_md',
          content: 'menu__content--size_md',
          separator: 'menu__separator--size_md',
          item: 'menu__item--size_md',
          optionItem: 'menu__optionItem--size_md',
          optionItemIndicator: 'menu__optionItemIndicator--size_md',
          optionItemText: 'menu__optionItemText--size_md',
          itemGroupLabel: 'menu__itemGroupLabel--size_md',
          itemGroup: 'menu__itemGroup--size_md',
        },
        lg: {
          contextTrigger: 'menu__contextTrigger--size_lg',
          trigger: 'menu__trigger--size_lg',
          triggerItem: 'menu__triggerItem--size_lg',
          indicator: 'menu__indicator--size_lg',
          positioner: 'menu__positioner--size_lg',
          arrow: 'menu__arrow--size_lg',
          arrowTip: 'menu__arrowTip--size_lg',
          content: 'menu__content--size_lg',
          separator: 'menu__separator--size_lg',
          item: 'menu__item--size_lg',
          optionItem: 'menu__optionItem--size_lg',
          optionItemIndicator: 'menu__optionItemIndicator--size_lg',
          optionItemText: 'menu__optionItemText--size_lg',
          itemGroupLabel: 'menu__itemGroupLabel--size_lg',
          itemGroup: 'menu__itemGroup--size_lg',
        },
      },
    },
  },
  { twMerge: false },
)
const { withRootProvider, withContext } = createStyleContext(menu)

export interface RootProps extends Menu.RootProps, VariantProps<typeof menu> {}
export const Root = withRootProvider<RootProps>(Menu.Root)

export const Arrow = withContext<HTMLDivElement, Menu.ArrowProps>(Menu.Arrow, 'arrow')

export const ArrowTip = withContext<HTMLDivElement, Menu.ArrowTipProps>(Menu.ArrowTip, 'arrowTip')

export const CheckboxItem = withContext<HTMLDivElement, Menu.CheckboxItemProps>(
  Menu.CheckboxItem,
  'item',
)

export const Content = withContext<HTMLDivElement, Menu.ContentProps>(Menu.Content, 'content')

export const ContextTrigger = withContext<HTMLButtonElement, Menu.ContextTriggerProps>(
  Menu.ContextTrigger,
  'contextTrigger',
)

export const Indicator = withContext<HTMLDivElement, Menu.IndicatorProps>(
  Menu.Indicator,
  'indicator',
)

export const ItemGroupLabel = withContext<HTMLDivElement, Menu.ItemGroupLabelProps>(
  Menu.ItemGroupLabel,
  'itemGroupLabel',
)

export const ItemGroup = withContext<HTMLDivElement, Menu.ItemGroupProps>(
  Menu.ItemGroup,
  'itemGroup',
)

export const ItemIndicator = withContext<HTMLDivElement, Menu.ItemIndicatorProps>(
  Menu.ItemIndicator,
  'optionItemIndicator',
)

export const Item = withContext<HTMLDivElement, Menu.ItemProps>(Menu.Item, 'item')

export const ItemText = withContext<HTMLDivElement, Menu.ItemTextProps>(
  Menu.ItemText,
  'optionItemText',
)

export const Positioner = withContext<HTMLDivElement, Menu.PositionerProps>(
  Menu.Positioner,
  'positioner',
)

export const RadioItemGroup = withContext<HTMLDivElement, Menu.RadioItemGroupProps>(
  Menu.RadioItemGroup,
  'itemGroup',
)

export const RadioItem = withContext<HTMLDivElement, Menu.RadioItemProps>(Menu.RadioItem, 'item')

export const Separator = withContext<HTMLHRElement, Menu.SeparatorProps>(
  Menu.Separator,
  'separator',
)

export const TriggerItem = withContext<HTMLDivElement, Menu.TriggerItemProps>(
  Menu.TriggerItem,
  'triggerItem',
)

export const Trigger = withContext<HTMLButtonElement, Menu.TriggerProps>(Menu.Trigger, 'trigger')

export { MenuContext as Context, type MenuContextProps as ContextProps } from '@ark-ui/react/menu'



================================================
FILE: src/components/park/ui/number-input.tsx
================================================
import {
  NumberInput as ArkNumberInput,
  type NumberInputRootProps,
} from '@ark-ui/react/number-input'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface NumberInputProps extends NumberInputRootProps, NumberInputVariantProps {}

export const NumberInput = forwardRef<HTMLDivElement, NumberInputProps>((props, ref) => {
  const { children, size, className, ...rootProps } = props
  const { root, control, label, input, incrementTrigger, decrementTrigger } = numberInput({ size })

  return (
    <ArkNumberInput.Root ref={ref} className={root({ className })} {...rootProps}>
      {children && <ArkNumberInput.Label className={label()}>{children}</ArkNumberInput.Label>}
      <ArkNumberInput.Control className={control()}>
        <ArkNumberInput.Input className={input()} />
        <ArkNumberInput.IncrementTrigger className={incrementTrigger()}>
          <ChevronUpIcon />
        </ArkNumberInput.IncrementTrigger>
        <ArkNumberInput.DecrementTrigger className={decrementTrigger()}>
          <ChevronDownIcon />
        </ArkNumberInput.DecrementTrigger>
      </ArkNumberInput.Control>
    </ArkNumberInput.Root>
  )
})

NumberInput.displayName = 'NumberInput'

type NumberInputVariantProps = VariantProps<typeof numberInput>

const numberInput = tv(
  {
    base: 'numberInput',
    defaultVariants: { size: 'md' },
    slots: {
      root: 'numberInput__root',
      label: 'numberInput__label',
      input: 'numberInput__input',
      control: 'numberInput__control',
      incrementTrigger: 'numberInput__incrementTrigger',
      decrementTrigger: 'numberInput__decrementTrigger',
      scrubber: 'numberInput__scrubber',
    },
    variants: {
      size: {
        md: {
          root: 'numberInput__root--size_md',
          label: 'numberInput__label--size_md',
          input: 'numberInput__input--size_md',
          control: 'numberInput__control--size_md',
          incrementTrigger: 'numberInput__incrementTrigger--size_md',
          decrementTrigger: 'numberInput__decrementTrigger--size_md',
          scrubber: 'numberInput__scrubber--size_md',
        },
        lg: {
          root: 'numberInput__root--size_lg',
          label: 'numberInput__label--size_lg',
          input: 'numberInput__input--size_lg',
          control: 'numberInput__control--size_lg',
          incrementTrigger: 'numberInput__incrementTrigger--size_lg',
          decrementTrigger: 'numberInput__decrementTrigger--size_lg',
          scrubber: 'numberInput__scrubber--size_lg',
        },
        xl: {
          root: 'numberInput__root--size_xl',
          label: 'numberInput__label--size_xl',
          input: 'numberInput__input--size_xl',
          control: 'numberInput__control--size_xl',
          incrementTrigger: 'numberInput__incrementTrigger--size_xl',
          decrementTrigger: 'numberInput__decrementTrigger--size_xl',
          scrubber: 'numberInput__scrubber--size_xl',
        },
      },
    },
  },
  { twMerge: false },
)

const ChevronUpIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <title>Chevron Up</title>
    <path
      fill="none"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
      d="m18 15l-6-6l-6 6"
    />
  </svg>
)

const ChevronDownIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <title>Chevron Down</title>
    <path
      fill="none"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
      d="m6 9l6 6l6-6"
    />
  </svg>
)



================================================
FILE: src/components/park/ui/pagination.tsx
================================================
import { Pagination as ArkPagination, type PaginationRootProps } from '@ark-ui/react/pagination'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'
import { Button } from '~/components/park/ui/button'
import { IconButton } from '~/components/park/ui/icon-button'

export interface PaginationProps extends PaginationRootProps, PaginationVariantProps {}

export const Pagination = forwardRef<HTMLElement, PaginationProps>((props, ref) => {
  const { className, ...rootProps } = props
  const { root, ellipsis, item, prevTrigger, nextTrigger } = pagination()

  return (
    <ArkPagination.Root ref={ref} className={root({ className })} {...rootProps}>
      <ArkPagination.PrevTrigger className={prevTrigger()} asChild>
        <IconButton variant="ghost" aria-label="Next Page">
          <ChevronLeftIcon />
        </IconButton>
      </ArkPagination.PrevTrigger>
      <ArkPagination.Context>
        {(pagination) =>
          pagination.pages.map((page, index) =>
            page.type === 'page' ? (
              <ArkPagination.Item className={item()} key={index} {...page} asChild>
                <Button variant="outline">{page.value}</Button>
              </ArkPagination.Item>
            ) : (
              <ArkPagination.Ellipsis className={ellipsis()} key={index} index={index}>
                &#8230;
              </ArkPagination.Ellipsis>
            ),
          )
        }
      </ArkPagination.Context>
      <ArkPagination.NextTrigger className={nextTrigger()} asChild>
        <IconButton variant="ghost" aria-label="Next Page">
          <ChevronRightIcon />
        </IconButton>
      </ArkPagination.NextTrigger>
    </ArkPagination.Root>
  )
})

Pagination.displayName = 'Pagination'

type PaginationVariantProps = VariantProps<typeof pagination>

const pagination = tv(
  {
    base: 'pagination',
    slots: {
      root: 'pagination__root',
      item: 'pagination__item',
      ellipsis: 'pagination__ellipsis',
      prevTrigger: 'pagination__prevTrigger',
      nextTrigger: 'pagination__nextTrigger',
    },
    variants: {},
  },
  { twMerge: false },
)

const ChevronLeftIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <title>Chevron Left</title>
    <path
      fill="none"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
      d="m15 18l-6-6l6-6"
    />
  </svg>
)

const ChevronRightIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <title>Chevron Right</title>
    <path
      fill="none"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
      d="m9 18l6-6l-6-6"
    />
  </svg>
)



================================================
FILE: src/components/park/ui/pin-input.tsx
================================================
import { PinInput as ArkPinInput, type PinInputRootProps } from '@ark-ui/react/pin-input'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'
import { Input } from '~/components/park/ui/input'

export interface PinInputProps extends PinInputRootProps, PinInputVariantProps {
  /**
   * The number of inputs to render.
   * @default 4
   */
  length?: number
}

export const PinInput = forwardRef<HTMLDivElement, PinInputProps>((props, ref) => {
  const { children, className, size, length = 4, ...rootProps } = props
  const { root, control, input, label } = pinInput({ size })

  return (
    <ArkPinInput.Root ref={ref} className={root({ className })} {...rootProps}>
      {children && <ArkPinInput.Label className={label()}>{children}</ArkPinInput.Label>}
      <ArkPinInput.Control className={control()}>
        {Array.from({ length }, (_, index) => index).map((id, index) => (
          <ArkPinInput.Input className={input()} key={id} index={index} asChild>
            <Input size={size} />
          </ArkPinInput.Input>
        ))}
      </ArkPinInput.Control>
    </ArkPinInput.Root>
  )
})

PinInput.displayName = 'PinInput'

type PinInputVariantProps = VariantProps<typeof pinInput>

const pinInput = tv(
  {
    base: 'pinInput',
    defaultVariants: { size: 'md' },
    slots: {
      root: 'pinInput__root',
      label: 'pinInput__label',
      input: 'pinInput__input',
      control: 'pinInput__control',
    },
    variants: {
      size: {
        xs: {
          root: 'pinInput__root--size_xs',
          label: 'pinInput__label--size_xs',
          input: 'pinInput__input--size_xs',
          control: 'pinInput__control--size_xs',
        },
        sm: {
          root: 'pinInput__root--size_sm',
          label: 'pinInput__label--size_sm',
          input: 'pinInput__input--size_sm',
          control: 'pinInput__control--size_sm',
        },
        md: {
          root: 'pinInput__root--size_md',
          label: 'pinInput__label--size_md',
          input: 'pinInput__input--size_md',
          control: 'pinInput__control--size_md',
        },
        lg: {
          root: 'pinInput__root--size_lg',
          label: 'pinInput__label--size_lg',
          input: 'pinInput__input--size_lg',
          control: 'pinInput__control--size_lg',
        },
        xl: {
          root: 'pinInput__root--size_xl',
          label: 'pinInput__label--size_xl',
          input: 'pinInput__input--size_xl',
          control: 'pinInput__control--size_xl',
        },
        '2xl': {
          root: 'pinInput__root--size_2xl',
          label: 'pinInput__label--size_2xl',
          input: 'pinInput__input--size_2xl',
          control: 'pinInput__control--size_2xl',
        },
      },
    },
  },
  { twMerge: false },
)



================================================
FILE: src/components/park/ui/popover.tsx
================================================
import { Popover } from '@ark-ui/react/popover'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const popover = tv(
  {
    base: 'popover',
    slots: {
      arrow: 'popover__arrow',
      arrowTip: 'popover__arrowTip',
      anchor: 'popover__anchor',
      trigger: 'popover__trigger',
      indicator: 'popover__indicator',
      positioner: 'popover__positioner',
      content: 'popover__content',
      title: 'popover__title',
      description: 'popover__description',
      closeTrigger: 'popover__closeTrigger',
    },
    variants: {},
  },
  { twMerge: false },
)
const { withRootProvider, withContext } = createStyleContext(popover)

export interface RootProps extends Popover.RootProps, VariantProps<typeof popover> {}
export const Root = withRootProvider<RootProps>(Popover.Root)

export const Anchor = withContext<HTMLDivElement, Popover.AnchorProps>(Popover.Anchor, 'anchor')

export const Arrow = withContext<HTMLDivElement, Popover.ArrowProps>(Popover.Arrow, 'arrow')

export const ArrowTip = withContext<HTMLDivElement, Popover.ArrowTipProps>(
  Popover.ArrowTip,
  'arrowTip',
)

export const CloseTrigger = withContext<HTMLButtonElement, Popover.CloseTriggerProps>(
  Popover.CloseTrigger,
  'closeTrigger',
)

export const Content = withContext<HTMLDivElement, Popover.ContentProps>(Popover.Content, 'content')

export const Description = withContext<HTMLParagraphElement, Popover.DescriptionProps>(
  Popover.Description,
  'description',
)

export const Indicator = withContext<HTMLDivElement, Popover.IndicatorProps>(
  Popover.Indicator,
  'indicator',
)

export const Positioner = withContext<HTMLDivElement, Popover.PositionerProps>(
  Popover.Positioner,
  'positioner',
)

export const Title = withContext<HTMLDivElement, Popover.TitleProps>(Popover.Title, 'title')

export const Trigger = withContext<HTMLButtonElement, Popover.TriggerProps>(
  Popover.Trigger,
  'trigger',
)

export {
  PopoverContext as Context,
  type PopoverContextProps as ContextProps,
} from '@ark-ui/react/popover'



================================================
FILE: src/components/park/ui/progress.tsx
================================================
import { Progress as ArkProgress, type ProgressRootProps } from '@ark-ui/react/progress'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface ProgressProps extends ProgressRootProps, ProgressVariantProps {
  /**
   * The type of progress to render.
   * @default linear
   */
  type?: 'linear' | 'circular'
}

export const Progress = forwardRef<HTMLDivElement, ProgressProps>((props, ref) => {
  const { children, className, size, type = 'linear', ...rootProps } = props
  const { root, label, track, range, circle, circleRange, circleTrack, valueText } = progress({
    size,
  })

  return (
    <ArkProgress.Root ref={ref} className={root({ className })} {...rootProps}>
      {children && <ArkProgress.Label className={label()}>{children}</ArkProgress.Label>}
      {type === 'linear' && (
        <ArkProgress.Track className={track()}>
          <ArkProgress.Range className={range()} />
        </ArkProgress.Track>
      )}
      {type === 'circular' && (
        <ArkProgress.Circle className={circle()}>
          <ArkProgress.CircleTrack className={circleTrack()} />
          <ArkProgress.CircleRange className={circleRange()} />
          <ArkProgress.ValueText className={valueText()} />
        </ArkProgress.Circle>
      )}
      <ArkProgress.ValueText className={valueText()} />
    </ArkProgress.Root>
  )
})

Progress.displayName = 'Progress'

type ProgressVariantProps = VariantProps<typeof progress>

const progress = tv(
  {
    base: 'progress',
    defaultVariants: { size: 'md' },
    slots: {
      root: 'progress__root',
      label: 'progress__label',
      track: 'progress__track',
      range: 'progress__range',
      valueText: 'progress__valueText',
      view: 'progress__view',
      circle: 'progress__circle',
      circleTrack: 'progress__circleTrack',
      circleRange: 'progress__circleRange',
    },
    variants: {
      size: {
        sm: {
          root: 'progress__root--size_sm',
          label: 'progress__label--size_sm',
          track: 'progress__track--size_sm',
          range: 'progress__range--size_sm',
          valueText: 'progress__valueText--size_sm',
          view: 'progress__view--size_sm',
          circle: 'progress__circle--size_sm',
          circleTrack: 'progress__circleTrack--size_sm',
          circleRange: 'progress__circleRange--size_sm',
        },
        md: {
          root: 'progress__root--size_md',
          label: 'progress__label--size_md',
          track: 'progress__track--size_md',
          range: 'progress__range--size_md',
          valueText: 'progress__valueText--size_md',
          view: 'progress__view--size_md',
          circle: 'progress__circle--size_md',
          circleTrack: 'progress__circleTrack--size_md',
          circleRange: 'progress__circleRange--size_md',
        },
        lg: {
          root: 'progress__root--size_lg',
          label: 'progress__label--size_lg',
          track: 'progress__track--size_lg',
          range: 'progress__range--size_lg',
          valueText: 'progress__valueText--size_lg',
          view: 'progress__view--size_lg',
          circle: 'progress__circle--size_lg',
          circleTrack: 'progress__circleTrack--size_lg',
          circleRange: 'progress__circleRange--size_lg',
        },
      },
    },
  },
  { twMerge: false },
)



================================================
FILE: src/components/park/ui/radio-button-group.tsx
================================================
import { RadioGroup } from '@ark-ui/react/radio-group'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const radioButtonGroup = tv(
  {
    base: 'radioButtonGroup',
    defaultVariants: { size: 'md', variant: 'solid' },
    slots: {
      root: 'radioButtonGroup__root',
      label: 'radioButtonGroup__label',
      item: 'radioButtonGroup__item',
      itemText: 'radioButtonGroup__itemText',
      itemControl: 'radioButtonGroup__itemControl',
      indicator: 'radioButtonGroup__indicator',
    },
    variants: {
      variant: {
        solid: {
          root: 'radioButtonGroup__root--variant_solid',
          label: 'radioButtonGroup__label--variant_solid',
          item: 'radioButtonGroup__item--variant_solid',
          itemText: 'radioButtonGroup__itemText--variant_solid',
          itemControl: 'radioButtonGroup__itemControl--variant_solid',
          indicator: 'radioButtonGroup__indicator--variant_solid',
        },
        outline: {
          root: 'radioButtonGroup__root--variant_outline',
          label: 'radioButtonGroup__label--variant_outline',
          item: 'radioButtonGroup__item--variant_outline',
          itemText: 'radioButtonGroup__itemText--variant_outline',
          itemControl: 'radioButtonGroup__itemControl--variant_outline',
          indicator: 'radioButtonGroup__indicator--variant_outline',
        },
      },
      size: {
        sm: {
          root: 'radioButtonGroup__root--size_sm',
          label: 'radioButtonGroup__label--size_sm',
          item: 'radioButtonGroup__item--size_sm',
          itemText: 'radioButtonGroup__itemText--size_sm',
          itemControl: 'radioButtonGroup__itemControl--size_sm',
          indicator: 'radioButtonGroup__indicator--size_sm',
        },
        md: {
          root: 'radioButtonGroup__root--size_md',
          label: 'radioButtonGroup__label--size_md',
          item: 'radioButtonGroup__item--size_md',
          itemText: 'radioButtonGroup__itemText--size_md',
          itemControl: 'radioButtonGroup__itemControl--size_md',
          indicator: 'radioButtonGroup__indicator--size_md',
        },
        lg: {
          root: 'radioButtonGroup__root--size_lg',
          label: 'radioButtonGroup__label--size_lg',
          item: 'radioButtonGroup__item--size_lg',
          itemText: 'radioButtonGroup__itemText--size_lg',
          itemControl: 'radioButtonGroup__itemControl--size_lg',
          indicator: 'radioButtonGroup__indicator--size_lg',
        },
        xl: {
          root: 'radioButtonGroup__root--size_xl',
          label: 'radioButtonGroup__label--size_xl',
          item: 'radioButtonGroup__item--size_xl',
          itemText: 'radioButtonGroup__itemText--size_xl',
          itemControl: 'radioButtonGroup__itemControl--size_xl',
          indicator: 'radioButtonGroup__indicator--size_xl',
        },
      },
    },
  },
  { twMerge: false },
)

const { withProvider, withContext } = createStyleContext(radioButtonGroup)

export interface RootProps extends RadioGroup.RootProps, VariantProps<typeof radioButtonGroup> {}
export const Root = withProvider<HTMLDivElement, RootProps>(RadioGroup.Root, 'root')

export const Indicator = withContext<HTMLDivElement, RadioGroup.IndicatorProps>(
  RadioGroup.Indicator,
  'indicator',
)

export const ItemControl = withContext<HTMLDivElement, RadioGroup.ItemControlProps>(
  RadioGroup.ItemControl,
  'itemControl',
)

export const Item = withContext<HTMLLabelElement, RadioGroup.ItemProps>(RadioGroup.Item, 'item')

export const ItemText = withContext<HTMLSpanElement, RadioGroup.ItemTextProps>(
  RadioGroup.ItemText,
  'itemText',
)

export const Label = withContext<HTMLLabelElement, RadioGroup.LabelProps>(RadioGroup.Label, 'label')

export {
  RadioGroupContext as Context,
  type RadioGroupContextProps as ContextProps,
} from '@ark-ui/react/radio-group'



================================================
FILE: src/components/park/ui/radio-group.tsx
================================================
import { RadioGroup } from '@ark-ui/react/radio-group'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const radioGroup = tv(
  {
    base: 'radioGroup',
    defaultVariants: { size: 'md' },
    slots: {
      root: 'radioGroup__root',
      label: 'radioGroup__label',
      item: 'radioGroup__item',
      itemText: 'radioGroup__itemText',
      itemControl: 'radioGroup__itemControl',
      indicator: 'radioGroup__indicator',
    },
    variants: {
      size: {
        sm: {
          root: 'radioGroup__root--size_sm',
          label: 'radioGroup__label--size_sm',
          item: 'radioGroup__item--size_sm',
          itemText: 'radioGroup__itemText--size_sm',
          itemControl: 'radioGroup__itemControl--size_sm',
          indicator: 'radioGroup__indicator--size_sm',
        },
        md: {
          root: 'radioGroup__root--size_md',
          label: 'radioGroup__label--size_md',
          item: 'radioGroup__item--size_md',
          itemText: 'radioGroup__itemText--size_md',
          itemControl: 'radioGroup__itemControl--size_md',
          indicator: 'radioGroup__indicator--size_md',
        },
        lg: {
          root: 'radioGroup__root--size_lg',
          label: 'radioGroup__label--size_lg',
          item: 'radioGroup__item--size_lg',
          itemText: 'radioGroup__itemText--size_lg',
          itemControl: 'radioGroup__itemControl--size_lg',
          indicator: 'radioGroup__indicator--size_lg',
        },
      },
    },
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(radioGroup)

export interface RootProps extends RadioGroup.RootProps, VariantProps<typeof radioGroup> {}
export const Root = withProvider<HTMLDivElement, RootProps>(RadioGroup.Root, 'root')

export const Indicator = withContext<HTMLDivElement, RadioGroup.IndicatorProps>(
  RadioGroup.Indicator,
  'indicator',
)

export const ItemControl = withContext<HTMLDivElement, RadioGroup.ItemControlProps>(
  RadioGroup.ItemControl,
  'itemControl',
)

export const Item = withContext<HTMLLabelElement, RadioGroup.ItemProps>(RadioGroup.Item, 'item')

export const ItemText = withContext<HTMLSpanElement, RadioGroup.ItemTextProps>(
  RadioGroup.ItemText,
  'itemText',
)

export const Label = withContext<HTMLLabelElement, RadioGroup.LabelProps>(RadioGroup.Label, 'label')

export {
  RadioGroupContext as Context,
  type RadioGroupContextProps as ContextProps,
} from '@ark-ui/react/radio-group'



================================================
FILE: src/components/park/ui/rating-group.tsx
================================================
import {
  RatingGroup as ArkRatingGroup,
  type RatingGroupRootProps,
} from '@ark-ui/react/rating-group'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface RatingGroupProps extends RatingGroupRootProps, RatingGroupVariantProps {}

export const RatingGroup = forwardRef<HTMLDivElement, RatingGroupProps>((props, ref) => {
  const { children, className, size, ...rootProps } = props
  const { root, label, control, item } = ratingGroup({ size })

  return (
    <ArkRatingGroup.Root ref={ref} className={root({ className })} {...rootProps}>
      {children && <ArkRatingGroup.Label className={label()}>{children}</ArkRatingGroup.Label>}
      <ArkRatingGroup.Control className={control()}>
        <ArkRatingGroup.Context>
          {({ items }) =>
            items.map((index) => (
              <ArkRatingGroup.Item className={item()} key={index} index={index}>
                <ArkRatingGroup.ItemContext>
                  {(item) => <StarIcon half={item.half} />}
                </ArkRatingGroup.ItemContext>
              </ArkRatingGroup.Item>
            ))
          }
        </ArkRatingGroup.Context>
      </ArkRatingGroup.Control>
    </ArkRatingGroup.Root>
  )
})

RatingGroup.displayName = 'RatingGroup'

type RatingGroupVariantProps = VariantProps<typeof ratingGroup>

const ratingGroup = tv(
  {
    base: 'ratingGroup',
    defaultVariants: { size: 'md' },
    slots: {
      root: 'ratingGroup__root',
      label: 'ratingGroup__label',
      item: 'ratingGroup__item',
      control: 'ratingGroup__control',
    },
    variants: {
      size: {
        sm: {
          root: 'ratingGroup__root--size_sm',
          label: 'ratingGroup__label--size_sm',
          item: 'ratingGroup__item--size_sm',
          control: 'ratingGroup__control--size_sm',
        },
        md: {
          root: 'ratingGroup__root--size_md',
          label: 'ratingGroup__label--size_md',
          item: 'ratingGroup__item--size_md',
          control: 'ratingGroup__control--size_md',
        },
        lg: {
          root: 'ratingGroup__root--size_lg',
          label: 'ratingGroup__label--size_lg',
          item: 'ratingGroup__item--size_lg',
          control: 'ratingGroup__control--size_lg',
        },
      },
    },
  },
  { twMerge: false },
)

type IconProps = {
  half: boolean
}

const StarIcon = (props: IconProps) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="inherit"
    stroke="inherit"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
  >
    <title>Star Icon</title>
    <defs>
      <linearGradient id="half">
        <stop offset="50%" stop-color="var(--colors-color-palette-default)" />
        <stop offset="50%" stop-color="var(--colors-bg-emphasized)" />
      </linearGradient>
    </defs>
    <polygon
      fill={props.half ? 'url(#half)' : 'inherit'}
      points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"
    />
  </svg>
)



================================================
FILE: src/components/park/ui/segment-group.tsx
================================================
import { SegmentGroup } from '@ark-ui/react/segment-group'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const segmentGroup = tv(
  {
    base: 'segmentGroup',
    defaultVariants: { size: 'md' },
    slots: {
      root: 'segmentGroup__root',
      label: 'segmentGroup__label',
      item: 'segmentGroup__item',
      itemText: 'segmentGroup__itemText',
      itemControl: 'segmentGroup__itemControl',
      indicator: 'segmentGroup__indicator',
    },
    variants: {
      size: {
        sm: {
          root: 'segmentGroup__root--size_sm',
          label: 'segmentGroup__label--size_sm',
          item: 'segmentGroup__item--size_sm',
          itemText: 'segmentGroup__itemText--size_sm',
          itemControl: 'segmentGroup__itemControl--size_sm',
          indicator: 'segmentGroup__indicator--size_sm',
        },
        md: {
          root: 'segmentGroup__root--size_md',
          label: 'segmentGroup__label--size_md',
          item: 'segmentGroup__item--size_md',
          itemText: 'segmentGroup__itemText--size_md',
          itemControl: 'segmentGroup__itemControl--size_md',
          indicator: 'segmentGroup__indicator--size_md',
        },
      },
    },
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(segmentGroup)

export interface RootProps extends SegmentGroup.RootProps, VariantProps<typeof segmentGroup> {}
export const Root = withProvider<HTMLDivElement, RootProps>(SegmentGroup.Root, 'root')

export const Indicator = withContext<HTMLDivElement, SegmentGroup.IndicatorProps>(
  SegmentGroup.Indicator,
  'indicator',
)

export const ItemControl = withContext<HTMLDivElement, SegmentGroup.ItemControlProps>(
  SegmentGroup.ItemControl,
  'itemControl',
)

export const Item = withContext<HTMLLabelElement, SegmentGroup.ItemProps>(SegmentGroup.Item, 'item')

export const ItemText = withContext<HTMLSpanElement, SegmentGroup.ItemTextProps>(
  SegmentGroup.ItemText,
  'itemText',
)

export const Label = withContext<HTMLLabelElement, SegmentGroup.LabelProps>(
  SegmentGroup.Label,
  'label',
)

export {
  SegmentGroupContext as Context,
  type SegmentGroupContextProps as ContextProps,
} from '@ark-ui/react/segment-group'



================================================
FILE: src/components/park/ui/select.tsx
================================================
import { Select } from '@ark-ui/react/select'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const select = tv(
  {
    base: 'select',
    defaultVariants: { size: 'md', variant: 'outline' },
    slots: {
      label: 'select__label',
      positioner: 'select__positioner',
      trigger: 'select__trigger',
      indicator: 'select__indicator',
      clearTrigger: 'select__clearTrigger',
      item: 'select__item',
      itemText: 'select__itemText',
      itemIndicator: 'select__itemIndicator',
      itemGroup: 'select__itemGroup',
      itemGroupLabel: 'select__itemGroupLabel',
      content: 'select__content',
      root: 'select__root',
      control: 'select__control',
      valueText: 'select__valueText',
    },
    variants: {
      variant: {
        outline: {
          label: 'select__label--variant_outline',
          positioner: 'select__positioner--variant_outline',
          trigger: 'select__trigger--variant_outline',
          indicator: 'select__indicator--variant_outline',
          clearTrigger: 'select__clearTrigger--variant_outline',
          item: 'select__item--variant_outline',
          itemText: 'select__itemText--variant_outline',
          itemIndicator: 'select__itemIndicator--variant_outline',
          itemGroup: 'select__itemGroup--variant_outline',
          itemGroupLabel: 'select__itemGroupLabel--variant_outline',
          content: 'select__content--variant_outline',
          root: 'select__root--variant_outline',
          control: 'select__control--variant_outline',
          valueText: 'select__valueText--variant_outline',
        },
        ghost: {
          label: 'select__label--variant_ghost',
          positioner: 'select__positioner--variant_ghost',
          trigger: 'select__trigger--variant_ghost',
          indicator: 'select__indicator--variant_ghost',
          clearTrigger: 'select__clearTrigger--variant_ghost',
          item: 'select__item--variant_ghost',
          itemText: 'select__itemText--variant_ghost',
          itemIndicator: 'select__itemIndicator--variant_ghost',
          itemGroup: 'select__itemGroup--variant_ghost',
          itemGroupLabel: 'select__itemGroupLabel--variant_ghost',
          content: 'select__content--variant_ghost',
          root: 'select__root--variant_ghost',
          control: 'select__control--variant_ghost',
          valueText: 'select__valueText--variant_ghost',
        },
      },
      size: {
        sm: {
          label: 'select__label--size_sm',
          positioner: 'select__positioner--size_sm',
          trigger: 'select__trigger--size_sm',
          indicator: 'select__indicator--size_sm',
          clearTrigger: 'select__clearTrigger--size_sm',
          item: 'select__item--size_sm',
          itemText: 'select__itemText--size_sm',
          itemIndicator: 'select__itemIndicator--size_sm',
          itemGroup: 'select__itemGroup--size_sm',
          itemGroupLabel: 'select__itemGroupLabel--size_sm',
          content: 'select__content--size_sm',
          root: 'select__root--size_sm',
          control: 'select__control--size_sm',
          valueText: 'select__valueText--size_sm',
        },
        md: {
          label: 'select__label--size_md',
          positioner: 'select__positioner--size_md',
          trigger: 'select__trigger--size_md',
          indicator: 'select__indicator--size_md',
          clearTrigger: 'select__clearTrigger--size_md',
          item: 'select__item--size_md',
          itemText: 'select__itemText--size_md',
          itemIndicator: 'select__itemIndicator--size_md',
          itemGroup: 'select__itemGroup--size_md',
          itemGroupLabel: 'select__itemGroupLabel--size_md',
          content: 'select__content--size_md',
          root: 'select__root--size_md',
          control: 'select__control--size_md',
          valueText: 'select__valueText--size_md',
        },
        lg: {
          label: 'select__label--size_lg',
          positioner: 'select__positioner--size_lg',
          trigger: 'select__trigger--size_lg',
          indicator: 'select__indicator--size_lg',
          clearTrigger: 'select__clearTrigger--size_lg',
          item: 'select__item--size_lg',
          itemText: 'select__itemText--size_lg',
          itemIndicator: 'select__itemIndicator--size_lg',
          itemGroup: 'select__itemGroup--size_lg',
          itemGroupLabel: 'select__itemGroupLabel--size_lg',
          content: 'select__content--size_lg',
          root: 'select__root--size_lg',
          control: 'select__control--size_lg',
          valueText: 'select__valueText--size_lg',
        },
      },
    },
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(select)

export interface RootProps
  extends Select.RootProps<Select.CollectionItem>,
    VariantProps<typeof select> {}
export const Root = withProvider<undefined, RootProps>(Select.Root, 'root')

export const ClearTrigger = withContext<HTMLButtonElement, Select.ClearTriggerProps>(
  Select.ClearTrigger,
  'clearTrigger',
)

export const Content = withContext<HTMLDivElement, Select.ContentProps>(Select.Content, 'content')

export const Control = withContext<HTMLDivElement, Select.ControlProps>(Select.Control, 'control')

export const Indicator = withContext<HTMLDivElement, Select.IndicatorProps>(
  Select.Indicator,
  'indicator',
)

export const ItemGroupLabel = withContext<HTMLDivElement, Select.ItemGroupLabelProps>(
  Select.ItemGroupLabel,
  'itemGroupLabel',
)

export const ItemGroup = withContext<HTMLDivElement, Select.ItemGroupProps>(
  Select.ItemGroup,
  'itemGroup',
)

export const ItemIndicator = withContext<HTMLDivElement, Select.ItemIndicatorProps>(
  Select.ItemIndicator,
  'itemIndicator',
)

export const Item = withContext<HTMLDivElement, Select.ItemProps>(Select.Item, 'item')

export const ItemText = withContext<HTMLDivElement, Select.ItemTextProps>(
  Select.ItemText,
  'itemText',
)

export const Label = withContext<HTMLLabelElement, Select.LabelProps>(Select.Label, 'label')

export const Positioner = withContext<HTMLDivElement, Select.PositionerProps>(
  Select.Positioner,
  'positioner',
)

export const Trigger = withContext<HTMLButtonElement, Select.TriggerProps>(
  Select.Trigger,
  'trigger',
)

export const ValueText = withContext<HTMLSpanElement, Select.ValueTextProps>(
  Select.ValueText,
  'valueText',
)

export {
  SelectContext as Context,
  SelectHiddenSelect as HiddenSelect,
  type SelectContextProps as ContextProps,
  type SelectHiddenSelectProps as HiddenSelectProps,
} from '@ark-ui/react/select'



================================================
FILE: src/components/park/ui/skeleton.tsx
================================================
import { type HTMLArkProps, ark } from '@ark-ui/react/factory'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface SkeletonProps extends HTMLArkProps<'div'>, SkeletonVariantProps {
  /**
   *
   * @default false
   */
  isLoaded?: boolean
}

export const Skeleton = forwardRef<HTMLDivElement, SkeletonProps>((props, ref) => {
  const { isLoaded, className, ...rest } = props

  if (isLoaded) {
    return <ark.div className="animate-fade-in" ref={ref} {...rest} />
  }
  return <ark.div ref={ref} className={skeleton({ className })} {...rest} />
})

Skeleton.displayName = 'Skeleton'

type SkeletonVariantProps = VariantProps<typeof skeleton>

const skeleton = tv({ base: 'skeleton', variants: {} }, { twMerge: false })



================================================
FILE: src/components/park/ui/slider.tsx
================================================
import { Slider as ArkSlider, type SliderRootProps } from '@ark-ui/react/slider'
import { type ReactNode, forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface SliderProps extends SliderRootProps, SliderVariantProps {
  marks?: {
    value: number
    label?: ReactNode
  }[]
}

export const Slider = forwardRef<HTMLDivElement, SliderProps>((props, ref) => {
  const { children, className, size, ...rootProps } = props
  const { root, label, control, track, range, thumb, marker, markerGroup } = slider({ size })

  return (
    <ArkSlider.Root ref={ref} className={root({ className })} {...rootProps}>
      <ArkSlider.Context>
        {(api) => (
          <>
            {children && <ArkSlider.Label className={label()}>{children}</ArkSlider.Label>}
            <ArkSlider.Control className={control()}>
              <ArkSlider.Track className={track()}>
                <ArkSlider.Range className={range()} />
              </ArkSlider.Track>
              {api.value.map((_, index) => (
                <ArkSlider.Thumb key={index} index={index} className={thumb()} />
              ))}
            </ArkSlider.Control>
            {props.marks && (
              <ArkSlider.MarkerGroup className={markerGroup()}>
                {props.marks.map((mark) => (
                  <ArkSlider.Marker key={mark.value} value={mark.value} className={marker()}>
                    {mark.label}
                  </ArkSlider.Marker>
                ))}
              </ArkSlider.MarkerGroup>
            )}
          </>
        )}
      </ArkSlider.Context>
    </ArkSlider.Root>
  )
})

Slider.displayName = 'Slider'

type SliderVariantProps = VariantProps<typeof slider>

const slider = tv(
  {
    base: 'slider',
    defaultVariants: { size: 'md' },
    slots: {
      root: 'slider__root',
      label: 'slider__label',
      thumb: 'slider__thumb',
      valueText: 'slider__valueText',
      track: 'slider__track',
      range: 'slider__range',
      control: 'slider__control',
      markerGroup: 'slider__markerGroup',
      marker: 'slider__marker',
    },
    variants: {
      size: {
        sm: {
          root: 'slider__root--size_sm',
          label: 'slider__label--size_sm',
          thumb: 'slider__thumb--size_sm',
          valueText: 'slider__valueText--size_sm',
          track: 'slider__track--size_sm',
          range: 'slider__range--size_sm',
          control: 'slider__control--size_sm',
          markerGroup: 'slider__markerGroup--size_sm',
          marker: 'slider__marker--size_sm',
        },
        md: {
          root: 'slider__root--size_md',
          label: 'slider__label--size_md',
          thumb: 'slider__thumb--size_md',
          valueText: 'slider__valueText--size_md',
          track: 'slider__track--size_md',
          range: 'slider__range--size_md',
          control: 'slider__control--size_md',
          markerGroup: 'slider__markerGroup--size_md',
          marker: 'slider__marker--size_md',
        },
        lg: {
          root: 'slider__root--size_lg',
          label: 'slider__label--size_lg',
          thumb: 'slider__thumb--size_lg',
          valueText: 'slider__valueText--size_lg',
          track: 'slider__track--size_lg',
          range: 'slider__range--size_lg',
          control: 'slider__control--size_lg',
          markerGroup: 'slider__markerGroup--size_lg',
          marker: 'slider__marker--size_lg',
        },
      },
    },
  },
  { twMerge: false },
)



================================================
FILE: src/components/park/ui/splitter.tsx
================================================
import { Splitter } from '@ark-ui/react/splitter'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const splitter = tv(
  {
    base: 'splitter',
    slots: {
      root: 'splitter__root',
      panel: 'splitter__panel',
      resizeTrigger: 'splitter__resizeTrigger',
    },
    variants: {},
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(splitter)

export interface RootProps extends Splitter.RootProps, VariantProps<typeof splitter> {}
export const Root = withProvider<HTMLDivElement, RootProps>(Splitter.Root, 'root')

export const Panel = withContext<HTMLDivElement, Splitter.PanelProps>(Splitter.Panel, 'panel')

export const ResizeTrigger = withContext<HTMLButtonElement, Splitter.ResizeTriggerProps>(
  Splitter.ResizeTrigger,
  'resizeTrigger',
)

export {
  SplitterContext as Context,
  type SplitterContextProps as ContextProps,
} from '@ark-ui/react/splitter'



================================================
FILE: src/components/park/ui/switch.tsx
================================================
import { Switch as ArkSwitch, type SwitchRootProps } from '@ark-ui/react/switch'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface SwitchProps extends SwitchRootProps, SwitchRecipeVariantProps {}

export const Switch = forwardRef<HTMLLabelElement, SwitchProps>((props, ref) => {
  const { children, className, size, ...rootProps } = props
  const { root, control, thumb, label } = styles({ size })

  return (
    <ArkSwitch.Root ref={ref} className={root({ className })} {...rootProps}>
      <ArkSwitch.Control className={control()}>
        <ArkSwitch.Thumb className={thumb()} />
      </ArkSwitch.Control>
      {children && <ArkSwitch.Label className={label()}>{children}</ArkSwitch.Label>}
      <ArkSwitch.HiddenInput />
    </ArkSwitch.Root>
  )
})

Switch.displayName = 'Switch'

type SwitchRecipeVariantProps = VariantProps<typeof styles>

const styles = tv(
  {
    base: 'switchRecipe',
    defaultVariants: { size: 'md' },
    slots: {
      root: 'switchRecipe__root',
      label: 'switchRecipe__label',
      control: 'switchRecipe__control',
      thumb: 'switchRecipe__thumb',
    },
    variants: {
      size: {
        sm: {
          root: 'switchRecipe__root--size_sm',
          label: 'switchRecipe__label--size_sm',
          control: 'switchRecipe__control--size_sm',
          thumb: 'switchRecipe__thumb--size_sm',
        },
        md: {
          root: 'switchRecipe__root--size_md',
          label: 'switchRecipe__label--size_md',
          control: 'switchRecipe__control--size_md',
          thumb: 'switchRecipe__thumb--size_md',
        },
        lg: {
          root: 'switchRecipe__root--size_lg',
          label: 'switchRecipe__label--size_lg',
          control: 'switchRecipe__control--size_lg',
          thumb: 'switchRecipe__thumb--size_lg',
        },
      },
    },
  },
  { twMerge: false },
)



================================================
FILE: src/components/park/ui/table.tsx
================================================
import { type HTMLArkProps, ark } from '@ark-ui/react/factory'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const table = tv(
  {
    base: 'table',
    defaultVariants: { size: 'md', variant: 'plain' },
    slots: {
      root: 'table__root',
      body: 'table__body',
      cell: 'table__cell',
      footer: 'table__footer',
      head: 'table__head',
      header: 'table__header',
      row: 'table__row',
      caption: 'table__caption',
    },
    variants: {
      variant: {
        outline: {
          root: 'table__root--variant_outline',
          body: 'table__body--variant_outline',
          cell: 'table__cell--variant_outline',
          footer: 'table__footer--variant_outline',
          head: 'table__head--variant_outline',
          header: 'table__header--variant_outline',
          row: 'table__row--variant_outline',
          caption: 'table__caption--variant_outline',
        },
        plain: {
          root: 'table__root--variant_plain',
          body: 'table__body--variant_plain',
          cell: 'table__cell--variant_plain',
          footer: 'table__footer--variant_plain',
          head: 'table__head--variant_plain',
          header: 'table__header--variant_plain',
          row: 'table__row--variant_plain',
          caption: 'table__caption--variant_plain',
        },
      },
      size: {
        sm: {
          root: 'table__root--size_sm',
          body: 'table__body--size_sm',
          cell: 'table__cell--size_sm',
          footer: 'table__footer--size_sm',
          head: 'table__head--size_sm',
          header: 'table__header--size_sm',
          row: 'table__row--size_sm',
          caption: 'table__caption--size_sm',
        },
        md: {
          root: 'table__root--size_md',
          body: 'table__body--size_md',
          cell: 'table__cell--size_md',
          footer: 'table__footer--size_md',
          head: 'table__head--size_md',
          header: 'table__header--size_md',
          row: 'table__row--size_md',
          caption: 'table__caption--size_md',
        },
      },
    },
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(table)

export interface RootProps extends HTMLArkProps<'table'>, VariantProps<typeof table> {}
export const Root = withProvider<HTMLTableElement, RootProps>(ark.table, 'root')

export const Body = withContext<HTMLTableSectionElement, HTMLArkProps<'tbody'>>(ark.tbody, 'body')

export const Caption = withContext<HTMLTableCaptionElement, HTMLArkProps<'caption'>>(
  ark.caption,
  'caption',
)

export const Cell = withContext<HTMLTableCellElement, HTMLArkProps<'td'>>(ark.td, 'cell')

export const Foot = withContext<HTMLTableSectionElement, HTMLArkProps<'tfoot'>>(ark.tfoot, 'footer')

export const Head = withContext<HTMLTableSectionElement, HTMLArkProps<'thead'>>(ark.thead, 'head')

export const Header = withContext<HTMLTableCellElement, HTMLArkProps<'th'>>(ark.th, 'header')

export const Row = withContext<HTMLTableRowElement, HTMLArkProps<'tr'>>(ark.tr, 'row')



================================================
FILE: src/components/park/ui/tabs.tsx
================================================
import { Tabs } from '@ark-ui/react/tabs'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const tabs = tv(
  {
    base: 'tabs',
    defaultVariants: { size: 'md', variant: 'line' },
    slots: {
      root: 'tabs__root',
      list: 'tabs__list',
      trigger: 'tabs__trigger',
      content: 'tabs__content',
      indicator: 'tabs__indicator',
    },
    variants: {
      variant: {
        enclosed: {
          root: 'tabs__root--variant_enclosed',
          list: 'tabs__list--variant_enclosed',
          trigger: 'tabs__trigger--variant_enclosed',
          content: 'tabs__content--variant_enclosed',
          indicator: 'tabs__indicator--variant_enclosed',
        },
        line: {
          root: 'tabs__root--variant_line',
          list: 'tabs__list--variant_line',
          trigger: 'tabs__trigger--variant_line',
          content: 'tabs__content--variant_line',
          indicator: 'tabs__indicator--variant_line',
        },
        outline: {
          root: 'tabs__root--variant_outline',
          list: 'tabs__list--variant_outline',
          trigger: 'tabs__trigger--variant_outline',
          content: 'tabs__content--variant_outline',
          indicator: 'tabs__indicator--variant_outline',
        },
      },
      size: {
        sm: {
          root: 'tabs__root--size_sm',
          list: 'tabs__list--size_sm',
          trigger: 'tabs__trigger--size_sm',
          content: 'tabs__content--size_sm',
          indicator: 'tabs__indicator--size_sm',
        },
        md: {
          root: 'tabs__root--size_md',
          list: 'tabs__list--size_md',
          trigger: 'tabs__trigger--size_md',
          content: 'tabs__content--size_md',
          indicator: 'tabs__indicator--size_md',
        },
        lg: {
          root: 'tabs__root--size_lg',
          list: 'tabs__list--size_lg',
          trigger: 'tabs__trigger--size_lg',
          content: 'tabs__content--size_lg',
          indicator: 'tabs__indicator--size_lg',
        },
      },
    },
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(tabs)

export interface RootProps extends Tabs.RootProps, VariantProps<typeof tabs> {}
export const Root = withProvider<HTMLDivElement, RootProps>(Tabs.Root, 'root')

export const Content = withContext<HTMLDivElement, Tabs.ContentProps>(Tabs.Content, 'content')

export const Indicator = withContext<HTMLDivElement, Tabs.IndicatorProps>(
  Tabs.Indicator,
  'indicator',
)

export const List = withContext<HTMLDivElement, Tabs.ListProps>(Tabs.List, 'list')

export const Trigger = withContext<HTMLButtonElement, Tabs.TriggerProps>(Tabs.Trigger, 'trigger')

export { TabsContext as Context, type TabsContextProps as ContextProps } from '@ark-ui/react/tabs'



================================================
FILE: src/components/park/ui/tags-input.tsx
================================================
import { TagsInput } from '@ark-ui/react/tags-input'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const tagsInput = tv(
  {
    base: 'tagsInput',
    defaultVariants: { size: 'md' },
    slots: {
      root: 'tagsInput__root',
      label: 'tagsInput__label',
      control: 'tagsInput__control',
      input: 'tagsInput__input',
      clearTrigger: 'tagsInput__clearTrigger',
      item: 'tagsInput__item',
      itemPreview: 'tagsInput__itemPreview',
      itemInput: 'tagsInput__itemInput',
      itemText: 'tagsInput__itemText',
      itemDeleteTrigger: 'tagsInput__itemDeleteTrigger',
    },
    variants: {
      size: {
        md: {
          root: 'tagsInput__root--size_md',
          label: 'tagsInput__label--size_md',
          control: 'tagsInput__control--size_md',
          input: 'tagsInput__input--size_md',
          clearTrigger: 'tagsInput__clearTrigger--size_md',
          item: 'tagsInput__item--size_md',
          itemPreview: 'tagsInput__itemPreview--size_md',
          itemInput: 'tagsInput__itemInput--size_md',
          itemText: 'tagsInput__itemText--size_md',
          itemDeleteTrigger: 'tagsInput__itemDeleteTrigger--size_md',
        },
      },
    },
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(tagsInput)

export interface RootProps extends TagsInput.RootProps, VariantProps<typeof tagsInput> {}
export const Root = withProvider<HTMLDivElement, RootProps>(TagsInput.Root, 'root')

export const ClearTrigger = withContext<HTMLButtonElement, TagsInput.ClearTriggerProps>(
  TagsInput.ClearTrigger,
  'clearTrigger',
)

export const Control = withContext<HTMLDivElement, TagsInput.ControlProps>(
  TagsInput.Control,
  'control',
)

export const Input = withContext<HTMLInputElement, TagsInput.InputProps>(TagsInput.Input, 'input')

export const ItemDeleteTrigger = withContext<HTMLButtonElement, TagsInput.ItemDeleteTriggerProps>(
  TagsInput.ItemDeleteTrigger,
  'itemDeleteTrigger',
)

export const ItemInput = withContext<HTMLInputElement, TagsInput.ItemInputProps>(
  TagsInput.ItemInput,
  'itemInput',
)

export const ItemPreview = withContext<HTMLDivElement, TagsInput.ItemPreviewProps>(
  TagsInput.ItemPreview,
  'itemPreview',
)

export const Item = withContext<HTMLDivElement, TagsInput.ItemProps>(TagsInput.Item, 'item')

export const ItemText = withContext<HTMLSpanElement, TagsInput.ItemTextProps>(
  TagsInput.ItemText,
  'itemText',
)

export const Label = withContext<HTMLLabelElement, TagsInput.LabelProps>(TagsInput.Label, 'label')

export {
  TagsInputContext as Context,
  TagsInputHiddenInput as HiddenInput,
  type TagsInputContextProps as ContextProps,
  type TagsInputHiddenInputProps as HiddenInputProps,
} from '@ark-ui/react/tags-input'



================================================
FILE: src/components/park/ui/text.tsx
================================================
import { createElement } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

type As = 'p' | 'span' | 'div' | 'label'

export type TextProps = {
  as?: As
} & TextVariantProps &
  JSX.IntrinsicElements[As]

export const Text = (props: TextProps) => {
  const { as = 'p', size, className, ...elementProps } = props
  const classes = text({ size, className })

  return createElement(as, {
    className: classes,
    ...elementProps,
  })
}

type TextVariantProps = VariantProps<typeof text>

const text = tv(
  {
    base: 'text',
    variants: {
      variant: { heading: 'text--variant_heading' },
      size: {
        xs: 'text--size_xs',
        sm: 'text--size_sm',
        md: 'text--size_md',
        lg: 'text--size_lg',
        xl: 'text--size_xl',
        '2xl': 'text--size_2xl',
        '3xl': 'text--size_3xl',
        '4xl': 'text--size_4xl',
        '5xl': 'text--size_5xl',
        '6xl': 'text--size_6xl',
        '7xl': 'text--size_7xl',
      },
    },
  },
  { twMerge: false },
)



================================================
FILE: src/components/park/ui/textarea.tsx
================================================
import { type HTMLArkProps, ark } from '@ark-ui/react/factory'
import { forwardRef } from 'react'
import { type VariantProps, tv } from 'tailwind-variants'

export interface TextareaProps extends TextareaVariantProps, HTMLArkProps<'textarea'> {}

export const Textarea = forwardRef<HTMLTextAreaElement, TextareaProps>((props, ref) => {
  const { size, className, ...rest } = props
  return <ark.textarea className={textarea({ size, className })} ref={ref} {...rest} />
})

Textarea.displayName = 'Textarea'

type TextareaVariantProps = VariantProps<typeof textarea>

const textarea = tv(
  {
    base: 'textarea',
    defaultVariants: { size: 'md' },
    variants: {
      size: {
        sm: 'textarea--size_sm',
        md: 'textarea--size_md',
        lg: 'textarea--size_lg',
        xl: 'textarea--size_xl',
      },
    },
  },
  { twMerge: false },
)



================================================
FILE: src/components/park/ui/toast.tsx
================================================
import * as ToastPrimitive from "@ark-ui/react/toast";
import { type VariantProps, tv } from "tailwind-variants";
import { createStyleContext } from "~/components/park/lib/create-style-context";




    // .toast__title {
    //   color: var(--colors-fg-default);
    //   font-size: var(--font-sizes-sm);
    //   line-height: 1.25rem;
    //   font-weight: var(--font-weights-semibold);
    // }

    // .toast__description {
    //   color: var(--colors-fg-muted);
    //   font-size: var(--font-sizes-sm);
    //   line-height: 1.25rem;
    // }

    // .toast__actionTrigger {
    //   margin-top: var(--spacing-2);
    // }

    // .toast__closeTrigger {
    //   top: var(--spacing-3);
    //   right: var(--spacing-3);
    //   position: absolute;
    // }

    // .toast__root {
    //   background: var(--colors-bg-default);
    //   border-radius: var(--radii-l3);
    //   box-shadow: var(--shadows-lg);
    //   min-width: var(--sizes-xs);
    //   height: var(--height);
    //   opacity: var(--opacity);
    //   overflow-wrap: anywhere;
    //   padding: var(--spacing-4);
    //   scale: var(--scale);
    //   translate: var(--x) var(--y) 0;
    //   will-change: translate, opacity, scale;
    //   z-index: var(--z-index);
    //   --transition-duration: var(--durations-slow);
    //   transition-duration: var(--durations-slow);
    //   --transition-prop: translate, scale, opacity, height;
    //   --transition-easing: var(--easings-default);
    //   transition-property: translate, scale, opacity, height;
    //   transition-timing-function: var(--easings-default);
    //   position: relative;
    // }

const toast = tv(
  {
    base: "toast ",
    slots: {
      actionTrigger: "absolute right-0 bottom-0 p-2",
      closeTrigger: "absolute right-0 top-0 p-2",
      group: "",
      root: "toast__root min-w-[300px] bg-base-300 rounded-lg p-3  gap-1 z-50  ",
      title: "text-2xl font-bold",
      description: "text-sm",
    },
    defaultVariants: {
      type: "info",
    },
    variants: {
      type: {
        info: "bg-info text-blue-900",
        success: "toast--type__success",
        warning: "toast--type__warning",
        error: "toast--type__error",
      },
    },
  },
  { twMerge: false },
);
const { withProvider, withContext } = createStyleContext(toast);

export interface RootProps extends ToastPrimitive.Toast.RootProps, VariantProps<typeof toast> {}
export const Root = withProvider<HTMLDivElement, RootProps>(ToastPrimitive.Toast.Root, "root");

export const ActionTrigger = withContext<HTMLButtonElement, ToastPrimitive.Toast.ActionTriggerProps>(
  ToastPrimitive.Toast.ActionTrigger,
  "actionTrigger"
);

export const CloseTrigger = withContext<HTMLButtonElement, ToastPrimitive.Toast.CloseTriggerProps>(
  ToastPrimitive.Toast.CloseTrigger,
  "closeTrigger"
);

export const Description = withContext<HTMLDivElement, ToastPrimitive.Toast.DescriptionProps>(
  ToastPrimitive.Toast.Description,
  "description"
);

export const Title = withContext<HTMLDivElement, ToastPrimitive.Toast.TitleProps>(ToastPrimitive.Toast.Title, "title");

export {
  ToastContext as Context,
  Toaster,
  type ToastContextProps as ContextProps,
  type ToasterProps,
} from "@ark-ui/react/toast";





    // <Toast.Toaster toaster={toaster}>
    //   {(toast) => (

    //     <Toast.Root
    //       key={toast.id}
    //     >
    //       <Toast.Title>{toast.title}</Toast.Title>
    //       <Toast.Description>{toast.description}</Toast.Description>
    //       <Toast.ActionTrigger asChild>
    //         <Button variant="link" size="sm">
    //           Action
    //         </Button>
    //       </Toast.ActionTrigger>
    //       <Toast.CloseTrigger asChild>
    //         <Button size="sm" variant="link">
    //           <XIcon />
    //         </Button>
    //       </Toast.CloseTrigger>
    //     </Toast.Root>
    //   )}
    // </Toast.Toaster>



================================================
FILE: src/components/park/ui/toggle-group.tsx
================================================
import { ToggleGroup } from '@ark-ui/react/toggle-group'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const toggleGroup = tv(
  {
    base: 'toggleGroup',
    defaultVariants: { size: 'md', variant: 'outline' },
    slots: { root: 'toggleGroup__root', item: 'toggleGroup__item' },
    variants: {
      variant: {
        outline: {
          root: 'toggleGroup__root--variant_outline',
          item: 'toggleGroup__item--variant_outline',
        },
        ghost: {
          root: 'toggleGroup__root--variant_ghost',
          item: 'toggleGroup__item--variant_ghost',
        },
      },
      size: {
        sm: { root: 'toggleGroup__root--size_sm', item: 'toggleGroup__item--size_sm' },
        md: { root: 'toggleGroup__root--size_md', item: 'toggleGroup__item--size_md' },
        lg: { root: 'toggleGroup__root--size_lg', item: 'toggleGroup__item--size_lg' },
      },
    },
  },
  { twMerge: false },
)
const { withProvider, withContext } = createStyleContext(toggleGroup)

export interface RootProps extends ToggleGroup.RootProps, VariantProps<typeof toggleGroup> {}
export const Root = withProvider<HTMLDivElement, RootProps>(ToggleGroup.Root, 'root')

export const Item = withContext<HTMLButtonElement, ToggleGroup.ItemProps>(ToggleGroup.Item, 'item')

export {
  ToggleGroupContext as Context,
  type ToggleGroupContextProps as ContextProps,
} from '@ark-ui/react/toggle-group'



================================================
FILE: src/components/park/ui/tooltip.tsx
================================================
import { Tooltip } from '@ark-ui/react/tooltip'
import { type VariantProps, tv } from 'tailwind-variants'
import { createStyleContext } from '~/components/park/lib/create-style-context'

const tooltip = tv(
  {
    base: 'tooltip',
    slots: {
      trigger: 'tooltip__trigger',
      arrow: 'tooltip__arrow',
      arrowTip: 'tooltip__arrowTip',
      positioner: 'tooltip__positioner',
      content: 'tooltip__content',
    },
    variants: {},
  },
  { twMerge: false },
)
const { withRootProvider, withContext } = createStyleContext(tooltip)

export interface RootProps extends Tooltip.RootProps, VariantProps<typeof tooltip> {}
export const Root = withRootProvider<RootProps>(Tooltip.Root)

export const Arrow = withContext<HTMLDivElement, Tooltip.ArrowProps>(Tooltip.Arrow, 'arrow')

export const ArrowTip = withContext<HTMLDivElement, Tooltip.ArrowTipProps>(
  Tooltip.ArrowTip,
  'arrowTip',
)

export const Content = withContext<HTMLDivElement, Tooltip.ContentProps>(Tooltip.Content, 'content')

export const Positioner = withContext<HTMLDivElement, Tooltip.PositionerProps>(
  Tooltip.Positioner,
  'positioner',
)

export const Trigger = withContext<HTMLButtonElement, Tooltip.TriggerProps>(
  Tooltip.Trigger,
  'trigger',
)

export {
  TooltipContext as Context,
  type TooltipContextProps as ContextProps,
} from '@ark-ui/react/tooltip'



================================================
FILE: src/components/shadcn/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
FILE: src/components/shadcn/ui/accordion.tsx
================================================
"use client";

import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDown } from "lucide-react";
import { cn } from "@/components/shadcn/lib/utils";

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
));
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
));

AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };



================================================
FILE: src/components/shadcn/ui/alert-dialog.tsx
================================================
"use client";

import * as React from "react";
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog";

import { cn } from "@/components/shadcn/lib/utils";
import { buttonVariants } from "@/components/shadcn/ui/button";

const AlertDialog = AlertDialogPrimitive.Root;

const AlertDialogTrigger = AlertDialogPrimitive.Trigger;

const AlertDialogPortal = AlertDialogPrimitive.Portal;

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
    ref={ref}
  />
));
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
AlertDialogHeader.displayName = "AlertDialogHeader";

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
AlertDialogFooter.displayName = "AlertDialogFooter";

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
));
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName;

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
));
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className,
    )}
    {...props}
  />
));
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};



================================================
FILE: src/components/shadcn/ui/alert.tsx
================================================
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/components/shadcn/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
));
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
));
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
));
AlertDescription.displayName = "AlertDescription";

export { Alert, AlertTitle, AlertDescription };



================================================
FILE: src/components/shadcn/ui/aspect-ratio.tsx
================================================
"use client";

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio";

const AspectRatio = AspectRatioPrimitive.Root;

export { AspectRatio };



================================================
FILE: src/components/shadcn/ui/avatar.tsx
================================================
"use client";

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/components/shadcn/lib/utils";

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className,
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className,
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };



================================================
FILE: src/components/shadcn/ui/badge.tsx
================================================
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/components/shadcn/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };



================================================
FILE: src/components/shadcn/ui/breadcrumb.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { ChevronRight, MoreHorizontal } from "lucide-react";

import { cn } from "@/components/shadcn/lib/utils";

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode;
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />);
Breadcrumb.displayName = "Breadcrumb";

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className,
    )}
    {...props}
  />
));
BreadcrumbList.displayName = "BreadcrumbList";

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
));
BreadcrumbItem.displayName = "BreadcrumbItem";

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean;
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  );
});
BreadcrumbLink.displayName = "BreadcrumbLink";

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
));
BreadcrumbPage.displayName = "BreadcrumbPage";

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
);
BreadcrumbSeparator.displayName = "BreadcrumbSeparator";

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
);
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis";

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
};



================================================
FILE: src/components/shadcn/ui/button.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/components/shadcn/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };



================================================
FILE: src/components/shadcn/ui/calendar.tsx
================================================
"use client";

import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/components/shadcn/lib/utils";
import { buttonVariants } from "@/components/shadcn/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100",
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100",
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };



================================================
FILE: src/components/shadcn/ui/card.tsx
================================================
import * as React from "react";

import { cn } from "@/components/shadcn/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className,
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};



================================================
FILE: src/components/shadcn/ui/carousel.tsx
================================================
"use client";

import * as React from "react";
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react";
import { ArrowLeft, ArrowRight } from "lucide-react";

import { cn } from "@/components/shadcn/lib/utils";
import { Button } from "@/components/shadcn/ui/button";

type CarouselApi = UseEmblaCarouselType[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;
type CarouselOptions = UseCarouselParameters[0];
type CarouselPlugin = UseCarouselParameters[1];

type CarouselProps = {
  opts?: CarouselOptions;
  plugins?: CarouselPlugin;
  orientation?: "horizontal" | "vertical";
  setApi?: (api: CarouselApi) => void;
};

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0];
  api: ReturnType<typeof useEmblaCarousel>[1];
  scrollPrev: () => void;
  scrollNext: () => void;
  canScrollPrev: boolean;
  canScrollNext: boolean;
} & CarouselProps;

const CarouselContext = React.createContext<CarouselContextProps | null>(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />");
  }

  return context;
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref,
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins,
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === "ArrowRight") {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext],
    );

    React.useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on("reInit", onSelect);
      api.on("select", onSelect);

      return () => {
        api?.off("select", onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  },
);
Carousel.displayName = "Carousel";

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel();

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className,
        )}
        {...props}
      />
    </div>
  );
});
CarouselContent.displayName = "CarouselContent";

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel();

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className,
      )}
      {...props}
    />
  );
});
CarouselItem.displayName = "CarouselItem";

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className,
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  );
});
CarouselPrevious.displayName = "CarouselPrevious";

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className,
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  );
});
CarouselNext.displayName = "CarouselNext";

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
};



================================================
FILE: src/components/shadcn/ui/chart.tsx
================================================
"use client";

import * as React from "react";
import * as RechartsPrimitive from "recharts";

import { cn } from "@/components/shadcn/lib/utils";

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const;

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode;
    icon?: React.ComponentType;
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  );
};

type ChartContextProps = {
  config: ChartConfig;
};

const ChartContext = React.createContext<ChartContextProps | null>(null);

function useChart() {
  const context = React.useContext(ChartContext);

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />");
  }

  return context;
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig;
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"];
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "[&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className,
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
});
ChartContainer.displayName = "Chart";

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color,
  );

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join("\n")}
}
`,
          )
          .join("\n"),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean;
      hideIndicator?: boolean;
      indicator?: "line" | "dot" | "dashed";
      nameKey?: string;
      labelKey?: string;
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref,
  ) => {
    const { config } = useChart();

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || "value"}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label;

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        );
      }

      if (!value) {
        return null;
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>;
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== "dot";

    return (
      <div
        ref={ref}
        className={cn(
          "border-border/50 grid min-w-[8rem] items-start gap-1.5 rounded-lg border bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className,
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center",
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            },
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center",
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  },
);
ChartTooltipContent.displayName = "ChartTooltip";

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean;
      nameKey?: string;
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref,
  ) => {
    const { config } = useChart();

    if (!payload?.length) {
      return null;
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className,
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground",
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          );
        })}
      </div>
    );
  },
);
ChartLegendContent.displayName = "ChartLegend";

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string,
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined;
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey: string = key;

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string;
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string;
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config];
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
};



================================================
FILE: src/components/shadcn/ui/checkbox.tsx
================================================
"use client";

import * as React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { Check } from "lucide-react";

import { cn } from "@/components/shadcn/lib/utils";

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };



================================================
FILE: src/components/shadcn/ui/collapsible.tsx
================================================
"use client";

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible";

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;

export { Collapsible, CollapsibleTrigger, CollapsibleContent };



================================================
FILE: src/components/shadcn/ui/command.tsx
================================================
"use client";

import * as React from "react";
import { type DialogProps } from "@radix-ui/react-dialog";
import { Command as CommandPrimitive } from "cmdk";
import { Search } from "lucide-react";

import { cn } from "@/components/shadcn/lib/utils";
import { Dialog, DialogContent } from "@/components/shadcn/ui/dialog";

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className,
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
));

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className,
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className,
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
};
CommandShortcut.displayName = "CommandShortcut";

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};



================================================
FILE: src/components/shadcn/ui/context-menu.tsx
================================================
"use client";

import * as React from "react";
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/components/shadcn/lib/utils";

const ContextMenu = ContextMenuPrimitive.Root;

const ContextMenuTrigger = ContextMenuPrimitive.Trigger;

const ContextMenuGroup = ContextMenuPrimitive.Group;

const ContextMenuPortal = ContextMenuPrimitive.Portal;

const ContextMenuSub = ContextMenuPrimitive.Sub;

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
));
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
));
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
));
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName;

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
));
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
));
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
};
ContextMenuShortcut.displayName = "ContextMenuShortcut";

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
};



================================================
FILE: src/components/shadcn/ui/dialog.tsx
================================================
"use client";

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { X } from "lucide-react";

import { cn } from "@/components/shadcn/lib/utils";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};



================================================
FILE: src/components/shadcn/ui/drawer.tsx
================================================
"use client";

import * as React from "react";
import { Drawer as DrawerPrimitive } from "vaul";

import { cn } from "@/components/shadcn/lib/utils";

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
);
Drawer.displayName = "Drawer";

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className,
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = "DrawerContent";

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
);
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
);
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};



================================================
FILE: src/components/shadcn/ui/dropdown-menu.tsx
================================================
"use client";

import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/components/shadcn/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};



================================================
FILE: src/components/shadcn/ui/form.tsx
================================================
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form";

import { cn } from "@/components/shadcn/lib/utils";
import { Label } from "@/components/shadcn/ui/label";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
);

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = "FormItem";

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = "FormLabel";

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = "FormControl";

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  );
});
FormDescription.displayName = "FormDescription";

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = "FormMessage";

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};



================================================
FILE: src/components/shadcn/ui/hover-card.tsx
================================================
"use client";

import * as React from "react";
import * as HoverCardPrimitive from "@radix-ui/react-hover-card";

import { cn } from "@/components/shadcn/lib/utils";

const HoverCard = HoverCardPrimitive.Root;

const HoverCardTrigger = HoverCardPrimitive.Trigger;

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName;

export { HoverCard, HoverCardTrigger, HoverCardContent };



================================================
FILE: src/components/shadcn/ui/input-otp.tsx
================================================
"use client";

import * as React from "react";
import { OTPInput, OTPInputContext } from "input-otp";
import { Dot } from "lucide-react";

import { cn } from "@/components/shadcn/lib/utils";

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName,
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
));
InputOTP.displayName = "InputOTP";

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
));
InputOTPGroup.displayName = "InputOTPGroup";

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext);
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className,
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="animate-caret-blink h-4 w-px bg-foreground duration-1000" />
        </div>
      )}
    </div>
  );
});
InputOTPSlot.displayName = "InputOTPSlot";

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
));
InputOTPSeparator.displayName = "InputOTPSeparator";

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };



================================================
FILE: src/components/shadcn/ui/input.tsx
================================================
import * as React from "react";

import { cn } from "@/components/shadcn/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };



================================================
FILE: src/components/shadcn/ui/label.tsx
================================================
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/components/shadcn/lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };



================================================
FILE: src/components/shadcn/ui/menubar.tsx
================================================
"use client";

import * as React from "react";
import * as MenubarPrimitive from "@radix-ui/react-menubar";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/components/shadcn/lib/utils";

const MenubarMenu = MenubarPrimitive.Menu;

const MenubarGroup = MenubarPrimitive.Group;

const MenubarPortal = MenubarPrimitive.Portal;

const MenubarSub = MenubarPrimitive.Sub;

const MenubarRadioGroup = MenubarPrimitive.RadioGroup;

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className,
    )}
    {...props}
  />
));
Menubar.displayName = MenubarPrimitive.Root.displayName;

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className,
    )}
    {...props}
  />
));
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
));
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref,
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className,
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  ),
);
MenubarContent.displayName = MenubarPrimitive.Content.displayName;

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
MenubarItem.displayName = MenubarPrimitive.Item.displayName;

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
));
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
));
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
MenubarLabel.displayName = MenubarPrimitive.Label.displayName;

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
};
MenubarShortcut.displayname = "MenubarShortcut";

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
};



================================================
FILE: src/components/shadcn/ui/navigation-menu.tsx
================================================
import * as React from "react";
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import { cva } from "class-variance-authority";
import { ChevronDown } from "lucide-react";

import { cn } from "@/components/shadcn/lib/utils";

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className,
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className,
    )}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50",
);

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto",
      className,
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className,
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName;

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className,
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
));
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName;

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
};



================================================
FILE: src/components/shadcn/ui/pagination.tsx
================================================
import * as React from "react";
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react";

import { cn } from "@/components/shadcn/lib/utils";
import { ButtonProps, buttonVariants } from "@/components/shadcn/ui/button";

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
);
Pagination.displayName = "Pagination";

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
));
PaginationContent.displayName = "PaginationContent";

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
));
PaginationItem.displayName = "PaginationItem";

type PaginationLinkProps = {
  isActive?: boolean;
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">;

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className,
    )}
    {...props}
  />
);
PaginationLink.displayName = "PaginationLink";

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = "PaginationPrevious";

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = "PaginationNext";

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = "PaginationEllipsis";

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
};



================================================
FILE: src/components/shadcn/ui/popover.tsx
================================================
"use client";

import * as React from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";

import { cn } from "@/components/shadcn/lib/utils";

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent };



================================================
FILE: src/components/shadcn/ui/progress.tsx
================================================
"use client";

import * as React from "react";
import * as ProgressPrimitive from "@radix-ui/react-progress";

import { cn } from "@/components/shadcn/lib/utils";

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className,
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));
Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };



================================================
FILE: src/components/shadcn/ui/radio-group.tsx
================================================
"use client";

import * as React from "react";
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";
import { Circle } from "lucide-react";

import { cn } from "@/components/shadcn/lib/utils";

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  );
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };



================================================
FILE: src/components/shadcn/ui/resizable.tsx
================================================
"use client";

import { GripVertical } from "lucide-react";
import * as ResizablePrimitive from "react-resizable-panels";

import { cn } from "@/components/shadcn/lib/utils";

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className,
    )}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className,
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };



================================================
FILE: src/components/shadcn/ui/scroll-area.tsx
================================================
"use client";

import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";

import { cn } from "@/components/shadcn/lib/utils";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className,
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };



================================================
FILE: src/components/shadcn/ui/select.tsx
================================================
"use client";

import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { Check, ChevronDown, ChevronUp } from "lucide-react";

import { cn } from "@/components/shadcn/lib/utils";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};



================================================
FILE: src/components/shadcn/ui/separator.tsx
================================================
"use client";

import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/components/shadcn/lib/utils";

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref,
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className,
      )}
      {...props}
    />
  ),
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };



================================================
FILE: src/components/shadcn/ui/sheet.tsx
================================================
"use client";

import * as React from "react";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { cva, type VariantProps } from "class-variance-authority";
import { X } from "lucide-react";

import { cn } from "@/components/shadcn/lib/utils";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  },
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};



================================================
FILE: src/components/shadcn/ui/skeleton.tsx
================================================
import { cn } from "@/components/shadcn/lib/utils";

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  );
}

export { Skeleton };



================================================
FILE: src/components/shadcn/ui/slider.tsx
================================================
"use client";

import * as React from "react";
import * as SliderPrimitive from "@radix-ui/react-slider";

import { cn } from "@/components/shadcn/lib/utils";

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className,
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
));
Slider.displayName = SliderPrimitive.Root.displayName;

export { Slider };



================================================
FILE: src/components/shadcn/ui/sonner.tsx
================================================
"use client";

import { useTheme } from "next-themes";
import { Toaster as Sonner } from "sonner";

type ToasterProps = React.ComponentProps<typeof Sonner>;

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-base-300  group-[.toaster]:border-border group-[.toaster]:shadow-lg items-start p-2",
          description: "group-[.toast]:texe-sm",
          title: "group-[.toast]:text-xl",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  );
};

export { Toaster };



================================================
FILE: src/components/shadcn/ui/switch.tsx
================================================
"use client";

import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";

import { cn } from "@/components/shadcn/lib/utils";

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className,
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0",
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };



================================================
FILE: src/components/shadcn/ui/table.tsx
================================================
import * as React from "react";

import { cn } from "@/components/shadcn/lib/utils";

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
));
Table.displayName = "Table";

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
));
TableHeader.displayName = "TableHeader";

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
));
TableBody.displayName = "TableBody";

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
      className,
    )}
    {...props}
  />
));
TableFooter.displayName = "TableFooter";

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "hover:bg-muted/50 border-b transition-colors data-[state=selected]:bg-muted",
      className,
    )}
    {...props}
  />
));
TableRow.displayName = "TableRow";

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className,
    )}
    {...props}
  />
));
TableHead.displayName = "TableHead";

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
));
TableCell.displayName = "TableCell";

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
));
TableCaption.displayName = "TableCaption";

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};



================================================
FILE: src/components/shadcn/ui/tabs.tsx
================================================
"use client";

import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "@/components/shadcn/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className,
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className,
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className,
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };



================================================
FILE: src/components/shadcn/ui/textarea.tsx
================================================
import * as React from "react";

import { cn } from "@/components/shadcn/lib/utils";

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Textarea.displayName = "Textarea";

export { Textarea };



================================================
FILE: src/components/shadcn/ui/toast.tsx
================================================
"use client";

import * as React from "react";
import * as ToastPrimitives from "@radix-ui/react-toast";
import { cva, type VariantProps } from "class-variance-authority";
import { X } from "lucide-react";

import { cn } from "@/components/shadcn/lib/utils";

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className,
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className,
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "text-foreground/50 absolute right-2 top-2 rounded-md p-1 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className,
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};



================================================
FILE: src/components/shadcn/ui/toggle-group.tsx
================================================
"use client";

import * as React from "react";
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";
import { type VariantProps } from "class-variance-authority";

import { cn } from "@/components/shadcn/lib/utils";
import { toggleVariants } from "@/components/shadcn/ui/toggle";

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
});

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
));

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext);

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className,
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  );
});

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;

export { ToggleGroup, ToggleGroupItem };



================================================
FILE: src/components/shadcn/ui/toggle.tsx
================================================
"use client";

import * as React from "react";
import * as TogglePrimitive from "@radix-ui/react-toggle";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/components/shadcn/lib/utils";

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };



================================================
FILE: src/components/shadcn/ui/tooltip.tsx
================================================
"use client";

import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/components/shadcn/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };



================================================
FILE: src/routes/__root.tsx
================================================
import {
  createRootRouteWithContext,
  Link,
  Outlet,
  useRouterState,
} from "@tanstack/react-router";
import type { RouterCntextTypes } from "@/main";
import { MainNavBar } from "@/components/navigation/MainNavBar";
import { useCallback, useEffect } from "react";
import { themeChange } from "theme-change";
import { TanStackRouterDevtools } from "@tanstack/router-devtools";
import { TailwindIndicator } from "@/components/navigation/tailwind-indicator";
import { getDaisyUiInlineCSSVariables } from "@/components/all-in-one-theme-editor/utils/daisyui-css-variables-helpers";
import { defaultThemes } from "@/components/all-in-one-theme-editor/utils/theme-default-values";
import { useDaisyUITheme } from "@/components/all-in-one-theme-editor/utils/use-search-params-theme";
import { daisyUIThemeSearchParamsSchema } from "@/components/all-in-one-theme-editor/utils/schema";
import {
  ExportThemeDaisyUiDrawer,
  ImportThemeDaisyUiDrawer,
  MainDaisyUiDrawer,
} from "@/components/navigation/DaisyUiDrawers";
import { hideSplashScreen } from "vite-plugin-splash-screen/runtime";
import { Intro } from "./-components/Intro";
import { DrawerIds } from "./-components/type";
import { DaisyUiDevtools } from "@/components/navigation/DaisyUiDevtools";




export const Route = createRootRouteWithContext<RouterCntextTypes>()({
  component: RootComponent,
  validateSearch: (input) => {
    return daisyUIThemeSearchParamsSchema.parse(input);
  },
});

function RootComponent() {
  const { searchParams, updateWholeTheme, navigate } = useDaisyUITheme();
  const { status } = useRouterState();

  useEffect(() => {
    hideSplashScreen();
    themeChange(false);
    // 👆 false parameter is required for react project
    navigate({
      search: defaultThemes({ theme: searchParams }),
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  useEffect(() => {
    const default_data_theme = defaultThemes({
      theme: { ...searchParams },
    });
    navigate({
      search: default_data_theme,
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [searchParams?.["--theme-name"]?.value]);

  const closeDrawer = useCallback(
    (drawerId: DrawerIds) => {
      const drawer = document.getElementById(drawerId) as HTMLInputElement;
      if (drawer) {
        drawer.checked = false;
      }
    },
    [
      /* dependencies */
    ],
  );
  return (
    <div
      data-theme={searchParams?.["--theme-name"]?.value}
      style={getDaisyUiInlineCSSVariables(searchParams)}
      className="drawer flex h-full w-full flex-col items-center  justify-between bg-base-100 text-base-content"
    >
      <input id="main-page-drawer" type="checkbox" className="drawer-toggle" />
      <div className="drawer-content flex w-full flex-col">
        {/* Navbar */}
        <div className="sticky top-0 flex flex-col items-center justify-center bg-base-200">
          <div className="flex h-full w-full items-center justify-center p-2">
            <label
              htmlFor="main-page-drawer"
              aria-label="open sidebar"
              className="btn btn-square btn-ghost btn-sm"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                className="inline-block h-6 w-6 stroke-current"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M4 6h16M4 12h16M4 18h16"
                ></path>
              </svg>
            </label>
            <Link to="/" search={searchParams} classID="px-2">
              <h1 className="mx-2 text-2xl font-bold hover:text-accent">UI</h1>
            </Link>

            <MainNavBar />
          </div>
          {status === "pending" ? (
            <div className="skeleton h-1 w-full bg-accent" />
          ) : (
            <div className="h-1 w-full" />
          )}
        </div>
        <Intro />
        <Outlet />
      </div>
      {/* Page content here */}
      <MainDaisyUiDrawer
        closeDrawer={closeDrawer}
      />
      {/* export theme drawer */}
      <ExportThemeDaisyUiDrawer searchParams={searchParams} />
      {/* import theme drawer */}
      <ImportThemeDaisyUiDrawer
        searchParams={searchParams}
        updateWholeTheme={updateWholeTheme}
      />
      <TailwindIndicator />
      <TanStackRouterDevtools position="bottom-left" />
      <DaisyUiDevtools position="start" iconClassname="size-6 "/>
      {/* <DaisyUIThemeEditor theme={searchParams} /> */}

      <footer className="flex w-full items-center justify-between bg-base-200 p-2 px-4">
        <a
          className="link-hover link"
          href="https://tigawanna-portfolio.vercel.app/"
          target="_blank"
        >
          tigawanna
        </a>
        <a
          className="link-hover link"
          href="https://github.com/tigawanna/daisyui-theme-builder"
          target="_blank"
        >
          code on github
        </a>
      </footer>
    </div>
  );
}



================================================
FILE: src/routes/about.tsx
================================================
import { createFileRoute } from "@tanstack/react-router";

export const Route = createFileRoute("/about")({
  component: () => <div>Hello /about!</div>,
});



================================================
FILE: src/routes/index.tsx
================================================
import { createFileRoute } from "@tanstack/react-router";
import { AllDaisyUIComponents } from "@/components/daisyui/AllDaisyUI";

export const Route = createFileRoute("/")({
  component: HomePage,
});

function HomePage() {
  return (
    <div className="flex h-full min-h-screen w-full flex-col items-center gap-7">
      <AllDaisyUIComponents />
    </div>
  );
}



================================================
FILE: src/routes/-components/Intro.tsx
================================================
import { Info, X } from "lucide-react";
import { useState } from "react";

export function Intro() {
  const [open, setOpen] = useState(true);
  if (!open) return null;
  return (
    <div className="flex h-full w-full flex-col items-center justify-center p-2">
      <div className="flex w-full justify-between gap-3">
        <div className="hidden lg:flex">
          {" "}
          👈 Open side drawer to Edit themes
        </div>
        <div className="flex w-fit gap-2 rounded-xl border border-info p-2 text-sm text-info">
          <Info className="size-4" />
          theme doesn't look right? try switching to dark/loight ☝️
        </div>
        <div className="hidden items-center gap-2 md:flex">
          Import and export ☝️{" "}
          <X
            onClick={() => setOpen(!open)}
            className="size-4 cursor-pointer text-error"
          />
        </div>
      </div>
    </div>
  );
}



================================================
FILE: src/routes/-components/type.ts
================================================
export type DrawerIds = "main-page-drawer" | "daisyui-theme-editor-drawer";



================================================
FILE: src/routes/shadcn/charts.lazy.tsx
================================================
import { createLazyFileRoute } from "@tanstack/react-router";
import ChartsDemo from "./-components/demos/ChartsDemo";

export const Route = createLazyFileRoute("/shadcn/charts")({
  component: Charts,
});

export function Charts() {
  return (
    <div className="flex h-full min-h-screen w-full flex-col items-center justify-center">
      <ChartsDemo />
    </div>
  );
}



================================================
FILE: src/routes/shadcn/index.lazy.tsx
================================================
import { createLazyFileRoute } from "@tanstack/react-router";
import { AllComponents } from "./-components/AllComponents";
import { Toaster } from "@/components/shadcn/ui/sonner";

export const Route = createLazyFileRoute("/shadcn/")({
  component: index,
});

function index() {
  return (
    <div className="flex h-full min-h-screen w-full flex-col items-center justify-center">
      <AllComponents />
      <Toaster />
    </div>
  );
}



================================================
FILE: src/routes/shadcn/-components/AllComponents.tsx
================================================
import { NavbarDemo } from "./NavbarDemo";
import { Outputs } from "./Outputs";

interface AllComponentsProps {}

export function AllComponents({}: AllComponentsProps) {
  return (
    <div className="flex h-full w-full flex-col items-center justify-center gap-3">
      <NavbarDemo />
      <Outputs />
    </div>
  );
}



================================================
FILE: src/routes/shadcn/-components/CarouselDemo.tsx
================================================
import * as React from "react";

import { Card, CardContent } from "@/components/shadcn/ui/card";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/shadcn/ui/carousel";

export default function CarouselDemo() {
  return (
    <Carousel className="mx-8 w-full max-w-xs">
      <CarouselContent>
        {Array.from({ length: 5 }).map((_, index) => (
          <CarouselItem key={index}>
            <div className="p-1">
              <Card>
                <CardContent className="flex aspect-square items-center justify-center p-6">
                  <span className="text-4xl font-semibold">{index + 1}</span>
                </CardContent>
              </Card>
            </div>
          </CarouselItem>
        ))}
      </CarouselContent>
      <CarouselPrevious />
      <CarouselNext />
    </Carousel>
  );
}



================================================
FILE: src/routes/shadcn/-components/Inputs.tsx
================================================
import { AllComponents } from "./AllComponents";

interface InputsProps {}

export function Inputs({}: InputsProps) {
  return (
    <div className="flex h-full w-full flex-col items-center justify-center">
      <AllComponents />
    </div>
  );
}



================================================
FILE: src/routes/shadcn/-components/NavbarDemo.tsx
================================================
import { lazy, Suspense } from "react";
import { AvatarDemo } from "./demos/AvatarDemo";
import { BreadcrumbDemo } from "./demos/BreadCumbsDemo";
const DropdownMenuDemo = lazy(() => import("./demos/DropdownMenuDemo"));
const NavigationMenuDemo = lazy(() => import("./demos/NavigationMenuDemo"));

export function NavbarDemo() {
  return (
    <nav className="flex h-10 w-full items-center justify-between gap-3 bg-primary/10 p-2">
      <h1 className="text-xl font-bold">shadcn</h1>
      <BreadcrumbDemo />
      <Suspense
        fallback={
          <div className="skeleton h-8 w-full items-center justify-center bg-base-200">
            Loading...
          </div>
        }
      >
        <NavigationMenuDemo />
      </Suspense>
      <nav className="flex w-fit items-center justify-center gap-2">
        <AvatarDemo />
        <Suspense
          fallback={
            <div className="skeleton h-8 w-full items-center justify-center bg-base-200">
              Loading...
            </div>
          }
        >
          <DropdownMenuDemo />
        </Suspense>
      </nav>
    </nav>
  );
}



================================================
FILE: src/routes/shadcn/-components/Outputs.tsx
================================================
import { lazy, Suspense } from "react";
import { AccordionDemo } from "./demos/AccordionDemo";
import { AlertDemo } from "./demos/Alertdemo";
import { AlertDialogDemo } from "./demos/AlertDialogDemo";
import { BadgeDemo } from "./demos/BadgeDemo";
import { ButtonDemo } from "./demos/ButtonDemo";
import ChartsDemo from "./demos/ChartsDemo";
import { ComboboxDemo } from "./demos/ComboboxDemo";
import { SonnerDemo } from "./demos/Sonnerdemo";
import { SkeletonDemo } from "./demos/SkeletonDemo";
import { DataTableDemo } from "./demos/data-table/DataTableDemo";

const CommandDemo = lazy(() => import("./demos/CommandDemo"));
const CarouselDemo = lazy(() => import("./CarouselDemo"));
const CalendarDemo = lazy(() => import("./demos/CalenderDemo"));
const ContextMenuDemo = lazy(() => import("./demos/ContextMenuDemo"));
const DrawerDemo = lazy(() => import("./demos/DrawerDemo"));
const TabsDemo = lazy(() => import("./demos/TabsDemo"));
const CardWithForm = lazy(() => import("./demos/CardDemo"));

export function Outputs() {
  return (
    <div className="flex h-full w-full flex-col items-center justify-center">
      <div className="flex w-full flex-col items-center justify-center gap-5 p-5">
        <div className="flex w-full flex-wrap items-center justify-center gap-5 p-5">
          <AccordionDemo />
          <CalendarDemo />
        </div>
        <div className="flex w-full flex-wrap items-center justify-center gap-5 p-5">
          <AlertDemo />
          <ButtonDemo />
          <BadgeDemo />
          <div className="flex w-fit min-w-[25%] flex-col items-center justify-center gap-1 md:max-w-[50%]">
            <h1 className="text-xl">skeleton</h1>
            <SkeletonDemo />
          </div>
          <div className="flex w-fit min-w-[25%] flex-col items-center justify-center gap-1 md:max-w-[50%]">
            <h1 className="text-xl">Alert dialog</h1>
            <AlertDialogDemo />
          </div>

          <div className="flex w-fit min-w-[25%] flex-col items-center justify-center gap-1 md:max-w-[50%]">
            <h1 className="text-xl">Combobox</h1>
            <ComboboxDemo />
          </div>
          <div className="flex w-fit min-w-[25%] flex-col items-center justify-center gap-1 md:max-w-[50%]">
            <h1 className="text-xl">Sonner</h1>
            <SonnerDemo />
          </div>
          <div className="flex w-fit min-w-[25%] flex-col items-center justify-center gap-1 md:max-w-[50%]">
            <h1 className="text-xl">Context Menu</h1>
            <Suspense
              fallback={
                <div className="skeleton flex min-h-[200px] w-full items-center justify-center bg-base-200">
                  Loading...
                </div>
              }
            >
              <ContextMenuDemo />
            </Suspense>
          </div>
          <div className="flex w-fit min-w-[25%] flex-col items-center justify-center gap-1 md:max-w-[50%]">
            <h1 className="text-xl">Tabs</h1>
            <Suspense
              fallback={
                <div className="skeleton flex min-h-[200px] w-full items-center justify-center bg-base-200">
                  Loading...
                </div>
              }
            >
              <TabsDemo />
            </Suspense>
          </div>
        </div>
        <div className="flex w-full flex-wrap items-center justify-center gap-6 p-5">
          <div className="flex w-fit min-w-[25%] flex-col items-center justify-center gap-1 md:max-w-[50%]">
            <h1 className="text-xl">Card with form</h1>
            <Suspense
              fallback={
                <div className="skeleton flex min-h-[200px] w-full items-center justify-center bg-base-200">
                  Loading...
                </div>
              }
            >
              <CardWithForm />
            </Suspense>
          </div>
          <div className="flex w-fit min-w-[25%] flex-col items-center justify-center gap-1 md:max-w-[50%]">
            <h1 className="text-xl">Carousel</h1>
            <Suspense
              fallback={
                <div className="skeleton flex min-h-[200px] w-full items-center justify-center bg-base-200">
                  Loading...
                </div>
              }
            >
              <CarouselDemo />
            </Suspense>
          </div>
        </div>
        <div className="flex w-full flex-wrap items-center justify-center gap-6 p-5">
          <Suspense
            fallback={
              <div className="skeleton flex min-h-[200px] w-full items-center justify-center bg-base-200">
                Loading...
              </div>
            }
          >
            <CommandDemo />
          </Suspense>
          <div className="flex w-full flex-col items-center justify-center gap-1 md:max-w-[50%]">
            <h1 className="text-xl">Chart</h1>
            <Suspense
              fallback={
                <div className="skeleton flex min-h-[200px] w-full items-center justify-center bg-base-200">
                  Loading...
                </div>
              }
            >
              <ChartsDemo />
            </Suspense>
          </div>
        </div>

        <div className="flex w-full flex-col items-center justify-center gap-1 md:max-w-[50%]">
          <h1 className="text-xl">Data Table</h1>
          <Suspense
            fallback={
              <div className="skeleton flex min-h-[200px] w-full items-center justify-center bg-base-200">
                Loading...
              </div>
            }
          >
            <DataTableDemo />
          </Suspense>
        </div>
        <div className="flex w-full flex-col items-center justify-center gap-6 p-5">
          <Suspense
            fallback={
              <div className="skeleton flex min-h-[200px] w-full items-center justify-center bg-base-200">
                Loading...
              </div>
            }
          >
            <DrawerDemo />
          </Suspense>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/AccordionDemo.tsx
================================================
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/shadcn/ui/accordion";


export function AccordionDemo() {
  return (
    <Accordion type="single" collapsible className="w-fit min-w-[40%]">
      <AccordionItem value="item-1">
        <AccordionTrigger>Is it accessible?</AccordionTrigger>
        <AccordionContent>
          Yes. It adheres to the WAI-ARIA design pattern.
        </AccordionContent>
      </AccordionItem>
      <AccordionItem value="item-2">
        <AccordionTrigger>Is it styled?</AccordionTrigger>
        <AccordionContent>
          Yes. It comes with default styles that matches the other
          components&apos; aesthetic.
        </AccordionContent>
      </AccordionItem>
      <AccordionItem value="item-3">
        <AccordionTrigger>Is it animated?</AccordionTrigger>
        <AccordionContent>
          Yes. It&apos;s animated by default, but you can disable it if you
          prefer.
        </AccordionContent>
      </AccordionItem>
    </Accordion>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/Alertdemo.tsx
================================================
import { Terminal } from "lucide-react";
import {
  Alert,
  AlertDescription,
  AlertTitle,
} from "@/components/shadcn/ui/alert";

export function AlertDemo() {
  return (
    <Alert className="w-fit">
      <Terminal className="h-4 w-4" />
      <AlertTitle>Heads up!</AlertTitle>
      <AlertDescription>
        You can add components to your app using the cli.
      </AlertDescription>
    </Alert>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/AlertDialogDemo.tsx
================================================
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/shadcn/ui/alert-dialog";
import { Button } from "@/components/shadcn/ui/button";

export function AlertDialogDemo() {
  return (
    <AlertDialog>
      <AlertDialogTrigger asChild>
        <Button variant="outline">Show Dialog</Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
          <AlertDialogDescription>
            This action cannot be undone. This will permanently delete your
            account and remove your data from our servers.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>Cancel</AlertDialogCancel>
          <AlertDialogAction>Continue</AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/AvatarDemo.tsx
================================================
import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from "@/components/shadcn/ui/avatar";

export function AvatarDemo() {
  return (
    <Avatar>
      <AvatarImage src="https://github.com/shadcn.png" alt="@shadcn" />
      <AvatarFallback>CN</AvatarFallback>
    </Avatar>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/BadgeDemo.tsx
================================================
import { Badge } from "@/components/shadcn/ui/badge";

export function BadgeDemo() {
  return (
    <div className="flex w-full flex-wrap items-center justify-center">
      <div className="w-full p-2 text-center text-xl">Badges</div>
      <Badge>Badge</Badge>
      <Badge variant={"secondary"}>Secondary Badge</Badge>
      <Badge variant={"outline"}>Outline Badge</Badge>
      <Badge variant={"destructive"}>DestructiveBadge</Badge>
    </div>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/BreadCumbsDemo.tsx
================================================
import {
  Breadcrumb,
  BreadcrumbEllipsis,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/shadcn/ui/breadcrumb";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/shadcn/ui/dropdown-menu";

export function BreadcrumbDemo() {
  return (
    <Breadcrumb>
      <BreadcrumbList>
        <BreadcrumbItem>
          <BreadcrumbLink href="/">Home</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <DropdownMenu>
            <DropdownMenuTrigger className="flex items-center gap-1">
              <BreadcrumbEllipsis className="h-4 w-4" />
              <span className="sr-only">Toggle menu</span>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="start">
              <DropdownMenuItem>Documentation</DropdownMenuItem>
              <DropdownMenuItem>Themes</DropdownMenuItem>
              <DropdownMenuItem>GitHub</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <BreadcrumbLink href="/docs/components">Components</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
        </BreadcrumbItem>
      </BreadcrumbList>
    </Breadcrumb>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/ButtonDemo.tsx
================================================
import { Button } from "@/components/shadcn/ui/button";

export function ButtonDemo() {
  return (
    <div className="flex w-full flex-wrap items-center justify-center gap-1">
      <div className="w-full p-2 text-center text-xl">Buttons</div>
      <Button variant="default">Default Button</Button>
      <Button variant={"secondary"}>Secondary Button</Button>
      <Button variant="destructive">Destructive Button</Button>
      <Button variant={"ghost"}>Ghost Button</Button>
      <Button variant={"link"}>Link Button</Button>
      <Button variant={"outline"}>Outline Button</Button>
    </div>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/CalenderDemo.tsx
================================================
"use client";
import * as React from "react";
import { Calendar } from "@/components/shadcn/ui/calendar";

export default function CalendarDemo() {
  const [date, setDate] = React.useState<Date | undefined>(new Date());

  return (
    <Calendar
      mode="single"
      selected={date}
      onSelect={setDate}
      className="rounded-md border"
    />
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/CardDemo.tsx
================================================
import * as React from "react";
import { Button } from "@/components/shadcn/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/shadcn/ui/card";
import { Input } from "@/components/shadcn/ui/input";
import { Label } from "@/components/shadcn/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/shadcn/ui/select";
import { SliderDemo } from "./Sliderdemo";
import { Checkbox } from "@/components/shadcn/ui/checkbox";

export default function CardWithForm() {
  return (
    <Card className="w-[350px]">
      <CardHeader>
        <CardTitle>Create project</CardTitle>
        <CardDescription>Deploy your new project in one-click.</CardDescription>
      </CardHeader>
      <CardContent>
        <form>
          <div className="grid w-full items-center gap-4">
            <div className="flex flex-col space-y-1.5">
              <Label htmlFor="name">Name</Label>
              <Input id="name" placeholder="Name of your project" />
            </div>
            <div className="flex flex-col space-y-1.5">
              <Label htmlFor="framework">Framework</Label>
              <Select>
                <SelectTrigger id="framework">
                  <SelectValue placeholder="Select" />
                </SelectTrigger>
                <SelectContent position="popper">
                  <SelectItem value="next">Next.js</SelectItem>
                  <SelectItem value="sveltekit">SvelteKit</SelectItem>
                  <SelectItem value="astro">Astro</SelectItem>
                  <SelectItem value="nuxt">Nuxt.js</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="w-full p-2">
              <SliderDemo className="w-full" />
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox id="terms" />
              <label
                htmlFor="terms"
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
              >
                Accept terms and conditions
              </label>
            </div>
          </div>
        </form>
      </CardContent>
      <CardFooter className="flex justify-between">
        <Button variant="outline">Cancel</Button>
        <Button>Deploy</Button>
      </CardFooter>
    </Card>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/ChartsDemo.tsx
================================================
"use client";

import { Bar, BarChart, CartesianGrid, XAxis } from "recharts";
import {
  ChartConfig,
  ChartContainer,
  ChartLegend,
  ChartLegendContent,
  ChartTooltip,
  ChartTooltipContent,
} from "@/components/shadcn/ui/chart";

const chartData = [
  { month: "January", desktop: 186, mobile: 80 },
  { month: "February", desktop: 305, mobile: 200 },
  { month: "March", desktop: 237, mobile: 120 },
  { month: "April", desktop: 73, mobile: 190 },
  { month: "May", desktop: 209, mobile: 130 },
  { month: "June", desktop: 214, mobile: 140 },
];

const chartConfig = {
  desktop: {
    label: "Desktop",
    color: "var(--chart-1)",
  },
  mobile: {
    label: "Mobile",
    color: "var(--chart-2)",
  },
} satisfies ChartConfig;

export default function Component() {
  return (
    <ChartContainer config={chartConfig} className="min-h-[200px] w-full p-5">
      <BarChart accessibilityLayer data={chartData}>
        <CartesianGrid vertical={false} />
        <XAxis
          dataKey="month"
          tickLine={false}
          tickMargin={10}
          axisLine={false}
          tickFormatter={(value) => value.slice(0, 3)}
        />
        <ChartTooltip content={<ChartTooltipContent />} />
        <ChartLegend content={<ChartLegendContent />} />
        <Bar dataKey="desktop" fill="var(--color-desktop)" radius={4} />
        <Bar dataKey="mobile" fill="var(--color-mobile)" radius={4} />
      </BarChart>
    </ChartContainer>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/ComboboxDemo.tsx
================================================
"use client";

import * as React from "react";
import { Check, ChevronsUpDown } from "lucide-react";
import { cn } from "@/components/shadcn/lib/utils";
import { Button } from "@/components/shadcn/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/shadcn/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/shadcn/ui/popover";

const frameworks = [
  {
    value: "next.js",
    label: "Next.js",
  },
  {
    value: "sveltekit",
    label: "SvelteKit",
  },
  {
    value: "nuxt.js",
    label: "Nuxt.js",
  },
  {
    value: "remix",
    label: "Remix",
  },
  {
    value: "astro",
    label: "Astro",
  },
];

export function ComboboxDemo() {
  const [open, setOpen] = React.useState(false);
  const [value, setValue] = React.useState("");

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-[200px] justify-between"
        >
          {value
            ? frameworks.find((framework) => framework.value === value)?.label
            : "Select framework..."}
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[200px] p-0">
        <Command>
          <CommandInput placeholder="Search framework..." />
          <CommandList>
            <CommandEmpty>No framework found.</CommandEmpty>
            <CommandGroup>
              {frameworks.map((framework) => (
                <CommandItem
                  key={framework.value}
                  value={framework.value}
                  onSelect={(currentValue) => {
                    setValue(currentValue === value ? "" : currentValue);
                    setOpen(false);
                  }}
                >
                  <Check
                    className={cn(
                      "mr-2 h-4 w-4",
                      value === framework.value ? "opacity-100" : "opacity-0",
                    )}
                  />
                  {framework.label}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/CommandDemo.tsx
================================================
import {
  Calculator,
  Calendar,
  CreditCard,
  Settings,
  Smile,
  User,
} from "lucide-react";

import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
} from "@/components/shadcn/ui/command";

export default function CommandDemo() {
  return (
    <div className="flex h-full w-fit flex-col items-center justify-center gap-2">
      <h1 className="text-xl">Command</h1>
      <Command className="w-fit rounded-lg border shadow-md">
        <CommandInput placeholder="Type a command or search..." />
        <CommandList>
          <CommandEmpty>No results found.</CommandEmpty>
          <CommandGroup heading="Suggestions">
            <CommandItem>
              <Calendar className="mr-2 h-4 w-4" />
              <span>Calendar</span>
            </CommandItem>
            <CommandItem>
              <Smile className="mr-2 h-4 w-4" />
              <span>Search Emoji</span>
            </CommandItem>
            <CommandItem disabled>
              <Calculator className="mr-2 h-4 w-4" />
              <span>Calculator</span>
            </CommandItem>
          </CommandGroup>
          <CommandSeparator />
          <CommandGroup heading="Settings">
            <CommandItem>
              <User className="mr-2 h-4 w-4" />
              <span>Profile</span>
              <CommandShortcut>⌘P</CommandShortcut>
            </CommandItem>
            <CommandItem>
              <CreditCard className="mr-2 h-4 w-4" />
              <span>Billing</span>
              <CommandShortcut>⌘B</CommandShortcut>
            </CommandItem>
            <CommandItem>
              <Settings className="mr-2 h-4 w-4" />
              <span>Settings</span>
              <CommandShortcut>⌘S</CommandShortcut>
            </CommandItem>
          </CommandGroup>
        </CommandList>
      </Command>
    </div>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/ContextMenuDemo.tsx
================================================
import {
  ContextMenu,
  ContextMenuCheckboxItem,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuLabel,
  ContextMenuRadioGroup,
  ContextMenuRadioItem,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuTrigger,
} from "@/components/shadcn/ui/context-menu";

export default function ContextMenuDemo() {
  return (
    <ContextMenu>
      <ContextMenuTrigger className="flex h-[150px] w-[300px] items-center justify-center rounded-md border border-dashed text-sm">
        Right click here
      </ContextMenuTrigger>
      <ContextMenuContent className="w-64">
        <ContextMenuItem inset>
          Back
          <ContextMenuShortcut>⌘[</ContextMenuShortcut>
        </ContextMenuItem>
        <ContextMenuItem inset disabled>
          Forward
          <ContextMenuShortcut>⌘]</ContextMenuShortcut>
        </ContextMenuItem>
        <ContextMenuItem inset>
          Reload
          <ContextMenuShortcut>⌘R</ContextMenuShortcut>
        </ContextMenuItem>
        <ContextMenuSub>
          <ContextMenuSubTrigger inset>More Tools</ContextMenuSubTrigger>
          <ContextMenuSubContent className="w-48">
            <ContextMenuItem>
              Save Page As...
              <ContextMenuShortcut>⇧⌘S</ContextMenuShortcut>
            </ContextMenuItem>
            <ContextMenuItem>Create Shortcut...</ContextMenuItem>
            <ContextMenuItem>Name Window...</ContextMenuItem>
            <ContextMenuSeparator />
            <ContextMenuItem>Developer Tools</ContextMenuItem>
          </ContextMenuSubContent>
        </ContextMenuSub>
        <ContextMenuSeparator />
        <ContextMenuCheckboxItem checked>
          Show Bookmarks Bar
          <ContextMenuShortcut>⌘⇧B</ContextMenuShortcut>
        </ContextMenuCheckboxItem>
        <ContextMenuCheckboxItem>Show Full URLs</ContextMenuCheckboxItem>
        <ContextMenuSeparator />
        <ContextMenuRadioGroup value="pedro">
          <ContextMenuLabel inset>People</ContextMenuLabel>
          <ContextMenuSeparator />
          <ContextMenuRadioItem value="pedro">
            Pedro Duarte
          </ContextMenuRadioItem>
          <ContextMenuRadioItem value="colm">Colm Tuite</ContextMenuRadioItem>
        </ContextMenuRadioGroup>
      </ContextMenuContent>
    </ContextMenu>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/DrawerDemo.tsx
================================================
import * as React from "react";
import { Minus, Plus } from "lucide-react";
import { Bar, BarChart, ResponsiveContainer } from "recharts";

import { Button } from "@/components/shadcn/ui/button";
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from "@/components/shadcn/ui/drawer";

const data = [
  {
    goal: 400,
  },
  {
    goal: 300,
  },
  {
    goal: 200,
  },
  {
    goal: 300,
  },
  {
    goal: 200,
  },
  {
    goal: 278,
  },
  {
    goal: 189,
  },
  {
    goal: 239,
  },
  {
    goal: 300,
  },
  {
    goal: 200,
  },
  {
    goal: 278,
  },
  {
    goal: 189,
  },
  {
    goal: 349,
  },
];

export default function DrawerDemo() {
  const [goal, setGoal] = React.useState(350);

  function onClick(adjustment: number) {
    setGoal(Math.max(200, Math.min(400, goal + adjustment)));
  }

  return (
    <Drawer>
      <DrawerTrigger asChild>
        <Button variant="outline">Open Drawer</Button>
      </DrawerTrigger>
      <DrawerContent>
        <div className="mx-auto w-full max-w-sm">
          <DrawerHeader>
            <DrawerTitle>Move Goal</DrawerTitle>
            <DrawerDescription>Set your daily activity goal.</DrawerDescription>
          </DrawerHeader>
          <div className="p-4 pb-0">
            <div className="flex items-center justify-center space-x-2">
              <Button
                variant="outline"
                size="icon"
                className="h-8 w-8 shrink-0 rounded-full"
                onClick={() => onClick(-10)}
                disabled={goal <= 200}
              >
                <Minus className="h-4 w-4" />
                <span className="sr-only">Decrease</span>
              </Button>
              <div className="flex-1 text-center">
                <div className="text-7xl font-bold tracking-tighter">
                  {goal}
                </div>
                <div className="text-[0.70rem] uppercase text-muted-foreground">
                  Calories/day
                </div>
              </div>
              <Button
                variant="outline"
                size="icon"
                className="h-8 w-8 shrink-0 rounded-full"
                onClick={() => onClick(10)}
                disabled={goal >= 400}
              >
                <Plus className="h-4 w-4" />
                <span className="sr-only">Increase</span>
              </Button>
            </div>
            <div className="mt-3 h-[120px]">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={data}>
                  <Bar
                    dataKey="goal"
                    style={
                      {
                        fill: "hsl(var(--foreground))",
                        opacity: 0.9,
                      } as React.CSSProperties
                    }
                  />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </div>
          <DrawerFooter>
            <Button>Submit</Button>
            <DrawerClose asChild>
              <Button variant="outline">Cancel</Button>
            </DrawerClose>
          </DrawerFooter>
        </div>
      </DrawerContent>
    </Drawer>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/DropdownMenuDemo.tsx
================================================
import {
  Cloud,
  CreditCard,
  Github,
  Keyboard,
  LifeBuoy,
  LogOut,
  Mail,
  MessageSquare,
  Plus,
  PlusCircle,
  Settings,
  Settings2,
  User,
  UserPlus,
  Users,
} from "lucide-react";

import { Button } from "@/components/shadcn/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuPortal,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuTrigger,
} from "@/components/shadcn/ui/dropdown-menu";

export default function DropdownMenuDemo() {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Settings2 />
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56">
        <DropdownMenuLabel>My Account</DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuGroup>
          <DropdownMenuItem>
            <User className="mr-2 h-4 w-4" />
            <span>Profile</span>
            <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>
          </DropdownMenuItem>
          <DropdownMenuItem>
            <CreditCard className="mr-2 h-4 w-4" />
            <span>Billing</span>
            <DropdownMenuShortcut>⌘B</DropdownMenuShortcut>
          </DropdownMenuItem>
          <DropdownMenuItem>
            <Settings className="mr-2 h-4 w-4" />
            <span>Settings</span>
            <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>
          </DropdownMenuItem>
          <DropdownMenuItem>
            <Keyboard className="mr-2 h-4 w-4" />
            <span>Keyboard shortcuts</span>
            <DropdownMenuShortcut>⌘K</DropdownMenuShortcut>
          </DropdownMenuItem>
        </DropdownMenuGroup>
        <DropdownMenuSeparator />
        <DropdownMenuGroup>
          <DropdownMenuItem>
            <Users className="mr-2 h-4 w-4" />
            <span>Team</span>
          </DropdownMenuItem>
          <DropdownMenuSub>
            <DropdownMenuSubTrigger>
              <UserPlus className="mr-2 h-4 w-4" />
              <span>Invite users</span>
            </DropdownMenuSubTrigger>
            <DropdownMenuPortal>
              <DropdownMenuSubContent>
                <DropdownMenuItem>
                  <Mail className="mr-2 h-4 w-4" />
                  <span>Email</span>
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <MessageSquare className="mr-2 h-4 w-4" />
                  <span>Message</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <PlusCircle className="mr-2 h-4 w-4" />
                  <span>More...</span>
                </DropdownMenuItem>
              </DropdownMenuSubContent>
            </DropdownMenuPortal>
          </DropdownMenuSub>
          <DropdownMenuItem>
            <Plus className="mr-2 h-4 w-4" />
            <span>New Team</span>
            <DropdownMenuShortcut>⌘+T</DropdownMenuShortcut>
          </DropdownMenuItem>
        </DropdownMenuGroup>
        <DropdownMenuSeparator />
        <DropdownMenuItem>
          <Github className="mr-2 h-4 w-4" />
          <span>GitHub</span>
        </DropdownMenuItem>
        <DropdownMenuItem>
          <LifeBuoy className="mr-2 h-4 w-4" />
          <span>Support</span>
        </DropdownMenuItem>
        <DropdownMenuItem disabled>
          <Cloud className="mr-2 h-4 w-4" />
          <span>API</span>
        </DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuItem>
          <LogOut className="mr-2 h-4 w-4" />
          <span>Log out</span>
          <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/NavigationMenuDemo.tsx
================================================
"use client";
import * as React from "react";
import { cn } from "@/components/shadcn/lib/utils";
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  navigationMenuTriggerStyle,
} from "@/components/shadcn/ui/navigation-menu";
import { Home } from "lucide-react";
import { Link } from "@tanstack/react-router";

const components: { title: string; href: string; description: string }[] = [
  {
    title: "Alert Dialog",
    href: "/docs/primitives/alert-dialog",
    description:
      "A modal dialog that interrupts the user with important content and expects a response.",
  },
  {
    title: "Hover Card",
    href: "/docs/primitives/hover-card",
    description:
      "For sighted users to preview content available behind a link.",
  },
  {
    title: "Progress",
    href: "/docs/primitives/progress",
    description:
      "Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.",
  },
  {
    title: "Scroll-area",
    href: "/docs/primitives/scroll-area",
    description: "Visually or semantically separates content.",
  },
  {
    title: "Tabs",
    href: "/docs/primitives/tabs",
    description:
      "A set of layered sections of content—known as tab panels—that are displayed one at a time.",
  },
  {
    title: "Tooltip",
    href: "/docs/primitives/tooltip",
    description:
      "A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.",
  },
];

export default function NavigationMenuDemo() {
  return (
    <NavigationMenu>
      <NavigationMenuList>
        <NavigationMenuItem>
          <NavigationMenuTrigger>uwu</NavigationMenuTrigger>
          <NavigationMenuContent>
            <ul className="grid gap-3 p-6 md:w-[400px] lg:w-[500px] lg:grid-cols-[.75fr_1fr]">
              <li className="row-span-3">
                <NavigationMenuLink asChild>
                  <a
                    className="from-muted/50 flex h-full w-full select-none flex-col justify-end rounded-md bg-gradient-to-b to-muted p-6 no-underline outline-none focus:shadow-md"
                    href="/"
                  >
                    <Home className="h-6 w-6" />
                    <div className="mb-2 mt-4 text-lg font-medium">
                      shadcn/ui
                    </div>
                    <p className="text-sm leading-tight text-muted-foreground">
                      Beautifully designed components that you can copy and
                      paste into your apps. Accessible. Customizable. Open
                      Source.
                    </p>
                  </a>
                </NavigationMenuLink>
              </li>
              <ListItem href="/docs" title="Introduction">
                Re-usable components built using Radix UI and Tailwind CSS.
              </ListItem>
              <ListItem href="/docs/installation" title="Installation">
                How to install dependencies and structure your app.
              </ListItem>
              <ListItem href="/docs/primitives/typography" title="Typography">
                Styles for headings, paragraphs, lists...etc
              </ListItem>
            </ul>
          </NavigationMenuContent>
        </NavigationMenuItem>
        <NavigationMenuItem>
          <NavigationMenuTrigger>sample</NavigationMenuTrigger>
          <NavigationMenuContent>
            <ul className="grid w-[400px] gap-3 p-4 md:w-[500px] md:grid-cols-2 lg:w-[600px]">
              {components.map((component) => (
                <ListItem
                  key={component.title}
                  title={component.title}
                  href={component.href}
                >
                  {component.description}
                </ListItem>
              ))}
            </ul>
          </NavigationMenuContent>
        </NavigationMenuItem>
        <NavigationMenuItem>
          <Link to="/about">
            <NavigationMenuLink className={navigationMenuTriggerStyle()}>
              About
            </NavigationMenuLink>
          </Link>
        </NavigationMenuItem>
      </NavigationMenuList>
    </NavigationMenu>
  );
}

const ListItem = React.forwardRef<
  React.ElementRef<"a">,
  React.ComponentPropsWithoutRef<"a">
>(({ className, title, children, ...props }, ref) => {
  return (
    <li>
      <NavigationMenuLink asChild>
        <a
          ref={ref}
          className={cn(
            "block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground",
            className,
          )}
          {...props}
        >
          <div className="text-sm font-medium leading-none">{title}</div>
          <p className="line-clamp-2 text-sm leading-snug text-muted-foreground">
            {children}
          </p>
        </a>
      </NavigationMenuLink>
    </li>
  );
});
ListItem.displayName = "ListItem";



================================================
FILE: src/routes/shadcn/-components/demos/SkeletonDemo.tsx
================================================
import { Skeleton } from "@/components/shadcn/ui/skeleton";

export function SkeletonDemo() {
  return (
    <div className="flex items-center space-x-4">
      <Skeleton className="h-12 w-12 rounded-full" />
      <div className="space-y-2">
        <Skeleton className="h-4 w-[250px]" />
        <Skeleton className="h-10 w-[230px]" />
      </div>
    </div>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/Sliderdemo.tsx
================================================
import { cn } from "@/components/shadcn/lib/utils";
import { Slider } from "@/components/shadcn/ui/slider";

type SliderProps = React.ComponentProps<typeof Slider>;

export function SliderDemo({ className, ...props }: SliderProps) {
  return (
    <Slider
      defaultValue={[50]}
      max={100}
      step={1}
      className={cn("w-[60%]", className)}
      {...props}
    />
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/Sonnerdemo.tsx
================================================
import { Button } from "@/components/shadcn/ui/button";
import { toast } from "sonner";


export function SonnerDemo() {
  return (
    <Button
      variant="outline"
      onClick={() =>
        toast("Event has been created", {
          description: "Sunday, December 03, 2023 at 9:00 AM",
          action: {
            label: "Undo",
            onClick: () => console.log("Undo"),
          },
        })
      }
    >
      Show Toast
    </Button>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/TabsDemo.tsx
================================================
import { Button } from "@/components/shadcn/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/shadcn/ui/card";
import { Input } from "@/components/shadcn/ui/input";
import { Label } from "@/components/shadcn/ui/label";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/shadcn/ui/tabs";

export default function TabsDemo() {
  return (
    <Tabs defaultValue="account" className="w-[400px]">
      <TabsList className="grid w-full grid-cols-2">
        <TabsTrigger value="account">Account</TabsTrigger>
        <TabsTrigger value="password">Password</TabsTrigger>
      </TabsList>
      <TabsContent value="account">
        <Card>
          <CardHeader>
            <CardTitle>Account</CardTitle>
            <CardDescription>
              Make changes to your account here. Click save when you're done.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-2">
            <div className="space-y-1">
              <Label htmlFor="name">Name</Label>
              <Input id="name" defaultValue="Pedro Duarte" />
            </div>
            <div className="space-y-1">
              <Label htmlFor="username">Username</Label>
              <Input id="username" defaultValue="@peduarte" />
            </div>
          </CardContent>
          <CardFooter>
            <Button>Save changes</Button>
          </CardFooter>
        </Card>
      </TabsContent>
      <TabsContent value="password">
        <Card>
          <CardHeader>
            <CardTitle>Password</CardTitle>
            <CardDescription>
              Change your password here. After saving, you'll be logged out.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-2">
            <div className="space-y-1">
              <Label htmlFor="current">Current password</Label>
              <Input id="current" type="password" />
            </div>
            <div className="space-y-1">
              <Label htmlFor="new">New password</Label>
              <Input id="new" type="password" />
            </div>
          </CardContent>
          <CardFooter>
            <Button>Save password</Button>
          </CardFooter>
        </Card>
      </TabsContent>
    </Tabs>
  );
}



================================================
FILE: src/routes/shadcn/-components/demos/data-table/colimns.tsx
================================================
import { ColumnDef } from "@tanstack/react-table";
import { ArrowUpDown, MoreHorizontal } from "lucide-react";
import { Button } from "@/components/shadcn/ui/button";
import { Checkbox } from "@/components/shadcn/ui/checkbox";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/shadcn/ui/dropdown-menu";
import { Payment } from "./DataTableDemo";
export const columns: ColumnDef<Payment>[] = [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && "indeterminate")
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "status",
    header: "Status",
    cell: ({ row }) => (
      <div className="capitalize">{row.getValue("status")}</div>
    ),
  },
  {
    accessorKey: "email",
    header: ({ column }) => {
      return (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
        >
          Email
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      );
    },
    cell: ({ row }) => <div className="lowercase">{row.getValue("email")}</div>,
  },
  {
    accessorKey: "amount",
    header: () => <div className="text-right">Amount</div>,
    cell: ({ row }) => {
      const amount = parseFloat(row.getValue("amount"));

      // Format the amount as a dollar amount
      const formatted = new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
      }).format(amount);

      return <div className="text-right font-medium">{formatted}</div>;
    },
  },
  {
    id: "actions",
    enableHiding: false,
    cell: ({ row }) => {
      const payment = row.original;

      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0">
              <span className="sr-only">Open menu</span>
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Actions</DropdownMenuLabel>
            <DropdownMenuItem
              onClick={() => navigator.clipboard.writeText(payment.id)}
            >
              Copy payment ID
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem>View customer</DropdownMenuItem>
            <DropdownMenuItem>View payment details</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      );
    },
  },
];



================================================
FILE: src/routes/shadcn/-components/demos/data-table/DataTableDemo.tsx
================================================
"use client";

import * as React from "react";
import {
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table";
import { ChevronDown } from "lucide-react";
import { Button } from "@/components/shadcn/ui/button";
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
} from "@/components/shadcn/ui/dropdown-menu";
import { Input } from "@/components/shadcn/ui/input";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/shadcn/ui/table";
import { columns } from "./colimns";

const data: Payment[] = [
  {
    id: "m5gr84i9",
    amount: 316,
    status: "success",
    email: "ken99@yahoo.com",
  },
  {
    id: "3u1reuv4",
    amount: 242,
    status: "success",
    email: "Abe45@gmail.com",
  },
  {
    id: "derv1ws0",
    amount: 837,
    status: "processing",
    email: "Monserrat44@gmail.com",
  },
  {
    id: "5kma53ae",
    amount: 874,
    status: "success",
    email: "Silas22@gmail.com",
  },
  {
    id: "bhqecj4p",
    amount: 721,
    status: "failed",
    email: "carmella@hotmail.com",
  },
];

export type Payment = {
  id: string;
  amount: number;
  status: "pending" | "processing" | "success" | "failed";
  email: string;
};

export function DataTableDemo() {
  const [sorting, setSorting] = React.useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    [],
  );
  const [columnVisibility, setColumnVisibility] =
    React.useState<VisibilityState>({});
  const [rowSelection, setRowSelection] = React.useState({});

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  });

  return (
    <div className="w-full">
      <div className="flex items-center py-4">
        <Input
          placeholder="Filter emails..."
          value={(table.getColumn("email")?.getFilterValue() as string) ?? ""}
          onChange={(event) =>
            table.getColumn("email")?.setFilterValue(event.target.value)
          }
          className="max-w-sm"
        />
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" className="ml-auto">
              Columns <ChevronDown className="ml-2 h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            {table
              .getAllColumns()
              .filter((column) => column.getCanHide())
              .map((column) => {
                return (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    className="capitalize"
                    checked={column.getIsVisible()}
                    onCheckedChange={(value) =>
                      column.toggleVisibility(!!value)
                    }
                  >
                    {column.id}
                  </DropdownMenuCheckboxItem>
                );
              })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  return (
                    <TableHead key={header.id}>
                      {header.isPlaceholder
                        ? null
                        : flexRender(
                            header.column.columnDef.header,
                            header.getContext(),
                          )}
                    </TableHead>
                  );
                })}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext(),
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={columns.length}
                  className="h-24 text-center"
                >
                  No results.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      <div className="flex items-center justify-end space-x-2 py-4">
        <div className="flex-1 text-sm text-muted-foreground">
          {table.getFilteredSelectedRowModel().rows.length} of{" "}
          {table.getFilteredRowModel().rows.length} row(s) selected.
        </div>
        <div className="space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            Previous
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
          >
            Next
          </Button>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: src/routes/twarkui/index.lazy.tsx
================================================
import { createLazyFileRoute } from '@tanstack/react-router'
import { TwarkUIPageComponent } from './-components/TwarkUIPageComponent';
import { ToasterContainer } from "./-components/groups/ToasterDemo";


export const Route = createLazyFileRoute('/twarkui/')({
  component: Index
})

export function Index(){
return (
  <div className="flex h-full min-h-screen w-full flex-col items-center justify-center">
    <TwarkUIPageComponent />
    <ToasterContainer />
  </div>
);
}



================================================
FILE: src/routes/twarkui/-components/ActionComponents.tsx
================================================
import { AccordionDemo } from "./groups/AccordionDemo";
import { ButtonsDemo } from "./groups/ButtonsDemo";
import { ToasterDemo } from "./groups/ToasterDemo";


export function ActionComponents(){
return (
 <div className='w-full h-full flex flex-col items-center justify-center'>
    <ButtonsDemo/>
    <AccordionDemo/>
   <ToasterDemo/>
 </div>
);
}



================================================
FILE: src/routes/twarkui/-components/TwarkUIPageComponent.tsx
================================================
import { ActionComponents } from "./ActionComponents";

export function TwarkUIPageComponent(){
return (
  <div className="flex h-full w-full flex-col items-center ">
    <div className="text-4xl underline">twark ui</div>
    <ActionComponents />
  </div>
);
}



================================================
FILE: src/routes/twarkui/-components/groups/AccordionDemo.tsx
================================================

import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "~/components/park/ui/accordion";
export function AccordionDemo(){

return (
  <div className="flex h-full w-full flex-col items-center justify-center">
    <h1 className="w-full p-2 text-center text-xl">Accordion</h1>
    <Accordion  collapsible className="w-[80%] min-w-[40%]">
      <AccordionItem value="item-1">
        <AccordionTrigger>Is it accessible?</AccordionTrigger>
        <AccordionContent>
          Yes. It adheres to the WAI-ARIA design pattern.
        </AccordionContent>
      </AccordionItem>
      <AccordionItem value="item-2">
        <AccordionTrigger>Is it styled?</AccordionTrigger>
        <AccordionContent>
          Yes. It comes with default styles that matches the other
          components&apos; aesthetic.
        </AccordionContent>
      </AccordionItem>
      <AccordionItem value="item-3">
        <AccordionTrigger>Is it animated?</AccordionTrigger>
        <AccordionContent>
          Yes. It&apos;s animated by default, but you can disable it if you
          prefer.
        </AccordionContent>
      </AccordionItem>
    </Accordion>
  </div>
);
}



================================================
FILE: src/routes/twarkui/-components/groups/ButtonsDemo.tsx
================================================
import { Button } from "@/components/park/ui/button";

export function ButtonsDemo(){
return (
 <div className='w-full h-full flex flex-wrap gap-2 items-center justify-center'>
   <h1 className="w-full text-center text-xl p-2">Buttons</h1>
    <Button size="sm"> Small button</Button>
    <Button> Default button</Button>
    <Button size="lg"> Large button</Button>

    <Button variant="subtle"> sublte button</Button>
    <Button variant="outline"> Outline button</Button>
    <Button variant="ghost"> Ghost button</Button>
    <Button variant="link"> Link button</Button>

 </div>
);
}



================================================
FILE: src/routes/twarkui/-components/groups/ToasterDemo.tsx
================================================
import { toaster } from "@/components/park/lib/create-taost";
import { Button } from "@/components/park/ui/button";
import * as Toast from "@/components/park/ui/toast"
import { XIcon } from "lucide-react";
export function ToasterContainer(){
return (
  <>
    <Toast.Toaster toaster={toaster}>
      {(toast) => (
        <Toast.Root
          key={toast.id}
          type="success"
        >
          <Toast.Title>{toast.title}</Toast.Title>
          <Toast.Description>{toast.description}</Toast.Description>
          <Toast.ActionTrigger asChild>
            <Button variant="link" size="sm">
              Action
            </Button>
          </Toast.ActionTrigger>
          <Toast.CloseTrigger asChild>
            <Button size="sm" variant="link">
              <XIcon />
            </Button>
          </Toast.CloseTrigger>
        </Toast.Root>
      )}
    </Toast.Toaster>
  </>
);
}

export function ToasterDemo(){
return (
  <div className="flex h-full w-full flex-wrap items-center justify-center">
    <Button
      onClick={() => {
        toaster.create({
          title: "info",
          description: `this is a info toast`,
          type: "info",
          duration:5000,
          placement:"bottom-end"
        });
      }}
    >
    Info  Toast
    </Button>
    <Button
      onClick={() => {
        toaster.create({
          title: "Success",
          description: `this is a success toast`,
          type: "success",
          duration:5000,
          placement:"bottom-end"
        });
      }}
    >
    Success  Toast
    </Button>

    <Button
      onClick={() => {
        toaster.create({
          title: "Warning",
          description: `this is a warning toast`,
          type: "loading",
          duration:5000,
          placement:"bottom-end"
        });
      }}
    >
    Warning  Toast
    </Button>


    <Button
      onClick={() => {
        toaster.create({
          title: "Success",
          description: `this is an error toast`,
          type: "error",
          duration:5000,
          placement:"bottom-end"
        });
      }}
    >
    Error  Toast
    </Button>
  </div>
);
}


